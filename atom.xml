<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随我的博客</title>
  
  <subtitle>记录学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-15T02:04:54.691Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>随我</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot集成Swagger2</title>
    <link href="http://yoursite.com/2018/11/14/Springboot%E9%9B%86%E6%88%90Swagger2/"/>
    <id>http://yoursite.com/2018/11/14/Springboot集成Swagger2/</id>
    <published>2018-11-14T12:52:33.000Z</published>
    <updated>2018-11-15T02:04:54.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Springboot集成Swagger2"><a href="#Springboot集成Swagger2" class="headerlink" title="Springboot集成Swagger2"></a>Springboot集成Swagger2</h2><hr><h4 id="一、介绍："><a href="#一、介绍：" class="headerlink" title="一、介绍："></a>一、介绍：</h4><blockquote><p>Swagger是一个功能强大且易于使用的API开发人员工具套件，适用于团队和个人，支持从整个API生命周期（从设计和文档到测试和部署）的开发。<br>Swagger由开源，免费和商用工具组成，允许任何人，从技术工程师到街头智能产品经理，构建每个人都喜欢的令人惊叹的API。<br>Swagger最初是作为2010年设计RESTful API的简单开源规范而开发的。开源工具如Swagger UI，Swagger Editor和Swagger Codegen也被开发用于更好地实现和可视化规范中定义的API。Swagger项目由规范和开源工具组成，非常受欢迎，创建了一个由社区驱动的工具组成的庞大生态系统。<br>2015年，Swagger项目被SmartBear Software收购。Swagger规范被捐赠给Linux基金会并重命名为OpenAPI规范以正式标准化REST API的描述方式。建立OpenAPI倡议是为了以公开和透明的方式指导美洲国家组织的发展。<br>从那以后，Swagger成为最受欢迎的工具套件，可以在API生命周期中充分利用OAS的强大功能。</p></blockquote><hr><h4 id="二、Springboot添加Swagger2依赖"><a href="#二、Springboot添加Swagger2依赖" class="headerlink" title="二、Springboot添加Swagger2依赖"></a>二、Springboot添加Swagger2依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="三、添加Swagger2配置文件"><a href="#三、添加Swagger2配置文件" class="headerlink" title="三、添加Swagger2配置文件"></a>三、添加Swagger2配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringFoxConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">apiDocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors</span><br><span class="line">                .basePackage(<span class="string">"你的controller包，如com.example.controller"</span>)).paths(PathSelectors.any())</span><br><span class="line">                .build().apiInfo(getApiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">getApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">"TITLE"</span>,</span><br><span class="line">                <span class="string">"DESCIPRION"</span>,</span><br><span class="line">                <span class="string">"VERSION"</span>,</span><br><span class="line">                <span class="string">"TEAMS OF SERVICE URL"</span>,</span><br><span class="line">                <span class="keyword">new</span> Contact(<span class="string">"NAME"</span>,<span class="string">"URL"</span>,<span class="string">"EMAIL"</span>),</span><br><span class="line">                <span class="string">"LICENSE"</span>,</span><br><span class="line">                <span class="string">"LICENSE URL"</span>,</span><br><span class="line">                Collections.emptyList()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="WebConfig用于访问静态资源"><a href="#WebConfig用于访问静态资源" class="headerlink" title="WebConfig用于访问静态资源"></a>WebConfig用于访问静态资源</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.CacheControl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line">nfiguration</span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS).cachePublic());</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS).cachePublic());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="四、添加注解"><a href="#四、添加注解" class="headerlink" title="四、添加注解"></a>四、添加注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForumController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * by zhangjia</span></span><br><span class="line"><span class="comment">     * 获取板块分页后页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"获取板块分页后页数"</span>,notes = <span class="string">"板块页数"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/pnum/&#123;fid&#125;/&#123;isDigest&#125;"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">pageNum</span><span class="params">(@CookieValue(defaultValue = <span class="string">"0"</span>)</span> <span class="keyword">int</span> uid,</span></span><br><span class="line"><span class="function">                            @<span class="title">CookieValue</span><span class="params">(defaultValue = <span class="string">""</span>)</span> String sid,</span></span><br><span class="line"><span class="function">                            @ApiParam @PathVariable <span class="keyword">int</span> fid,</span></span><br><span class="line"><span class="function">                            @ApiParam @PathVariable <span class="keyword">int</span> isDigest,</span></span><br><span class="line"><span class="function">                            @Autowired HttpServletRequest request) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> forumService.getPageNum(fid, isDigest);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="通过访问：http-localhost-8080-v2-api-docs-，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger-UI来生成一个可读性良好的api页面。"><a href="#通过访问：http-localhost-8080-v2-api-docs-，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger-UI来生成一个可读性良好的api页面。" class="headerlink" title="通过访问：http://localhost:8080/v2/api-docs ，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger UI来生成一个可读性良好的api页面。"></a>通过访问：<a href="http://localhost:8080/v2/api-docs" target="_blank" rel="noopener">http://localhost:8080/v2/api-docs</a> ，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger UI来生成一个可读性良好的api页面。</h5><h5 id="访问：http-localhost-8080-your-app-root-swagger-ui-html-就可以看到可读性较好的api文档页面。"><a href="#访问：http-localhost-8080-your-app-root-swagger-ui-html-就可以看到可读性较好的api文档页面。" class="headerlink" title="访问：http://localhost:8080/your-app-root/swagger-ui.html 就可以看到可读性较好的api文档页面。"></a>访问：<a href="http://localhost:8080/your-app-root/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/your-app-root/swagger-ui.html</a> 就可以看到可读性较好的api文档页面。</h5><p><img src="https://img-blog.csdnimg.cn/20181114204922957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h4 id="五、常见注解介绍"><a href="#五、常见注解介绍" class="headerlink" title="五、常见注解介绍"></a>五、常见注解介绍</h4><p>Swagger通过注解表明该接口会生成文档，包括接口名、请求方法、参数、返回信息的等等。</p><blockquote><p>@Api：修饰整个类，描述Controller的作用<br>@ApiOperation：描述一个类的一个方法，或者说一个接口<br>@ApiParam：单个参数描述<br>@ApiModel：用对象来接收参数<br>@ApiProperty：用对象接收参数时，描述对象的一个字段<br>@ApiResponse：HTTP响应其中1个描述<br>@ApiResponses：HTTP响应整体描述<br>@ApiIgnore：使用该注解忽略这个API<br>@ApiError ：发生错误返回的信息<br>@ApiImplicitParam：一个请求参数<br>@ApiImplicitParams：多个请求参数</p></blockquote><hr><p>参考文章：<br><a href="https://blog.csdn.net/fansunion/article/details/51923720" target="_blank" rel="noopener">https://blog.csdn.net/fansunion/article/details/51923720</a><br><a href="https://blog.csdn.net/saytime/article/details/74937664" target="_blank" rel="noopener">https://blog.csdn.net/saytime/article/details/74937664</a><br><a href="https://blog.csdn.net/Phone_1070333541/article/details/80949040" target="_blank" rel="noopener">https://blog.csdn.net/Phone_1070333541/article/details/80949040</a></p>]]></content>
    
    <summary type="html">
    
      Swagger是一个功能强大且易于使用的API开发人员工具套件，适用于团队和个人，支持从整个API生命周期（从设计和文档到测试和部署）的开发。
    
    </summary>
    
      <category term="Springboot" scheme="http://yoursite.com/categories/Springboot/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Springboot" scheme="http://yoursite.com/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode：29. 两数相除（Java）</title>
    <link href="http://yoursite.com/2018/10/23/LeetCode%EF%BC%9A29-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4%EF%BC%88Java%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/23/LeetCode：29-两数相除（Java）/</id>
    <published>2018-10-23T12:34:05.000Z</published>
    <updated>2018-11-15T02:08:16.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="29-两数相除（Java）"><a href="#29-两数相除（Java）" class="headerlink" title="29. 两数相除（Java）"></a>29. 两数相除（Java）</h2><hr><h5 id="参考文章：https-blog-csdn-net-qq-31442743-article-details-81181554"><a href="#参考文章：https-blog-csdn-net-qq-31442743-article-details-81181554" class="headerlink" title="参考文章：https://blog.csdn.net/qq_31442743/article/details/81181554"></a>参考文章：<a href="https://blog.csdn.net/qq_31442743/article/details/81181554" target="_blank" rel="noopener">https://blog.csdn.net/qq_31442743/article/details/81181554</a></h5><h5 id="给定两个整数，被除数-dividend和除数-divisor。将两数相除，要求不使用乘法、除法和-mod-运算符。返回被除数-dividend除以除数-divisor得到的商。"><a href="#给定两个整数，被除数-dividend和除数-divisor。将两数相除，要求不使用乘法、除法和-mod-运算符。返回被除数-dividend除以除数-divisor得到的商。" class="headerlink" title="给定两个整数，被除数 dividend和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。返回被除数 dividend除以除数 divisor得到的商。"></a>给定两个整数，被除数 <code>dividend</code>和除数 <code>divisor</code>。将两数相除，要求不使用乘法、除法和 mod 运算符。返回被除数 <code>dividend</code>除以除数 <code>divisor</code>得到的商。</h5><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: dividend = 10, divisor = 3</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: dividend = 7, divisor = -3</span><br><span class="line">输出: -2</span><br></pre></td></tr></table></figure></p><p>说明:</p><ul><li>被除数和除数均为 32 位有符号整数。    </li><li>除数不为 0。</li><li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。</li></ul><hr><p>二进制相关的形式来实现。”&lt;&lt;”和”&gt;&gt;”分别为将数的整体左移和右移，例如a&lt;&lt;1表示将a向左移动一位，即变为原来的二倍。</p><p>思路:当被除数大于等于除数时(否则的话就为0了)，我们设置两个变量t和p，并分别初始化为除数和1(最小的情况)，当被除数大于等于t的二倍时，将t和p同时扩大二倍(左移)，并将返回值加上p，除数减去t。和二进制类似，例如29除以8，8扩大二倍，16小于29，再扩大二倍，超过29，于是29减去之前的16，返回值加上2。第二次循环时因为此时的13小于8的二倍，故加上1，整个循环结束，最终结果为2+1=3，很明显符合。此外注意判断结果正负号的正负号时亦或的作用。 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(divisor == <span class="number">0</span> || (dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="number">1</span>))&#123;<span class="comment">//考虑特殊情况</span></span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sign = ((dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>)) ? -<span class="number">1</span> : <span class="number">1</span>;<span class="comment">//异或运算</span></span><br><span class="line">        <span class="keyword">long</span> ms = (<span class="keyword">long</span>)dividend;</span><br><span class="line">        <span class="keyword">long</span> ns = (<span class="keyword">long</span>)divisor;</span><br><span class="line">        ms = Math.abs(ms);</span><br><span class="line">        ns = Math.abs(ns);</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ms &gt;= ns)&#123;</span><br><span class="line">            <span class="keyword">long</span> m = ns;</span><br><span class="line">            <span class="keyword">long</span> n = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(ms &gt;= (m &lt;&lt; <span class="number">1</span>))&#123;</span><br><span class="line">                m &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num += n;</span><br><span class="line">            ms -= m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num * sign;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      给定两个整数，被除数 dividend 和除数 divisor 。将两数相除，要求不使用乘法、除法和 mod 运算符。返回被除数 dividend 除以除数 divisor 得到的商。
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode：10 正则表达式匹配（Java）</title>
    <link href="http://yoursite.com/2018/10/05/LeetCode%EF%BC%9A10-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%EF%BC%88Java%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/05/LeetCode：10-正则表达式匹配（Java）/</id>
    <published>2018-10-05T08:27:28.000Z</published>
    <updated>2018-11-15T02:04:56.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode：10-正则表达式匹配"><a href="#LeetCode：10-正则表达式匹配" class="headerlink" title="LeetCode：10 正则表达式匹配"></a>LeetCode：10 正则表达式匹配</h2><hr><h5 id="给定一个字符串-s-和一个字符模式-p-。实现支持-‘-’-和-‘-’-的正则表达式匹配。"><a href="#给定一个字符串-s-和一个字符模式-p-。实现支持-‘-’-和-‘-’-的正则表达式匹配。" class="headerlink" title="给定一个字符串 (s) 和一个字符模式 (p)。实现支持 ‘.’ 和 ‘*’ 的正则表达式匹配。"></a>给定一个字符串 (s) 和一个字符模式 (p)。实现支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;.&apos; 匹配任意单个字符。</span><br><span class="line">&apos;*&apos; 匹配零个或多个前面的元素。</span><br></pre></td></tr></table></figure><h6 id="匹配应该覆盖整个字符串-s-，而不是部分字符串。"><a href="#匹配应该覆盖整个字符串-s-，而不是部分字符串。" class="headerlink" title="匹配应该覆盖整个字符串 (s) ，而不是部分字符串。"></a>匹配应该覆盖整个字符串 (s) ，而不是部分字符串。</h6><h5 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s 可能为空，且只包含从 a-z 的小写字母。</span><br><span class="line">p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。</span><br></pre></td></tr></table></figure><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br></pre></td></tr></table></figure><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a*&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &apos;*&apos; 代表可匹配零个或多个前面的元素, 即可以匹配 &apos;a&apos; 。因此, 重复 &apos;a&apos; 一次, 字符串可变为 &quot;aa&quot;。</span><br></pre></td></tr></table></figure><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;ab&quot;</span><br><span class="line">p = &quot;.*&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &quot;.*&quot; 表示可匹配零个或多个(&apos;*&apos;)任意字符(&apos;.&apos;)。</span><br></pre></td></tr></table></figure><h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4:"></a>示例 4:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aab&quot;</span><br><span class="line">p = &quot;c*a*b&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &apos;c&apos; 可以不被重复, &apos;a&apos; 可以被重复一次。因此可以匹配字符串 &quot;aab&quot;。</span><br></pre></td></tr></table></figure><h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5:"></a>示例 5:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;mississippi&quot;</span><br><span class="line">p = &quot;mis*is*p*.&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果都为空则匹配成功</span></span><br><span class="line">        <span class="keyword">if</span> (pattern.isEmpty()) <span class="keyword">return</span> text.isEmpty();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第一个是否匹配上</span></span><br><span class="line">        <span class="keyword">boolean</span> first_match = (!text.isEmpty() &amp;&amp; (pattern.charAt(<span class="number">0</span>) == text.charAt(<span class="number">0</span>) || pattern.charAt(<span class="number">0</span>) == <span class="string">'.'</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pattern.length() &gt;= <span class="number">2</span> &amp;&amp; pattern.charAt(<span class="number">1</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">            <span class="comment">//看有没有可能,剩下的pattern匹配上全部的text</span></span><br><span class="line">            <span class="comment">//看有没有可能,剩下的text匹配整个pattern</span></span><br><span class="line">            <span class="comment">//isMatch(text, pattern.substring(2)) 指当p第二个为*时，前面的字符不影响匹配所以可以忽略，所以将*以及*之前的一个字符删除后匹配之后的字符，这就是为什么用pattern.substring(2)</span></span><br><span class="line">            <span class="comment">//如果第一个已经匹配成功，并且第二个字符为*时，这是我们就要判断之后的需要匹配的字符串是否是多个前面的元素（*的功能），这就是first_match &amp;&amp; isMatch(text.substring(1), pattern))的意义</span></span><br><span class="line">            <span class="keyword">return</span> (isMatch(text, pattern.substring(<span class="number">2</span>)) ||</span><br><span class="line">                (first_match &amp;&amp; isMatch(text.substring(<span class="number">1</span>), pattern)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//没有星星的情况:第一个字符相等,而且剩下的text,匹配上剩下的pattern，没有星星且第一个匹配成功，那么s和p同时向右移动一位看是否仍然能匹配成功</span></span><br><span class="line">            <span class="keyword">return</span> first_match &amp;&amp; isMatch(text.substring(<span class="number">1</span>), pattern.substring(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="本文代码参考：https-blog-csdn-net-hit1110310422-article-details-80791446"><a href="#本文代码参考：https-blog-csdn-net-hit1110310422-article-details-80791446" class="headerlink" title="本文代码参考：https://blog.csdn.net/hit1110310422/article/details/80791446"></a>本文代码参考：<a href="https://blog.csdn.net/hit1110310422/article/details/80791446" target="_blank" rel="noopener">https://blog.csdn.net/hit1110310422/article/details/80791446</a></h5>]]></content>
    
    <summary type="html">
    
      给定一个字符串 (s) 和一个字符模式 (p)。实现支持 &#39;.&#39; 和 &#39;*&#39; 的正则表达式匹配。
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>玄学解决BUG</title>
    <link href="http://yoursite.com/2018/07/30/%E7%8E%84%E5%AD%A6%E8%A7%A3%E5%86%B3BUG/"/>
    <id>http://yoursite.com/2018/07/30/玄学解决BUG/</id>
    <published>2018-07-30T05:48:54.000Z</published>
    <updated>2018-11-15T01:51:56.483Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在网上汇总了一些企图玄学的图案，留着万一哪天自己能用到"><a href="#在网上汇总了一些企图玄学的图案，留着万一哪天自己能用到" class="headerlink" title="在网上汇总了一些企图玄学的图案，留着万一哪天自己能用到"></a>在网上汇总了一些企图玄学的图案，留着万一哪天自己能用到</h4><h2 id="佛祖保佑-永无BUG-永不修改"><a href="#佛祖保佑-永无BUG-永不修改" class="headerlink" title="佛祖保佑       永无BUG     永不修改"></a>佛祖保佑       永无BUG     永不修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--////////////////////////////////////////////////////////////////////--&gt;</span><br><span class="line">&lt;!--//                          _ooOoo_                               //--&gt;</span><br><span class="line">&lt;!--//                         o8888888o                              //--&gt;</span><br><span class="line">&lt;!--//                         88&quot; . &quot;88                              //--&gt;</span><br><span class="line">&lt;!--//                         (| ^_^ |)                              //--&gt;</span><br><span class="line">&lt;!--//                         O\  =  /O                              //--&gt;</span><br><span class="line">&lt;!--//                      ____/`-&amp;#45;&amp;#45;&apos;\____                   //--&gt;</span><br><span class="line">&lt;!--//                    .&apos;  \\|     |//  `.                         //--&gt;</span><br><span class="line">&lt;!--//                   /  \\|||  :  |||//  \                        //--&gt;</span><br><span class="line">&lt;!--//                  /  _||||| -:- |||||-  \                       //--&gt;</span><br><span class="line">&lt;!--//                  |   | \\\  -  /// |   |                       //--&gt;</span><br><span class="line">&lt;!--//                  | \_|  &apos;&apos;\-&amp;#45;&amp;#45;/&apos;&apos;  |   |               //--&gt;</span><br><span class="line">&lt;!--//                  \  .-\__  `-`  ___/-. /                       //--&gt;</span><br><span class="line">&lt;!--//                ___`. .&apos;  /&amp;#45;&amp;#45;.&amp;#45;&amp;#45;\  `. . ___     //--&gt;</span><br><span class="line">&lt;!--//              .&quot;&quot; &apos;&lt;  `.___\_&lt;|&gt;_/___.&apos;  &gt;&apos;&quot;&quot;.                  //--&gt;</span><br><span class="line">&lt;!--//            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 //--&gt;</span><br><span class="line">&lt;!--//            \  \ `-.   \_ __\ /__ _/   .-` /  /                 //--&gt;</span><br><span class="line">&lt;!--//      ========`-.____`-.___\_____/___.-`____.-&apos;========         //--&gt;</span><br><span class="line">&lt;!--//                           `=-&amp;#45;&amp;#45;=&apos;                      //--&gt;</span><br><span class="line">&lt;!--//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        //--&gt;</span><br><span class="line">&lt;!--//         佛祖保佑       永无BUG     永不修改                        //--&gt;</span><br><span class="line">&lt;!--////////////////////////////////////////////////////////////////////--&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * _ooOoo_</span><br><span class="line"> * o8888888o</span><br><span class="line"> * 88&quot; . &quot;88</span><br><span class="line"> * (| -_- |)</span><br><span class="line"> *  O\ = /O</span><br><span class="line"> * ___/`---&apos;\____</span><br><span class="line"> * .   &apos; \\| |// `.</span><br><span class="line"> * / \\||| : |||// \</span><br><span class="line"> * / _||||| -:- |||||- \</span><br><span class="line"> * | | \\\ - /// | |</span><br><span class="line"> * | \_| &apos;&apos;\---/&apos;&apos; | |</span><br><span class="line"> * \ .-\__ `-` ___/-. /</span><br><span class="line"> * ___`. .&apos; /--.--\ `. . __</span><br><span class="line"> * .&quot;&quot; &apos;&lt; `.___\_&lt;|&gt;_/___.&apos; &gt;&apos;&quot;&quot;.</span><br><span class="line"> * | | : `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="line"> * \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="line"> * ======`-.____`-.___\_____/___.-`____.-&apos;======</span><br><span class="line"> * `=---=&apos;</span><br><span class="line"> *          .............................................</span><br><span class="line"> *           佛曰：bug泛滥，我已瘫痪！</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">        ´´´´´´´´██´´´´´´´</span><br><span class="line">        ´´´´´´´████´´´´´´</span><br><span class="line">        ´´´´´████████´´´´</span><br><span class="line">        ´´`´███▒▒▒▒███´´´´´</span><br><span class="line">        ´´´███▒●▒▒●▒██´´´</span><br><span class="line">        ´´´███▒▒▒▒▒▒██´´´´´</span><br><span class="line">        ´´´███▒▒▒▒██´                      项目：vue-user-center</span><br><span class="line">        ´´██████▒▒███´´´´´                 语言： ES6-babel</span><br><span class="line">        ´██████▒▒▒▒███´´                   框架： vue+vue-router+vuex+iview+axios</span><br><span class="line">        ██████▒▒▒▒▒▒███´´´´                构建工具： webpack</span><br><span class="line">        ´´▓▓▓▓▓▓▓▓▓▓▓▓▓▒´´                 版本控制： git-github</span><br><span class="line">        ´´▒▒▒▒▓▓▓▓▓▓▓▓▓▒´´´´´              css预处理: less</span><br><span class="line">        ´.▒▒▒´´▓▓▓▓▓▓▓▓▒´´´´´              代码风格：eslint-standard</span><br><span class="line">        ´.▒▒´´´´▓▓▓▓▓▓▓▒                   编辑器： phpstorm</span><br><span class="line">        ..▒▒.´´´´▓▓▓▓▓▓▓▒                  数据库:  mysql</span><br><span class="line">        ´▒▒▒▒▒▒▒▒▒▒▒▒                      服务器端脚本: php go</span><br><span class="line">        ´´´´´´´´´███████´´´´´              author: codeRabbit</span><br><span class="line">        ´´´´´´´´████████´´´´´´´</span><br><span class="line">        ´´´´´´´█████████´´´´´´</span><br><span class="line">        ´´´´´´██████████´´´´             大部分人都在关注你飞的高不高，却没人在乎你飞的累不累，这就是现实！</span><br><span class="line">        ´´´´´´██████████´´´                     我从不相信梦想，我，只，相，信，自，己！</span><br><span class="line">        ´´´´´´´█████████´´</span><br><span class="line">        ´´´´´´´█████████´´´</span><br><span class="line">        ´´´´´´´´████████´´´´´</span><br><span class="line">        ________▒▒▒▒▒</span><br><span class="line">        _________▒▒▒▒</span><br><span class="line">        _________▒▒▒▒</span><br><span class="line">        ________▒▒_▒▒</span><br><span class="line">        _______▒▒__▒▒</span><br><span class="line">        _____ ▒▒___▒▒</span><br><span class="line">        _____▒▒___▒▒</span><br><span class="line">        ____▒▒____▒▒</span><br><span class="line">        ___▒▒_____▒▒</span><br><span class="line">        ███____ ▒▒</span><br><span class="line">        ████____███</span><br><span class="line">        █ _███_ _█_███</span><br><span class="line">——————————————————————————女神保佑，代码无bug——————————————————————</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h2 id="神兽保佑-代码无BUG！"><a href="#神兽保佑-代码无BUG！" class="headerlink" title="神兽保佑       代码无BUG！"></a>神兽保佑       代码无BUG！</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// ┏┓　　　┏┓</span><br><span class="line">// ┏┛┻━━━┛┻┓//</span><br><span class="line">// ┃　　　　　　　┃//</span><br><span class="line">// ┃　　　━　　　┃//</span><br><span class="line">// ┃　┳┛　┗┳　┃//</span><br><span class="line">// ┃　　　　　　　┃//</span><br><span class="line">// ┃　　　┻　　　┃//</span><br><span class="line">// ┃　　　　　　　┃//</span><br><span class="line">// ┗━┓　　　┏━┛//</span><br><span class="line">// ┃　　　┃ 神兽保佑//　　　　　　　　</span><br><span class="line">// ┃　　　┃ 代码无BUG！//</span><br><span class="line">// ┃　　　┗━━━┓//</span><br><span class="line">// ┃　　　　　　　┣┓//</span><br><span class="line">// ┃　　　　　　　┏┛//</span><br><span class="line">// ┗┓┓┏━┳┓┏┛//</span><br><span class="line">// ┃┫┫　┃┫┫//</span><br><span class="line">// ┗┻┛　┗┻┛//</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># 　　　┏┓　　　┏┓</span><br><span class="line"># 　　┏┛┻━━━┛┻┓</span><br><span class="line"># 　　┃　　　　　　　 ┃ 　</span><br><span class="line"># 　　┃　　　━　　　 ┃</span><br><span class="line"># 　　┃　＞　　　＜┃</span><br><span class="line"># 　　┃　　　　　　　 ┃</span><br><span class="line"># 　　┃ . ⌒　..┃</span><br><span class="line"># 　　┃　　　　　　　 ┃</span><br><span class="line"># 　　┗━┓　　　┏━┛</span><br><span class="line"># 　　　　┃　　　┃　Codes are far away from bugs with the animal protecting　　　　　　　</span><br><span class="line"># 　　　　┃　　　┃ 神兽保佑,代码无bug</span><br><span class="line"># 　　　　┃　　　┃　　　　　　　　　　　</span><br><span class="line"># 　　　　┃　　　┃ 　　　　　　</span><br><span class="line"># 　　　　┃　　　┃</span><br><span class="line"># 　　　　┃　　　┃　　　　　　　　　　　</span><br><span class="line"># 　　　　┃　　　┗━━━┓</span><br><span class="line"># 　　　　┃　　　　　　　┣┓</span><br><span class="line"># 　　　　┃　　　　　　　┏┛</span><br><span class="line"># 　　　　┗┓┓┏━┳┓┏┛</span><br><span class="line"># 　　　　　┃┫┫　┃┫┫</span><br><span class="line"># 　　　　　┗┻┛　┗┻┛</span><br><span class="line">#        ┏┓　　　┏┓+ +</span><br><span class="line">#　　　┏┛┻━━━┛┻┓ + +</span><br><span class="line">#　　　┃　　　　　　　┃ 　</span><br><span class="line">#　　　┃　　　━　　　┃ ++ + + +</span><br><span class="line">#　　 ████━████ ┃+</span><br><span class="line">#　　　┃　　　　　　　┃ +</span><br><span class="line">#　　　┃　　　┻　　　┃</span><br><span class="line">#　　　┃　　　　　　　┃ + +</span><br><span class="line">#　　　┗━┓　　　┏━┛</span><br><span class="line">#　　　　　┃　　　┃　　　　　　　　　　　</span><br><span class="line">#　　　　　┃　　　┃ + + + +</span><br><span class="line">#　　　　　┃　　　┃　　　　Codes are far away from bugs with the animal protecting　　　</span><br><span class="line">#　　　　　┃　　　┃ + 　　　　神兽保佑,代码无bug　　</span><br><span class="line">#　　　　　┃　　　┃</span><br><span class="line">#　　　　　┃　　　┃　　+　　　　　　　　　</span><br><span class="line">#　　　　　┃　 　　┗━━━┓ + +</span><br><span class="line">#　　　　　┃ 　　　　　　　┣┓</span><br><span class="line">#　　　　　┃ 　　　　　　　┏┛</span><br><span class="line">#　　　　　┗┓┓┏━┳┓┏┛ + + + +</span><br><span class="line">#　　　　　　┃┫┫　┃┫┫</span><br><span class="line">#　　　　　　┗┻┛　┗┻┛+ + + +</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#                代码无BUG!</span><br><span class="line">#      ,----------------,              ,---------,</span><br><span class="line">#         ,-----------------------,          ,&quot;        ,&quot;|</span><br><span class="line">#       ,&quot;                      ,&quot;|        ,&quot;        ,&quot;  |</span><br><span class="line">#      +-----------------------+  |      ,&quot;        ,&quot;    |</span><br><span class="line">#      |  .-----------------.  |  |     +---------+      |</span><br><span class="line">#      |  |                 |  |  |     | -==----&apos;|      |</span><br><span class="line">#      |  |  I LOVE DOS!    |  |  |     |         |      |</span><br><span class="line">#      |  |  Bad command or |  |  |/----|`---=    |      |</span><br><span class="line">#      |  |  C:\&gt;_          |  |  |   ,/|==== ooo |      ;</span><br><span class="line">#      |  |                 |  |  |  // |(((( [33]|    ,&quot;</span><br><span class="line">#      |  `-----------------&apos;  |,&quot; .;&apos;| |((((     |  ,&quot;</span><br><span class="line">#      +-----------------------+  ;;  | |         |,&quot;</span><br><span class="line">#         /_)______________(_/  //&apos;   | +---------+</span><br><span class="line">#    ___________________________/___  `,</span><br><span class="line">#   /  oooooooooooooooo  .o.  oooo /,   \,&quot;-----------</span><br><span class="line">#  / ==ooooooooooooooo==.o.  ooo= //   ,`\--&#123;)B     ,&quot;</span><br><span class="line"># /_==__==========__==_ooo__ooo=_/&apos;   /___________,&quot;</span><br><span class="line">#</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//   █████▒█    ██  ▄████▄   ██ ▄█▀       ██████╗ ██╗   ██╗ ██████╗</span><br><span class="line">// ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒        ██╔══██╗██║   ██║██╔════╝</span><br><span class="line">// ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░        ██████╔╝██║   ██║██║  ███╗</span><br><span class="line">// ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄        ██╔══██╗██║   ██║██║   ██║</span><br><span class="line">// ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄       ██████╔╝╚██████╔╝╚██████╔╝</span><br><span class="line">//  ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒       ╚═════╝  ╚═════╝  ╚═════╝</span><br><span class="line">//  ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░</span><br><span class="line">//  ░ ░    ░░░ ░ ░ ░        ░ ░░ ░</span><br><span class="line">//           ░     ░ ░      ░  ░</span><br><span class="line">//                 ░</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> _______________########_______________________</span><br><span class="line"> ______________##########_______________________</span><br><span class="line">______________############_____________________</span><br><span class="line">______________#############____________________</span><br><span class="line">_____________##__###########___________________</span><br><span class="line">____________###__######_#####__________________</span><br><span class="line">____________###_#######___####_________________</span><br><span class="line">___________###__##########_####________________</span><br><span class="line">__________####__###########_####_______________</span><br><span class="line">________#####___###########__#####_____________</span><br><span class="line">_______######___###_########___#####___________</span><br><span class="line">_______#####___###___########___######_________</span><br><span class="line">______######___###__###########___######_______</span><br><span class="line">_____######___####_##############__######______</span><br><span class="line">____#######__#####################_#######_____</span><br><span class="line">____#######__##############################____</span><br><span class="line">___#######__######_#################_#######___</span><br><span class="line">___#######__######_######_#########___######___</span><br><span class="line">___#######____##__######___######_____######___</span><br><span class="line">___#######________######____#####_____#####____</span><br><span class="line">____######________#####_____#####_____####_____</span><br><span class="line">_____#####________####______#####_____###______</span><br><span class="line">______#####______;###________###______#________</span><br><span class="line">________##_______####________####______________ </span><br><span class="line"></span><br><span class="line">         葱官赐福  百无禁忌</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在网上汇总了一些企图玄学的图案，留着万一哪天自己能用到
    
    </summary>
    
      <category term="企图玄学" scheme="http://yoursite.com/categories/%E4%BC%81%E5%9B%BE%E7%8E%84%E5%AD%A6/"/>
    
    
      <category term="企图玄学" scheme="http://yoursite.com/tags/%E4%BC%81%E5%9B%BE%E7%8E%84%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://yoursite.com/2018/04/28/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/28/KMP算法/</id>
    <published>2018-04-28T08:40:57.000Z</published>
    <updated>2018-04-28T09:14:08.356Z</updated>
    
    <content type="html"><![CDATA[<p>KMP算法适用于字符串匹配，今天通过相关视频，大致了理解了其实现原理以及步骤，学习的视频链接如下（这是未优化版本）：<br><a href="https://www.bilibili.com/video/av6239731/?p=11" target="_blank" rel="noopener">https://www.bilibili.com/video/av6239731/?p=11</a><br><a href="https://www.bilibili.com/video/av3246487?from=search&amp;seid=8682896714663607035" target="_blank" rel="noopener">https://www.bilibili.com/video/av3246487?from=search&amp;seid=8682896714663607035</a><br><a href="https://study.163.com/course/courseLearn.htm?courseId=468002#/learn/video?lessonId=1023415&amp;courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=468002#/learn/video?lessonId=1023415&amp;courseId=468002</a><br>由于我大概理解了原理以及代码实现，所以我到时候后期复习时建议直接看最后一个链接的视频。<br>我在网上参考了部分其他人使用的C/C++实现的KMP算法实现，代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">( <span class="keyword">int</span> *next,<span class="keyword">char</span> *a,<span class="keyword">int</span> la)</span> <span class="comment">/*求NEXT[]的值*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span> ;</span><br><span class="line">   next[<span class="number">1</span>] = <span class="number">0</span> ;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">while</span> ( i &lt;= la) <span class="comment">/*核心部分*/</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>( a[i] == a[j] || j == <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        j ++ ;</span><br><span class="line">        i ++ ;</span><br><span class="line">        <span class="keyword">if</span>( a[i] == a[j])</span><br><span class="line">        next[i] = next[j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        next[i] = j ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      j = next[j] ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str_kmp</span><span class="params">( <span class="keyword">int</span> *next, <span class="keyword">char</span> *A ,<span class="keyword">char</span> *a, <span class="keyword">int</span> lA,<span class="keyword">int</span> la)</span><span class="comment">/* EASY*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,j,k ;</span><br><span class="line">   i = <span class="number">1</span> ;</span><br><span class="line">   j = <span class="number">1</span> ;</span><br><span class="line">   <span class="keyword">while</span> ( i&lt;=lA &amp;&amp; j &lt;= la )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(A[i] == a[j] || j == <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">          i ++ ;</span><br><span class="line">          j ++ ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      j = next[j] ;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> ( j&gt; la)</span><br><span class="line">   <span class="keyword">return</span> i-j+<span class="number">1</span> ;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">-1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,k;</span><br><span class="line">  <span class="keyword">int</span> next[MAX]=&#123;<span class="number">0</span>&#125; ;</span><br><span class="line">  <span class="keyword">int</span> lA=<span class="number">0</span>,la =<span class="number">0</span> ;</span><br><span class="line">  <span class="keyword">char</span> A[MAX],a[MAX] ;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s %s"</span>,A,a) ;</span><br><span class="line">  </span><br><span class="line">  lA = <span class="built_in">strlen</span>(A);</span><br><span class="line">  la = <span class="built_in">strlen</span>(a);</span><br><span class="line">  <span class="keyword">for</span>(k=la<span class="number">-1</span>; k&gt;= <span class="number">0</span> ;k --)</span><br><span class="line">  a[k+<span class="number">1</span>] = a[k] ;</span><br><span class="line">  <span class="keyword">for</span>(k=lA<span class="number">-1</span>; k&gt;= <span class="number">0</span> ;k --)</span><br><span class="line">  A[k+<span class="number">1</span>] = A[k] ;</span><br><span class="line">  </span><br><span class="line">  get_next(next,a,la) ;</span><br><span class="line">  k = str_kmp(next,A,a,lA,la);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">-1</span> == k)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Not Soulation!!! "</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d "</span>,k) ;</span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      本文是在观看了部分KMP算法相关视频后做的笔记
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="KMP算法" scheme="http://yoursite.com/tags/KMP%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://yoursite.com/2018/04/25/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/04/25/快速排序/</id>
    <published>2018-04-25T08:42:49.000Z</published>
    <updated>2018-04-25T08:44:03.385Z</updated>
    
    <content type="html"><![CDATA[<h5 id="其实这节课并没有听太懂，但是为了防止忘记，所以直接将郝斌老师的代码扔到了博客上希望我之后多次看之后能真正理解这个排序方法，还有就是郝斌老师的数据结构课程看完了，并没有图的相关，看来我要开始自学图了，加油！！！！"><a href="#其实这节课并没有听太懂，但是为了防止忘记，所以直接将郝斌老师的代码扔到了博客上希望我之后多次看之后能真正理解这个排序方法，还有就是郝斌老师的数据结构课程看完了，并没有图的相关，看来我要开始自学图了，加油！！！！" class="headerlink" title="其实这节课并没有听太懂，但是为了防止忘记，所以直接将郝斌老师的代码扔到了博客上希望我之后多次看之后能真正理解这个排序方法，还有就是郝斌老师的数据结构课程看完了，并没有图的相关，看来我要开始自学图了，加油！！！！"></a>其实这节课并没有听太懂，但是为了防止忘记，所以直接将郝斌老师的代码扔到了博客上希望我之后多次看之后能真正理解这个排序方法，还有就是郝斌老师的数据结构课程看完了，并没有图的相关，看来我要开始自学图了，加油！！！！</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindPos</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>] = &#123;<span class="number">-2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-985</span>, <span class="number">4</span>, <span class="number">-93</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">QuickSort(a, <span class="number">0</span>, <span class="number">5</span>); <span class="comment">//第二个参数表示第一个元素的下标  第三个参数表示最后一个元素的下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">6</span>; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d  "</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">pos = FindPos(a, low, high);</span><br><span class="line">QuickSort(a, low, pos<span class="number">-1</span>);</span><br><span class="line">QuickSort(a, pos+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindPos</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> val = a[low];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (low&lt;high  &amp;&amp; a[high]&gt;=val)</span><br><span class="line">--high;</span><br><span class="line">a[low] = a[high];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (low&lt;high &amp;&amp; a[low]&lt;=val)</span><br><span class="line">++low;</span><br><span class="line">a[high] = a[low];</span><br><span class="line">&#125;<span class="comment">//终止while循环之后low和high一定是相等的</span></span><br><span class="line"></span><br><span class="line">a[low] = val; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> high; <span class="comment">//high可以改为low, 但不能改为val 也不能改为a[low]  也不能改为a[high]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后将他课上的代码直接复制下来以做后期复习用
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="快速排序" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>二叉树以及链式二叉树的常见操作</title>
    <link href="http://yoursite.com/2018/04/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BB%A5%E5%8F%8A%E9%93%BE%E5%BC%8F%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/24/二叉树以及链式二叉树的常见操作/</id>
    <published>2018-04-24T11:29:41.000Z</published>
    <updated>2018-04-24T12:29:51.529Z</updated>
    
    <content type="html"><![CDATA[<h5 id="二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现"><a href="#二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现" class="headerlink" title="二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现"></a>二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现</h5><hr><hr><h1 id="一、二叉树的中的一些专有名词的解释："><a href="#一、二叉树的中的一些专有名词的解释：" class="headerlink" title="一、二叉树的中的一些专有名词的解释："></a>一、二叉树的中的一些专有名词的解释：</h1><h4 id="1-先序遍历-指先访问根节点，再先序遍历左子树，再先序遍历右子树"><a href="#1-先序遍历-指先访问根节点，再先序遍历左子树，再先序遍历右子树" class="headerlink" title="1.先序遍历:指先访问根节点，再先序遍历左子树，再先序遍历右子树"></a>1.先序遍历:指先访问根节点，再先序遍历左子树，再先序遍历右子树</h4><h4 id="2-中序遍历-指先中序遍历左子树，再访问根节点，再中序遍历右子树"><a href="#2-中序遍历-指先中序遍历左子树，再访问根节点，再中序遍历右子树" class="headerlink" title="2.中序遍历:指先中序遍历左子树，再访问根节点，再中序遍历右子树"></a>2.中序遍历:指先中序遍历左子树，再访问根节点，再中序遍历右子树</h4><h4 id="3-后序遍历-指先后序遍历左子树，再后序遍历右子树，再访问根节点"><a href="#3-后序遍历-指先后序遍历左子树，再后序遍历右子树，再访问根节点" class="headerlink" title="3.后序遍历:指先后序遍历左子树，再后序遍历右子树，再访问根节点"></a>3.后序遍历:指先后序遍历左子树，再后序遍历右子树，再访问根节点</h4><hr><h3 id="下面是郝斌老师上课时关于这三种遍历的视频截图"><a href="#下面是郝斌老师上课时关于这三种遍历的视频截图" class="headerlink" title="下面是郝斌老师上课时关于这三种遍历的视频截图"></a>下面是郝斌老师上课时关于这三种遍历的视频截图</h3><h4 id="先序遍历："><a href="#先序遍历：" class="headerlink" title="先序遍历："></a>先序遍历：</h4><p><img src="/images/二叉树以及链式二叉树的常见操作/16E99165-B321-4342-88B0-F3569F2EB721.png" alt="这里写图片描述"><br><img src="/images/二叉树以及链式二叉树的常见操作/B99F1817-9470-45C1-9A38-F21E09B0A422.png" alt="这里写图片描述"></p><h4 id="中序遍历："><a href="#中序遍历：" class="headerlink" title="中序遍历："></a>中序遍历：</h4><p><img src="/images/二叉树以及链式二叉树的常见操作/B02F8E38-A519-413C-8B26-CC5579419EDE.png" alt="这里写图片描述"><br><img src="/images/二叉树以及链式二叉树的常见操作/DA062882-F56D-4104-B51F-6BBCEFCF8964.png" alt="这里写图片描述"></p><h4 id="后序遍历："><a href="#后序遍历：" class="headerlink" title="后序遍历："></a>后序遍历：</h4><p><img src="/images/二叉树以及链式二叉树的常见操作/A58BF56E-6085-48BA-8214-50116CE8DE33.png" alt="这里写图片描述"><br><img src="/images/二叉树以及链式二叉树的常见操作/355C5279-81ED-49B5-8D27-40F57D41CCC1.png" alt="这里写图片描述"></p><hr><hr><h1 id="二、通过先序与中序求后序以及通过中序与后序求先序"><a href="#二、通过先序与中序求后序以及通过中序与后序求先序" class="headerlink" title="二、通过先序与中序求后序以及通过中序与后序求先序"></a>二、通过先序与中序求后序以及通过中序与后序求先序</h1><h3 id="不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。"><a href="#不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。" class="headerlink" title="不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。"></a>不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。</h3><h4 id="1-在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点"><a href="#1-在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点" class="headerlink" title="1.在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点"></a>1.在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点</h4><h4 id="2-在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点"><a href="#2-在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点" class="headerlink" title="2.在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点"></a>2.在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点</h4><hr><h3 id="下面是郝斌老师关于求二叉树时的视频截图"><a href="#下面是郝斌老师关于求二叉树时的视频截图" class="headerlink" title="下面是郝斌老师关于求二叉树时的视频截图:"></a>下面是郝斌老师关于求二叉树时的视频截图:</h3><h4 id="已知先序中序求后序"><a href="#已知先序中序求后序" class="headerlink" title="已知先序中序求后序"></a>已知先序中序求后序</h4><p><img src="/images/二叉树以及链式二叉树的常见操作/A4F5CF1B-9B16-4A66-9279-FDA3F90CAADA.png" alt="这里写图片描述"></p><p><img src="/images/二叉树以及链式二叉树的常见操作/70CFF251-8E00-4241-B367-837AD87B3860.png" alt="这里写图片描述"></p><h4 id="已知中序后序求先序"><a href="#已知中序后序求先序" class="headerlink" title="已知中序后序求先序"></a>已知中序后序求先序</h4><p><img src="/images/二叉树以及链式二叉树的常见操作/E1988CC1-1CC7-4ED9-A8FE-DA6A97DC6C9B.png" alt="这里写图片描述"></p><hr><hr><h2 id="三、链式二叉树的常见操作"><a href="#三、链式二叉树的常见操作" class="headerlink" title="三、链式二叉树的常见操作"></a>三、链式二叉树的常见操作</h2><h5 id="链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下"><a href="#链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下" class="headerlink" title="链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下:"></a>链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 该二叉树的树状图如下：</span></span><br><span class="line"><span class="comment">        A</span></span><br><span class="line"><span class="comment">      *   *</span></span><br><span class="line"><span class="comment">    B       C</span></span><br><span class="line"><span class="comment">           *</span></span><br><span class="line"><span class="comment">         D</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">              E</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//程序实现代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> * <span class="title">pLeft</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> * <span class="title">pRight</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="function">struct BTNode * <span class="title">createBTree</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//创建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>;<span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>;<span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>;<span class="comment">//后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> * <span class="title">pT</span> = <span class="title">createBTree</span>();</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"该二叉树的前序遍历为:\n"</span>);</span><br><span class="line">    PreTraverseBTree(pT);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n该二叉树的中序遍历为:\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n该二叉树的后序遍历为:\n"</span>);</span><br><span class="line">    PostTraverseBTree(pT);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct BTNode * <span class="title">createBTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BTNode * pA = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pB = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pC = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pD = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pE = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给树的每个节点添加数据</span></span><br><span class="line">    pA-&gt;data = <span class="string">'A'</span>;</span><br><span class="line">    pB-&gt;data = <span class="string">'B'</span>;</span><br><span class="line">    pC-&gt;data = <span class="string">'C'</span>;</span><br><span class="line">    pD-&gt;data = <span class="string">'D'</span>;</span><br><span class="line">    pE-&gt;data = <span class="string">'E'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给树的相关节点通过指针连接</span></span><br><span class="line">    pA-&gt;pLeft = pB;</span><br><span class="line">    pA-&gt;pRight = pC;</span><br><span class="line">    pB-&gt;pLeft = pB-&gt;pRight = <span class="literal">NULL</span>;</span><br><span class="line">    pC-&gt;pLeft = pD;</span><br><span class="line">    pC-&gt;pRight = <span class="literal">NULL</span>;</span><br><span class="line">    pD-&gt;pLeft = <span class="literal">NULL</span>;</span><br><span class="line">    pD-&gt;pRight = pE;</span><br><span class="line">    pE-&gt;pLeft = pE-&gt;pRight = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pT != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,pT-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pLeft != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PreTraverseBTree(pT-&gt;pLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pRight != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PreTraverseBTree(pT-&gt;pRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pT != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pLeft != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            InTraverseBTree(pT-&gt;pLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,pT-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pRight != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            InTraverseBTree(pT-&gt;pRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pT != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pLeft != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PostTraverseBTree(pT-&gt;pLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pRight != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PostTraverseBTree(pT-&gt;pRight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,pT-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后对二叉树的一些常见的问题以及代码进行的总结
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>汉诺塔递归问题</title>
    <link href="http://yoursite.com/2018/04/23/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/23/汉诺塔递归问题/</id>
    <published>2018-04-23T12:10:53.000Z</published>
    <updated>2018-04-23T12:12:02.533Z</updated>
    
    <content type="html"><![CDATA[<h6 id="汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题"><a href="#汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题" class="headerlink" title="汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题"></a>汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hannuota</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span><span class="comment">//指将A上的盘子借助B移到C</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     如果是1个盘子</span></span><br><span class="line"><span class="comment">     直接将A柱子上的盘子从A移到C</span></span><br><span class="line"><span class="comment">     否则</span></span><br><span class="line"><span class="comment">     先将A柱子上的n-1个盘子借助C移到B</span></span><br><span class="line"><span class="comment">     直接将A柱子上的盘子从A移到C</span></span><br><span class="line"><span class="comment">     最后将B柱子上的n-1个盘子借助A移到C</span></span><br><span class="line"><span class="comment">     最上面盘子为1最下面为n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"将编号为%d的盘子直接从%c柱子移到%c柱子\n"</span>, n, A, C);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hannuota(n<span class="number">-1</span>, A, C, B);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"将编号为%d的盘子直接从%c柱子移到%c柱子\n"</span>, n, A, C);</span><br><span class="line">        hannuota(n<span class="number">-1</span>, B, A, C);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要移动盘子的个数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);   </span><br><span class="line">    hannuota(n, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后对汉诺塔问题的代码记录
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="汉诺塔问题" scheme="http://yoursite.com/tags/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>循环队列的常见操作</title>
    <link href="http://yoursite.com/2018/04/22/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/22/循环队列的常见操作/</id>
    <published>2018-04-22T11:26:07.000Z</published>
    <updated>2018-04-23T12:10:09.336Z</updated>
    
    <content type="html"><![CDATA[<h6 id="与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear-1）-len-front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作"><a href="#与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear-1）-len-front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作" class="headerlink" title="与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear+1）% len = front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作"></a>与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear+1）% len = front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> * pBase;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Queue *)</span></span>;<span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">en_queue</span><span class="params">(Queue *,<span class="keyword">int</span>)</span></span>;<span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_queue</span><span class="params">(Queue *)</span></span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out_queue</span><span class="params">(Queue *)</span></span>;<span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(Queue *)</span></span>;<span class="comment">//释放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *)</span></span>;<span class="comment">//重置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Queue Q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入您需要的循环队列的长度:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(Q.len));</span><br><span class="line">    init(&amp;Q);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">1</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">2</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">3</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">4</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">5</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">6</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">7</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">8</span>);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    destroy(&amp;Q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p"</span>,Q.pBase);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Queue* pQ)</span></span>&#123;</span><br><span class="line">    pQ-&gt;pBase = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(pQ-&gt;len));</span><br><span class="line">    pQ-&gt;front = <span class="number">0</span>;</span><br><span class="line">    pQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">en_queue</span><span class="params">(Queue* pQ,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((pQ-&gt;rear+<span class="number">1</span>)%pQ-&gt;len == pQ-&gt;front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列已满!%d入队失败\n"</span>,val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pQ-&gt;pBase[pQ-&gt;rear] = val;</span><br><span class="line">        pQ-&gt;rear = (pQ-&gt;rear+<span class="number">1</span>) % pQ-&gt;len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_queue</span><span class="params">(Queue* pQ)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ-&gt;rear == pQ-&gt;front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = pQ-&gt;front;</span><br><span class="line">        <span class="keyword">while</span> (i != pQ-&gt;rear) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,pQ-&gt;pBase[i]);</span><br><span class="line">            i = (i+<span class="number">1</span>) % pQ-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out_queue</span><span class="params">(Queue *pQ)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ-&gt;rear == pQ-&gt;front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = pQ-&gt;pBase[pQ-&gt;front];</span><br><span class="line">        pQ-&gt;front = (pQ-&gt;front+<span class="number">1</span>) % pQ-&gt;len;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出队的元素值为:%d\n"</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(Queue *pQ)</span></span>&#123;</span><br><span class="line">    pQ-&gt;len=<span class="number">-1</span>;<span class="comment">//因为pQ不是动态分配的，所以不要咬释放变量pQ的空间</span></span><br><span class="line">    <span class="built_in">free</span>(pQ-&gt;pBase);<span class="comment">//释放动态分配的数组的空间</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *pQ)</span></span>&#123;</span><br><span class="line">    pQ-&gt;len = <span class="number">0</span>;</span><br><span class="line">    pQ-&gt;front = <span class="number">0</span>;</span><br><span class="line">    pQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现"><a href="#注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现" class="headerlink" title="注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现"></a>注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现</h6>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后对循环常见操作的代码的总结
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="循环队列" scheme="http://yoursite.com/tags/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>栈的常见操作</title>
    <link href="http://yoursite.com/2018/04/20/%E6%A0%88%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/20/栈的常见操作/</id>
    <published>2018-04-20T12:43:03.000Z</published>
    <updated>2018-04-23T12:09:59.487Z</updated>
    
    <content type="html"><![CDATA[<h5 id="今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。"><a href="#今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。" class="headerlink" title="今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。"></a>今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125; Node,* PNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span><span class="comment">//创建两个指针分别指向栈顶和栈底</span></span><br><span class="line">    PNode pTop;</span><br><span class="line">    PNode pBottom;<span class="comment">//总是指向栈的头节点</span></span><br><span class="line">&#125; Stack,* PStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PStack)</span></span>;<span class="comment">//初始化一个栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PStack,<span class="keyword">int</span>)</span></span>;<span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PStack)</span></span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PStack,<span class="keyword">int</span>*)</span></span>;<span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PStack)</span></span>;<span class="comment">//重置栈中的数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    init(&amp;S);</span><br><span class="line">    push(&amp;S,<span class="number">1</span>);</span><br><span class="line">    push(&amp;S,<span class="number">2</span>);</span><br><span class="line">    push(&amp;S,<span class="number">3</span>);</span><br><span class="line">    push(&amp;S,<span class="number">4</span>);</span><br><span class="line">    push(&amp;S,<span class="number">5</span>);</span><br><span class="line">    push(&amp;S,<span class="number">6</span>);</span><br><span class="line">    traverse(&amp;S);</span><br><span class="line">    pop(&amp;S,&amp;val);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pop的值为%d\n"</span>,val);</span><br><span class="line">    traverse(&amp;S);</span><br><span class="line">    clear(&amp;S);</span><br><span class="line">    traverse(&amp;S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PStack pS)</span></span>&#123;</span><br><span class="line">    pS-&gt;pTop = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(pS == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pS-&gt;pBottom = pS-&gt;pTop;</span><br><span class="line">        pS-&gt;pBottom-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PStack pS,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;data  = val;</span><br><span class="line">    pNew-&gt;pNext = pS-&gt;pTop;</span><br><span class="line">    pS-&gt;pTop = pNew;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PStack pS)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop == pS-&gt;pBottom)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode p = pS-&gt;pTop;</span><br><span class="line">        <span class="keyword">while</span> (p != pS-&gt;pBottom) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">            p = p-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PStack pS,<span class="keyword">int</span>* val)</span></span>&#123;<span class="comment">//这里的int *val是为了让用户知道pop的数据是什么</span></span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop == pS-&gt;pBottom)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        *val = pS-&gt;pTop-&gt;data;</span><br><span class="line">        PNode p = pS-&gt;pTop;</span><br><span class="line">        pS-&gt;pTop = pS-&gt;pTop-&gt;pNext;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PStack pS)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop == pS-&gt;pBottom)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode p = pS-&gt;pTop;</span><br><span class="line">        PNode q;</span><br><span class="line">        <span class="keyword">while</span> (p != pS-&gt;pBottom) &#123;</span><br><span class="line">            q = p;</span><br><span class="line">            p = p-&gt;pNext;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            q = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pS-&gt;pTop = pS-&gt;pBottom;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"已clear成功!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢-°ω°-ﾉ”"><a href="#注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢-°ω°-ﾉ”" class="headerlink" title="注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢(°ω°)ﾉ”"></a>注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢(°ω°)ﾉ”</h5>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构的课程后对栈常见操作的代码的总结
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>链表的常见操作</title>
    <link href="http://yoursite.com/2018/04/19/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/19/链表的常见操作/</id>
    <published>2018-04-19T13:16:35.000Z</published>
    <updated>2018-04-23T12:09:47.931Z</updated>
    
    <content type="html"><![CDATA[<h6 id="这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下："><a href="#这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下：" class="headerlink" title="这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下："></a>这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125; Node,*PNode;</span><br><span class="line"><span class="function">PNode <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//创建链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNode)</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_empty</span><span class="params">(PNode)</span></span>;<span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNode)</span></span>;<span class="comment">//判断链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_list</span><span class="params">(PNode,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;<span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(PNode,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;<span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNode)</span></span>;<span class="comment">//对链表进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PNode pHead = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    pHead = create_list();</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表的长度为%d\n"</span>,len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要插入的位置以及数值:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;pos,&amp;val);</span><br><span class="line">    insert_list(pHead, pos, &amp;val);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要删除的位置!\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos);</span><br><span class="line">    delete_list(pHead, pos, &amp;val);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    sort_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"排序后的链表数据如下:"</span>);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PNode <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    </span><br><span class="line">    PNode pHead = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(pHead == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PNode pTail = pHead;<span class="comment">//这里是创建一个指向尾节点的变量</span></span><br><span class="line">    pTail-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要生成的链表的节点数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个节点的值:\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</span><br><span class="line">        </span><br><span class="line">        PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pNew-&gt;data = val;</span><br><span class="line">        pTail-&gt;pNext = pNew;</span><br><span class="line">        pNew-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">        pTail = pNew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pHead;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    PNode p = pHead-&gt;pNext;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表中的数据为:"</span>);</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_empty</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pHead-&gt;pNext == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该链表为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该链表不为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    PNode p = pHead-&gt;pNext;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_list</span><span class="params">(PNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span>* val)</span></span>&#123;</span><br><span class="line">    PNode p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; i&lt;pos<span class="number">-1</span>) &#123;<span class="comment">//使指针最后指向需要插入的节点的前一个节点</span></span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;pos<span class="number">-1</span> || p==<span class="literal">NULL</span>)&#123;<span class="comment">//当该节点为空，则说明该节点为尾节点的下一个节点，即输入不合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入不正确!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"动态分配内存失败!\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pNew-&gt;data = *val;</span><br><span class="line">            pNew-&gt; pNext = p-&gt;pNext;</span><br><span class="line">            p-&gt;pNext = pNew;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(PNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span>* val)</span></span>&#123;</span><br><span class="line">    PNode p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;pNext != <span class="literal">NULL</span> &amp;&amp; i&lt;pos<span class="number">-1</span>) &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;pos<span class="number">-1</span> || p-&gt;pNext == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入不正确!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode q = p-&gt;pNext;</span><br><span class="line">        *val = p-&gt;pNext-&gt;data;</span><br><span class="line">        p-&gt;pNext = p-&gt;pNext-&gt;pNext;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;<span class="comment">//将q中的野指针赋值为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除成功，删除的节点值为%d"</span>,*val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNode pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    PNode p, q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>,p=pHead-&gt;pNext; i&lt;len<span class="number">-1</span>; i++,p=p-&gt;pNext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>,q=p-&gt;pNext; j&lt;len; j++,q=q-&gt;pNext)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)  <span class="comment">//类似于数组中的:  a[i] &gt; a[j]</span></span><br><span class="line">            &#123;</span><br><span class="line">                t = p-&gt;data;<span class="comment">//类似于数组中的:  t = a[i];</span></span><br><span class="line">                p-&gt;data = q-&gt;data; <span class="comment">//类似于数组中的:  a[i] = a[j];</span></span><br><span class="line">                q-&gt;data = t; <span class="comment">//类似于数组中的:  a[j] = t;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。"><a href="#注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。" class="headerlink" title="注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。"></a>注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。</h6>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后对链表常见操作的代码的总结
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何使用github+hexo搭建一个博客</title>
    <link href="http://yoursite.com/2018/04/12/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/04/12/如何使用github+hexo搭建一个博客/</id>
    <published>2018-04-12T12:14:06.000Z</published>
    <updated>2018-10-19T13:34:45.731Z</updated>
    
    <content type="html"><![CDATA[<p>本文章是查阅了一下四个博客文章后所做的总结：<br><a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a><br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a><br><a href="https://segmentfault.com/a/1190000009009697#articleHeader15" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009009697#articleHeader15</a><br><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">https://blog.csdn.net/qq_33699981/article/details/72716951</a></p><hr><h4 id="整体项目需要使用git，node-js等，以及写博客时需要使用markdown语法，最好在部署前对这些有些了解，当然就算不了解也并不影响整个部署"><a href="#整体项目需要使用git，node-js等，以及写博客时需要使用markdown语法，最好在部署前对这些有些了解，当然就算不了解也并不影响整个部署" class="headerlink" title="整体项目需要使用git，node.js等，以及写博客时需要使用markdown语法，最好在部署前对这些有些了解，当然就算不了解也并不影响整个部署"></a>整体项目需要使用git，node.js等，以及写博客时需要使用markdown语法，最好在部署前对这些有些了解，当然就算不了解也并不影响整个部署</h4><hr><h3 id="一、配置环境以及准备"><a href="#一、配置环境以及准备" class="headerlink" title="一、配置环境以及准备"></a>一、配置环境以及准备</h3><h4 id="1-安装并配置node-js以及git"><a href="#1-安装并配置node-js以及git" class="headerlink" title="1.安装并配置node.js以及git"></a>1.安装并配置node.js以及git</h4><h4 id="2-在github中新建一个项目（记得点击添加README，项目命最好是“github用户名-github-io”）"><a href="#2-在github中新建一个项目（记得点击添加README，项目命最好是“github用户名-github-io”）" class="headerlink" title="2.在github中新建一个项目（记得点击添加README，项目命最好是“github用户名.github.io”）"></a>2.在github中新建一个项目（记得点击添加README，项目命最好是“github用户名.github.io”）</h4><h4 id="3-在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。"><a href="#3-在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。" class="headerlink" title="3.在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。"></a>3.在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。</h4><h4 id="4-在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo"><a href="#4-在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo" class="headerlink" title="4.在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo"></a>4.在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><h4 id="5-使用下面的命令查看是否安装成功"><a href="#5-使用下面的命令查看是否安装成功" class="headerlink" title="5.使用下面的命令查看是否安装成功"></a>5.使用下面的命令查看是否安装成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h4 id="6-输入下面的命令初始化文件夹"><a href="#6-输入下面的命令初始化文件夹" class="headerlink" title="6.输入下面的命令初始化文件夹"></a>6.输入下面的命令初始化文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4 id="7-输入下面的命令安装所需要的组件"><a href="#7-输入下面的命令安装所需要的组件" class="headerlink" title="7.输入下面的命令安装所需要的组件"></a>7.输入下面的命令安装所需要的组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="8-输入下面的命令首次体验hexo"><a href="#8-输入下面的命令首次体验hexo" class="headerlink" title="8.输入下面的命令首次体验hexo"></a>8.输入下面的命令首次体验hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="9-输入下面的命令开启服务器（若端口被占用则使用-hexo-server-p-端口号-）来改变端口号"><a href="#9-输入下面的命令开启服务器（若端口被占用则使用-hexo-server-p-端口号-）来改变端口号" class="headerlink" title="9.输入下面的命令开启服务器（若端口被占用则使用 hexo server -p 端口号 ）来改变端口号"></a>9.输入下面的命令开启服务器（若端口被占用则使用 <code>hexo server -p 端口号</code> ）来改变端口号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/images/如何使用github+hexo搭建一个博客/987D31AE-BF71-40A9-9E56-1D2D0550A217.png" alt="这里写图片描述"></p><h5 id="出现该页面则说明成功了"><a href="#出现该页面则说明成功了" class="headerlink" title="出现该页面则说明成功了"></a>出现该页面则说明成功了</h5><h4 id="10-将Hexo与github-page联系起来"><a href="#10-将Hexo与github-page联系起来" class="headerlink" title="10.将Hexo与github page联系起来"></a>10.将Hexo与github page联系起来</h4><h5 id="（1）配置Git个人信息-如果你之前已经配置好git个人信息，请跳过这一个步骤"><a href="#（1）配置Git个人信息-如果你之前已经配置好git个人信息，请跳过这一个步骤" class="headerlink" title="（1）配置Git个人信息(如果你之前已经配置好git个人信息，请跳过这一个步骤)"></a>（1）配置Git个人信息(如果你之前已经配置好git个人信息，请跳过这一个步骤)</h5><h5 id="a-设置Git的user-name和email：-如果是第一次的话）"><a href="#a-设置Git的user-name和email：-如果是第一次的话）" class="headerlink" title="a.设置Git的user name和email：(如果是第一次的话）"></a>a.设置Git的user name和email：(如果是第一次的话）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your_name&quot;</span><br><span class="line">git config --global user.email &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h6 id="b-生成密钥"><a href="#b-生成密钥" class="headerlink" title="b.生成密钥"></a>b.生成密钥</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h4 id="11-配置Deployment"><a href="#11-配置Deployment" class="headerlink" title="11.配置Deployment"></a>11.配置Deployment</h4><h5 id="在-config-yml文件中，找到Deployment，然后按照如下修改："><a href="#在-config-yml文件中，找到Deployment，然后按照如下修改：" class="headerlink" title="在_config.yml文件中，找到Deployment，然后按照如下修改："></a>在_config.yml文件中，找到Deployment，然后按照如下修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="二、写博客，发布文章"><a href="#二、写博客，发布文章" class="headerlink" title="二、写博客，发布文章"></a>二、写博客，发布文章</h3><h4 id="1-使用下面的命令新建一个博文（新建后在hexo-source-posts中将会看到你新建的-md后缀的文件）"><a href="#1-使用下面的命令新建一个博文（新建后在hexo-source-posts中将会看到你新建的-md后缀的文件）" class="headerlink" title="1.使用下面的命令新建一个博文（新建后在hexo\source\ _posts中将会看到你新建的.md后缀的文件）"></a>1.使用下面的命令新建一个博文（新建后在hexo\source\ _posts中将会看到你新建的.md后缀的文件）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;article title&quot;</span><br></pre></td></tr></table></figure><h4 id="2-使用markdown编辑器打开并进行编辑文章"><a href="#2-使用markdown编辑器打开并进行编辑文章" class="headerlink" title="2.使用markdown编辑器打开并进行编辑文章"></a>2.使用markdown编辑器打开并进行编辑文章</h4><h4 id="3-使用下面的命令进行生成和部署，成功后便可在https-yourName-github-io访问您的博文"><a href="#3-使用下面的命令进行生成和部署，成功后便可在https-yourName-github-io访问您的博文" class="headerlink" title="3.使用下面的命令进行生成和部署，成功后便可在https://yourName.github.io访问您的博文"></a>3.使用下面的命令进行生成和部署，成功后便可在<a href="https://yourName.github.io访问您的博文" target="_blank" rel="noopener">https://yourName.github.io访问您的博文</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   // 生成</span><br><span class="line">hexo d   // 部署</span><br></pre></td></tr></table></figure><h5 id="注：若提示-deloyer-not-found-git-则说明缺少一个扩展，运行-npm-install-save-hexo-deployer-git-命令即可解决"><a href="#注：若提示-deloyer-not-found-git-则说明缺少一个扩展，运行-npm-install-save-hexo-deployer-git-命令即可解决" class="headerlink" title="注：若提示 deloyer not found:git 则说明缺少一个扩展，运行 npm install --save hexo-deployer-git 命令即可解决"></a>注：若提示 <code>deloyer not found:git</code> 则说明缺少一个扩展，运行 <code>npm install --save hexo-deployer-git</code> 命令即可解决</h5><h3 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h3><p>hexo提供了许许多多的主题，我们可以轻松的修改一个自己喜欢的主题，具体方法如下：</p><h4 id="1-在-Hexo-中有两份主要的配置文件，其名称都是-config-yml。-其中，一份位于站点根目录下，主要包含-Hexo-本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。-为了描述方便，在以下说明中，将前者称为-站点配置文件，-后者称为-主题配置文件。在文件夹的themes中使用-git-clone-命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用"><a href="#1-在-Hexo-中有两份主要的配置文件，其名称都是-config-yml。-其中，一份位于站点根目录下，主要包含-Hexo-本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。-为了描述方便，在以下说明中，将前者称为-站点配置文件，-后者称为-主题配置文件。在文件夹的themes中使用-git-clone-命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用" class="headerlink" title="1.在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。在文件夹的themes中使用 git clone 命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用"></a>1.在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 <em>站点配置文件</em>， 后者称为 <em>主题配置文件</em>。在文件夹的themes中使用 <code>git clone</code> 命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site #进入你的hexo项目的根文件夹</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h4 id="2-启用主题-与所有-Hexo-主题启用的模式一样。-当-克隆-下载-完成后，打开-站点配置文件，-找到-theme-字段，并将其值更改为-next。-启用-NexT-主题"><a href="#2-启用主题-与所有-Hexo-主题启用的模式一样。-当-克隆-下载-完成后，打开-站点配置文件，-找到-theme-字段，并将其值更改为-next。-启用-NexT-主题" class="headerlink" title="2.启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题"></a>2.启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，检查站点是否正确运行。 当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。选择 Scheme Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line">Mist - Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">Pisces - 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面</span><br></pre></td></tr></table></figure><p>注释 # 即可。 选择 Pisce Scheme</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><h4 id="3-next主题的hexo博客个性化设置"><a href="#3-next主题的hexo博客个性化设置" class="headerlink" title="3.next主题的hexo博客个性化设置"></a>3.next主题的hexo博客个性化设置</h4><p>博客的可个性化设置较多，比如背景设置，博客头，作者，简介，以及插入一下第三方的插件等。在此我就不做赘述，最后我在当时部署时总结了这两个不错的博客教程<br><a href="https://segmentfault.com/a/1190000009009697#articleHeader15" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009009697#articleHeader15</a><br><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">https://blog.csdn.net/qq_33699981/article/details/72716951</a></p><h4 id="4-设置语言-编辑站点配置文件，-将-language-设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下："><a href="#4-设置语言-编辑站点配置文件，-将-language-设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：" class="headerlink" title="4.设置语言 编辑站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下："></a>4.<strong>设置语言</strong> 编辑站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">语言</th><th style="text-align:center">代码</th><th style="text-align:center">设定实例</th></tr></thead><tbody><tr><td style="text-align:center">English</td><td style="text-align:center">en</td><td style="text-align:center">language: en</td></tr><tr><td style="text-align:center">简体中文</td><td style="text-align:center">zh-Hans</td><td style="text-align:center">language:zh-Hans</td></tr><tr><td style="text-align:center">Français</td><td style="text-align:center">fr-FR</td><td style="text-align:center">language:fr-FR</td></tr><tr><td style="text-align:center">Português</td><td style="text-align:center">pt</td><td style="text-align:center">language:pt</td></tr><tr><td style="text-align:center">繁體中文</td><td style="text-align:center">zh-hk或者zh-tw</td><td style="text-align:center">language:zh-hk</td></tr><tr><td style="text-align:center">Русский язык</td><td style="text-align:center">ru</td><td style="text-align:center">language:ru</td></tr><tr><td style="text-align:center">Deutsch</td><td style="text-align:center">de</td><td style="text-align:center">language:de</td></tr><tr><td style="text-align:center">日本語</td><td style="text-align:center">ja</td><td style="text-align:center">language:ja</td></tr><tr><td style="text-align:center">Indonesian</td><td style="text-align:center">id</td><td style="text-align:center">language:id</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      本文是我在网上查找了部分搭建博客的教程，以及使用github+hexo搭建博客时的流程以及遇到的一些问题的总结
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>在搭建报名系统时遇到的django报错</title>
    <link href="http://yoursite.com/2018/03/13/%E5%9C%A8%E6%90%AD%E5%BB%BA%E6%8A%A5%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84django%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2018/03/13/在搭建报名系统时遇到的django报错/</id>
    <published>2018-03-13T07:51:14.000Z</published>
    <updated>2018-04-24T12:31:37.301Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="报错1："><a href="#报错1：" class="headerlink" title="报错1："></a>报错1：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The view sign_up.views.new_user didn<span class="string">'t return an HttpResponse object. It returned None instead.</span></span><br></pre></td></tr></table></figure><h4 id="views-py代码"><a href="#views-py代码" class="headerlink" title="views.py代码"></a>views.py代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = UserInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = UserInfoForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">        context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'new_user.html'</span>,context)</span><br></pre></td></tr></table></figure><h4 id="models-py代码"><a href="#models-py代码" class="headerlink" title="models.py代码"></a>models.py代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User_info</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    student_id = models.CharField(max_length=<span class="number">9</span>)</span><br><span class="line">    college = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    date_added = models.DateField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><h4 id="new-user-html代码"><a href="#new-user-html代码" class="headerlink" title="new_user.html代码"></a>new_user.html代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'sign_up/index.html' %&#125;</span><br><span class="line">&#123;% block header %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>请填写信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'sign_up:new_user' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% form.as_p %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Add user<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>错误原因：当时报错时查询各种资料以及函数都没有解决。。。最后发现是由于views.py文件中的没有返回值，return错位导致。</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = UserInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = UserInfoForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'new_user.html'</span>,context)</span><br></pre></td></tr></table></figure><hr><h3 id="报错2："><a href="#报错2：" class="headerlink" title="报错2："></a>报错2：</h3><p><img src="/images/在搭建报名系统时遇到的django报错/C236720D-BD99-4C41-8985-E1BFFB559943.png" alt="这里写图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invalid block tag on line 8: 'form.as_p', expected 'endblock'. Did you forget to register or load this tag?</span><br></pre></td></tr></table></figure><p>错误原因：前端模版中form.as_p应该放在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125;</span><br><span class="line">```中，而不是`&#123;% %&#125;`中</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">### 报错3：</span><br><span class="line">![这里写图片描述](/images/在搭建报名系统时遇到的django报错/2B46DB12-FF96-4472-BB3D-4C5BFC6059C4.png)</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">no such table: sign_up_actor_info</span><br></pre></td></tr></table></figure></p><p>错误原因：应当使用<code>python manage.py makemigrations</code>以及<code>python manage.py migrate</code>来迁移数据库以及修改数据库即可</p><hr><h3 id="报错4："><a href="#报错4：" class="headerlink" title="报错4："></a>报错4：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Specifying a namespace <span class="keyword">in</span> include() without providing an app_name</span><br></pre></td></tr></table></figure><p>错误原因：python3 Django 环境下，如果你遇到namespace没有注册以及在根目录下urls.py中的include方法的第二个参数namespace添加之后就出错的问题。请在[app_name]目录下的urls.py中的urlpatterns前面加上app_name=’[app_name]’， [app_name]代表你的应用的名称。</p><hr><h3 id="报错5："><a href="#报错5：" class="headerlink" title="报错5："></a>报错5：</h3><p>错误原因：将根目录下的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^users/$&apos;,include(&apos;users.urls&apos;,namespace=&apos;users&apos;)),</span><br></pre></td></tr></table></figure></p><p>中的<code>$</code>删除</p><hr><h3 id="报错6："><a href="#报错6：" class="headerlink" title="报错6："></a>报错6：</h3><p><img src="/images/在搭建报名系统时遇到的django报错/BA75BDEF-0240-42E4-A688-72E4EB0ADD6F.png" alt="这里写图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_actor</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = ActorInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = ActorInfoForm(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            new_actor = form.save()</span><br><span class="line">            new_actor.owner = request.user</span><br><span class="line">            new_actor.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'sign_up/new_actor.html'</span>, context)</span><br></pre></td></tr></table></figure><p>错误原因：在第一次form.save时应该是用参数commit=False，使其不上传到数据库，因为后面还要对其信息进行添加</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_actor</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = ActorInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = ActorInfoForm(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            new_actor = form.save(commit=<span class="keyword">False</span>) <span class="comment">#commit=False指不要提交到数据库</span></span><br><span class="line">            new_actor.owner = request.user</span><br><span class="line">            new_actor.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'sign_up/new_actor.html'</span>, context)</span><br></pre></td></tr></table></figure><hr><h3 id="报错7："><a href="#报错7：" class="headerlink" title="报错7："></a>报错7：</h3><p><img src="/images/在搭建报名系统时遇到的django报错/3846625E-4AFB-4CB8-92C4-5FB27D53126F.png" alt="这里写图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'QuerySet'</span> object has no attribute <span class="string">'owner'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.filter(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>,args=&#123;<span class="string">'actor_id'</span>:actor_id&#125;))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure><p>错误原因：应该使用get而不是filter</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.get(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>,args=[actor_id]))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure><hr><h3 id="报错8："><a href="#报错8：" class="headerlink" title="报错8："></a>报错8：</h3><p><img src="/images/在搭建报名系统时遇到的django报错/B9C6A242-D045-4DF3-983D-F1237B8D44CD.png" alt="这里写图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Reverse <span class="keyword">for</span> <span class="string">'actor'</span> <span class="keyword">with</span> no arguments <span class="keyword">not</span> found. <span class="number">1</span> pattern(s) tried: [<span class="string">'actors/(?P&lt;actor_id&gt;\\d+)/$'</span>]</span><br><span class="line">Request Method:POST</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.get(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>),args=[actor_id])</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure><p>错误原因：args为reverse函数的参数，而不是HttpResponseRedirect的参数</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.get(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>,args=[actor_id]))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文是对在搭建报名系统时遇到的django报错的一些问题的总结
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>flask使用orm连接数据库</title>
    <link href="http://yoursite.com/2018/02/12/flask%E4%BD%BF%E7%94%A8orm%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/02/12/flask使用orm连接数据库/</id>
    <published>2018-02-12T12:14:40.000Z</published>
    <updated>2018-04-19T16:17:15.436Z</updated>
    
    <content type="html"><![CDATA[<p>注：使用前请安装flask_sqlalchemy包，由于python-mysql不适用于python3.6，所以我们使用pymysql进行替代</p><hr><h1 id="1-flask的app文件中输入以下代码"><a href="#1-flask的app文件中输入以下代码" class="headerlink" title="1.flask的app文件中输入以下代码"></a>1.flask的app文件中输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(文件名为：learn_flask_mysql_orm.py)</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">"SQLALCHEMY_DATABASE_URI"</span>]=<span class="string">"mysql+pymysql://root:@127.0.0.1:3306/learn_flask_mysql"</span></span><br><span class="line"><span class="comment">#注：请勿忘记添加'+pymysql'，否则将会出现没有安装mysqldb的报错</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><hr><h1 id="2-在flask文件夹中新建一个models-py文件，并输入以下代码"><a href="#2-在flask文件夹中新建一个models-py文件，并输入以下代码" class="headerlink" title="2.在flask文件夹中新建一个models.py文件，并输入以下代码"></a>2.在flask文件夹中新建一个models.py文件，并输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> learn_flask_mysql_orm <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line">    user_id = db.Column(db.INT,primary_key=<span class="keyword">True</span>)</span><br><span class="line">    user_name = db.Column(db.TEXT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,user_id,user_name)</span>:</span></span><br><span class="line">        self.user_id = user_id</span><br><span class="line">        self.user_name = user_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id:&#123;&#125;    name:&#123;&#125;"</span>.format(self.user_id,self.user_name)</span><br></pre></td></tr></table></figure><hr><h1 id="3-在flask中新建一个manage-py文件，输入以下代码"><a href="#3-在flask中新建一个manage-py文件，输入以下代码" class="headerlink" title="3.在flask中新建一个manage.py文件，输入以下代码"></a>3.在flask中新建一个manage.py文件，输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> learn_flask_mysql_orm <span class="keyword">import</span> app,db</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">11</span>,<span class="string">'zhangjia11'</span>)</span><br><span class="line">    db.session.add(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query.all()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p>之后使用<code>python manage.py save</code>即可保存数据，使用<code>python manage.py qurey_all</code>即可查询数据</p>]]></content>
    
    <summary type="html">
    
      本文是对flask使用orm连接数据库的总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>flask连接mysql数据库</title>
    <link href="http://yoursite.com/2018/02/12/flask%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/02/12/flask连接mysql数据库/</id>
    <published>2018-02-12T12:05:45.000Z</published>
    <updated>2018-04-19T16:15:27.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在flask所在文件夹中新建一个models-py文件，输入以下代码"><a href="#在flask所在文件夹中新建一个models-py文件，输入以下代码" class="headerlink" title="在flask所在文件夹中新建一个models.py文件，输入以下代码"></a>在flask所在文件夹中新建一个models.py文件，输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line">    host = <span class="string">"127.0.0.1"</span></span><br><span class="line">    port = <span class="number">3306</span>     <span class="comment">#注：此处应该使用数字而不是字符串</span></span><br><span class="line">    db = <span class="string">'learn_flask_mysql'</span></span><br><span class="line">    user = <span class="string">'root'</span></span><br><span class="line">    password = <span class="string">''</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=host,</span><br><span class="line">        user=user,</span><br><span class="line">        password=password,</span><br><span class="line">        port=port,</span><br><span class="line">        db=db,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,user_id,user_name)</span>:</span></span><br><span class="line">        self.user_id = user_id</span><br><span class="line">        self.user_name = user_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = get_conn()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql = <span class="string">"INSERT INTO user(user_id, user_name) VALUES (%s,%s)"</span></span><br><span class="line">        cursor.execute(sql,(self.user_id,self.user_name))</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">        conn = get_conn()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql = <span class="string">"SELECT * from user"</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        rows = cursor.fetchall()</span><br><span class="line">        users = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            user = User(row[<span class="number">0</span>],row[<span class="number">1</span>])</span><br><span class="line">            users.append(user)</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> users</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id:&#123;&#125;  name:&#123;&#125;"</span>.format(self.user_id,self.user_name)</span><br></pre></td></tr></table></figure><h1 id="2-在flask新建文件夹中新建一个manage-py，并输入以下代码"><a href="#2-在flask新建文件夹中新建一个manage-py，并输入以下代码" class="headerlink" title="2.在flask新建文件夹中新建一个manage.py，并输入以下代码"></a>2.在flask新建文件夹中新建一个manage.py，并输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_mysql <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'csdn'</span>)</span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query_all()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p>之后使用<code>python manage.py save</code>即可保存数据，使用<code>python manage.py qurey_all</code>即可查询数据</p>]]></content>
    
    <summary type="html">
    
      本文是对使用flask连接mysql数据库的总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Flask扩展flask-script文档中文翻译</title>
    <link href="http://yoursite.com/2018/02/12/Flask%E6%89%A9%E5%B1%95flask-script%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/"/>
    <id>http://yoursite.com/2018/02/12/Flask扩展flask-script文档中文翻译/</id>
    <published>2018-02-12T08:40:29.000Z</published>
    <updated>2018-04-19T16:12:53.049Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自<a href="https://my.oschina.net/lijsf/blog/158828" target="_blank" rel="noopener">https://my.oschina.net/lijsf/blog/158828</a></p><hr><hr><h1 id="Flask扩展flask-script文档中文翻译"><a href="#Flask扩展flask-script文档中文翻译" class="headerlink" title="Flask扩展flask-script文档中文翻译"></a>Flask扩展flask-script文档中文翻译</h1><hr><h5 id="Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的-Python-shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。"><a href="#Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的-Python-shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。" class="headerlink" title="Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的 Python shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。"></a>Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的 Python shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。</h5><h5 id="Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。"><a href="#Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。" class="headerlink" title="Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。"></a>Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># manage.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><h5 id="只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们："><a href="#只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们：" class="headerlink" title="只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们："></a>只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们：</h5><blockquote><p>python manage.py hello</p></blockquote><p>Flask-Script的源代码和bug追踪见 <a href="https://github.com/smurfix/flask-script" target="_blank" rel="noopener">GitHub</a></p><hr><hr><h1 id="安装Flask-Script"><a href="#安装Flask-Script" class="headerlink" title="安装Flask-Script"></a>安装Flask-Script</h1><hr><h5 id="可以使用pip或者easy-install安装："><a href="#可以使用pip或者easy-install安装：" class="headerlink" title="可以使用pip或者easy_install安装："></a>可以使用pip或者easy_install安装：</h5><blockquote><p>pip install Flask-Script</p></blockquote><h5 id="或者下载最新开发版本："><a href="#或者下载最新开发版本：" class="headerlink" title="或者下载最新开发版本："></a>或者下载最新开发版本：</h5><blockquote><p>git clone <a href="https://github.com/techniq/flask-script.git" target="_blank" rel="noopener">https://github.com/techniq/flask-script.git</a><br>cd flask-script<br>python setup.py develop</p></blockquote><h5 id="如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下"><a href="#如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下" class="headerlink" title="如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下"></a>如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下</h5><hr><hr><h1 id="创建并且运行命令"><a href="#创建并且运行命令" class="headerlink" title="创建并且运行命令"></a>创建并且运行命令</h1><hr><h5 id="首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage-py。"><a href="#首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage-py。" class="headerlink" title="首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage.py。"></a>首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage.py。</h5><h5 id="无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。"><a href="#无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。" class="headerlink" title="无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。"></a>无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。</h5><h5 id="在你的manage-py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行-情况"><a href="#在你的manage-py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行-情况" class="headerlink" title="在你的manage.py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行 情况:"></a>在你的manage.py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行 情况:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># configure your app</span></span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><h5 id="调用-manager-run-将启动Manger实例接收命令行中的命令。"><a href="#调用-manager-run-将启动Manger实例接收命令行中的命令。" class="headerlink" title="调用 manager.run()将启动Manger实例接收命令行中的命令。"></a>调用 manager.run()将启动Manger实例接收命令行中的命令。</h5><h5 id="Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。"><a href="#Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。" class="headerlink" title="Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。"></a>Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。</h5><h5 id="其次，创建并且加入命令。有三种方法可创建命令："><a href="#其次，创建并且加入命令。有三种方法可创建命令：" class="headerlink" title="其次，创建并且加入命令。有三种方法可创建命令："></a>其次，创建并且加入命令。有三种方法可创建命令：</h5><h5 id="创建Command的子类"><a href="#创建Command的子类" class="headerlink" title="创建Command的子类"></a>创建Command的子类</h5><h5 id="使用-command-修饰符"><a href="#使用-command-修饰符" class="headerlink" title="使用 @command 修饰符"></a>使用 @command 修饰符</h5><h5 id="使用-option-修饰符"><a href="#使用-option-修饰符" class="headerlink" title="使用 @option 修饰符"></a>使用 @option 修饰符</h5><h5 id="下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello-word”。"><a href="#下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello-word”。" class="headerlink" title="下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello word”。"></a>下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello word”。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Command</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(Command)</span>:</span></span><br><span class="line">    <span class="string">"prints hello world"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><h5 id="再把上面创建的Hello命令加入Manager实例："><a href="#再把上面创建的Hello命令加入Manager实例：" class="headerlink" title="再把上面创建的Hello命令加入Manager实例："></a>再把上面创建的Hello命令加入Manager实例：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.add_command(<span class="string">'hello'</span>, Hello())</span><br></pre></td></tr></table></figure><h5 id="很明显，上面的语句需要在manager-run-之前运行。现在执行下面的命令："><a href="#很明显，上面的语句需要在manager-run-之前运行。现在执行下面的命令：" class="headerlink" title="很明显，上面的语句需要在manager.run()之前运行。现在执行下面的命令："></a>很明显，上面的语句需要在manager.run()之前运行。现在执行下面的命令：</h5><blockquote><p>python manage.py hello<br>hello world</p></blockquote><h5 id="也可传给Command实例的run方法一个字典："><a href="#也可传给Command实例的run方法一个字典：" class="headerlink" title="也可传给Command实例的run方法一个字典："></a>也可传给Command实例的run方法一个字典：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.run(&#123;<span class="string">'hello'</span> : Hello()&#125;)</span><br></pre></td></tr></table></figure><h5 id="Command-class-必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。"><a href="#Command-class-必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。" class="headerlink" title="Command class 必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。"></a>Command class 必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。</h5><h5 id="运行下面的命令获取可以使用的命令及其描述的列表："><a href="#运行下面的命令获取可以使用的命令及其描述的列表：" class="headerlink" title="运行下面的命令获取可以使用的命令及其描述的列表："></a>运行下面的命令获取可以使用的命令及其描述的列表：</h5><blockquote><p>python manage.py</p></blockquote><h5 id="通过运行下面的命令获取一个特定命令的帮助-这将输出这个命令的docstring。"><a href="#通过运行下面的命令获取一个特定命令的帮助-这将输出这个命令的docstring。" class="headerlink" title="通过运行下面的命令获取一个特定命令的帮助,这将输出这个命令的docstring。"></a>通过运行下面的命令获取一个特定命令的帮助,这将输出这个命令的docstring。</h5><blockquote><p>python manage.py runserver -h</p></blockquote><h5 id="上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的-command修饰符。"><a href="#上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的-command修饰符。" class="headerlink" title="上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的@command修饰符。"></a>上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的@command修饰符。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"Just say hello"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><h5 id="这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。"><a href="#这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。" class="headerlink" title="这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。"></a>这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。</h5><blockquote><p>python manage.py hello<br>hello</p></blockquote><h5 id="如果用Comman类来实现，下面的命令将输出manage类的docstring："><a href="#如果用Comman类来实现，下面的命令将输出manage类的docstring：" class="headerlink" title="如果用Comman类来实现，下面的命令将输出manage类的docstring："></a>如果用Comman类来实现，下面的命令将输出manage类的docstring：</h5><blockquote><p>python manage.py -h<br>Just say hello</p></blockquote><h5 id="最后，-option修饰符适用于更精细的命令行控制："><a href="#最后，-option修饰符适用于更精细的命令行控制：" class="headerlink" title="最后，@option修饰符适用于更精细的命令行控制："></a>最后，@option修饰符适用于更精细的命令行控制：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.option('-n', '--name', help='Your name')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br></pre></td></tr></table></figure><h5 id="后面会有更详细的对-option的介绍。"><a href="#后面会有更详细的对-option的介绍。" class="headerlink" title="后面会有更详细的对@option的介绍。"></a>后面会有更详细的对@option的介绍。</h5><hr><hr><h1 id="增加命令行参数"><a href="#增加命令行参数" class="headerlink" title="增加命令行参数"></a>增加命令行参数</h1><hr><p>#####大多数命令都带有参数。还是上面的例子，如果不仅仅是打印”hello world”，还想输出一个额外的名字，如：</p><blockquote><p>python manage.py hello –name=Joe<br>hello Joe</p></blockquote><h5 id="或者短参数："><a href="#或者短参数：" class="headerlink" title="或者短参数："></a>或者短参数：</h5><blockquote><p>python manage.py hello -n Joe</p></blockquote><h5 id="为实现这一功能，需要使用Command类的option-list属性。"><a href="#为实现这一功能，需要使用Command类的option-list属性。" class="headerlink" title="为实现这一功能，需要使用Command类的option_list属性。"></a>为实现这一功能，需要使用Command类的option_list属性。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Command, Manager, Option</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(Command)</span>:</span></span><br><span class="line"></span><br><span class="line">    option_list = (</span><br><span class="line">        Option(<span class="string">'--name'</span>, <span class="string">'-n'</span>, dest=<span class="string">'name'</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello %s"</span> % name</span><br></pre></td></tr></table></figure><h5 id="长参数和短参数都是存储在Option实例中。详见API部分。"><a href="#长参数和短参数都是存储在Option实例中。详见API部分。" class="headerlink" title="长参数和短参数都是存储在Option实例中。详见API部分。"></a>长参数和短参数都是存储在Option实例中。详见API部分。</h5><h5 id="另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。"><a href="#另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。" class="headerlink" title="另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。"></a>另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(Command)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, default_name=<span class="string">'Joe'</span>)</span>:</span></span><br><span class="line">        self.default_name=default_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_options</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            Option(<span class="string">'-n'</span>, <span class="string">'--name'</span>, dest=<span class="string">'name'</span>, default=self.default_name),</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello"</span>,  name</span><br></pre></td></tr></table></figure><h5 id="若使用-command修饰符，参数将直接自动的从函数的参数中获取："><a href="#若使用-command修饰符，参数将直接自动的从函数的参数中获取：" class="headerlink" title="若使用@command修饰符，参数将直接自动的从函数的参数中获取："></a>若使用@command修饰符，参数将直接自动的从函数的参数中获取：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">&gt; python manage.py hello Joe</span><br><span class="line">&gt; hello Joe</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 或者使用可选参数：</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=<span class="string">"Fred"</span>)</span></span></span><br><span class="line">print hello, name</span><br></pre></td></tr></table></figure><h5 id="调用方法如下："><a href="#调用方法如下：" class="headerlink" title="调用方法如下："></a>调用方法如下：</h5><blockquote><p>python manage.py hello –name=Joe<br>hello Joe</p></blockquote><h5 id="或者："><a href="#或者：" class="headerlink" title="或者："></a>或者：</h5><blockquote><p>python manage.py hello -n Joe<br>hello Joe</p></blockquote><h5 id="这里需要注意："><a href="#这里需要注意：" class="headerlink" title="这里需要注意："></a>这里需要注意：</h5><h5 id="n-是由参数的第一个字母决定的。所以”name”-gt-“-n”"><a href="#n-是由参数的第一个字母决定的。所以”name”-gt-“-n”" class="headerlink" title="-n 是由参数的第一个字母决定的。所以”name” &gt; “-n”"></a>-n 是由参数的第一个字母决定的。所以”name” &gt; “-n”</h5><h5 id="其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。"><a href="#其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。" class="headerlink" title="其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。"></a>其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。</h5><h5 id="同时，需要注意选项参数是boolean值，例如："><a href="#同时，需要注意选项参数是boolean值，例如：" class="headerlink" title="同时，需要注意选项参数是boolean值，例如："></a>同时，需要注意选项参数是boolean值，例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manage.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(verified=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Checks if verified</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"VERIFIED?"</span>, <span class="string">"YES"</span> <span class="keyword">if</span> verified <span class="keyword">else</span> <span class="string">"NO"</span></span><br></pre></td></tr></table></figure><h5 id="只能这样调用："><a href="#只能这样调用：" class="headerlink" title="只能这样调用："></a>只能这样调用：</h5><blockquote><p>python manage.py verify<br>VERIFIED? NO</p></blockquote><blockquote><p>python manage.py verify -v<br>VERIFIED? YES</p></blockquote><blockquote><p>python manage.py verify –verified<br>VERIFIED? YES</p></blockquote><h5 id="command修饰符随便简单好用，但在复杂情况下，-option是更好的选择："><a href="#command修饰符随便简单好用，但在复杂情况下，-option是更好的选择：" class="headerlink" title="@command修饰符随便简单好用，但在复杂情况下，@option是更好的选择："></a>@command修饰符随便简单好用，但在复杂情况下，@option是更好的选择：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.option('-n', '--name', dest='name', default='joe')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br><span class="line">```    </span><br><span class="line"><span class="comment">##### 可以增加更多的选项参数：</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">@manager.option('-n', '--name', dest='name', default='joe')</span></span><br><span class="line"><span class="meta">@manager.option('-u', '--url', dest='url', default=None)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name, url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello"</span>, name, <span class="string">"from"</span>, url</span><br></pre></td></tr></table></figure><h5 id="可以这样调用："><a href="#可以这样调用：" class="headerlink" title="可以这样调用："></a>可以这样调用：</h5><blockquote><p>python manage.py hello -n Joe -u reddit.com hello Joe from reddit.com</p></blockquote><h5 id="或者：-1"><a href="#或者：-1" class="headerlink" title="或者："></a>或者：</h5><blockquote><p>python manage.py hello –name=Joe –url=reddit.com<br>hello Joe from reddit.com</p></blockquote><hr><hr><h1 id="向manager加入配置项"><a href="#向manager加入配置项" class="headerlink" title="向manager加入配置项"></a>向manager加入配置项</h1><hr><h5 id="配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标-志来为你的应用设置配置文件。例如："><a href="#配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标-志来为你的应用设置配置文件。例如：" class="headerlink" title="配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标 志来为你的应用设置配置文件。例如："></a>配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标 志来为你的应用设置配置文件。例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">(config=None)</span>:</span></span><br><span class="line"></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    <span class="keyword">if</span> config <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        app.config.from_pyfile(config)</span><br><span class="line">    <span class="comment"># configure your app...</span></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><h5 id="可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。"><a href="#可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。" class="headerlink" title="可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。"></a>可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。</h5><h5 id="为实现传配置参数，可以使用add-option-方法，这和Option的参数一样。"><a href="#为实现传配置参数，可以使用add-option-方法，这和Option的参数一样。" class="headerlink" title="为实现传配置参数，可以使用add_option()方法，这和Option的参数一样。"></a>为实现传配置参数，可以使用add_option()方法，这和Option的参数一样。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.add_option(&apos;-c&apos;, &apos;--config&apos;, dest=&apos;config&apos;, required=False)</span><br></pre></td></tr></table></figure><h5 id="同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager-run-之前执行。"><a href="#同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager-run-之前执行。" class="headerlink" title="同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager.run()之前执行。"></a>同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager.run()之前执行。</h5><h5 id="假设你有下面的命令："><a href="#假设你有下面的命令：" class="headerlink" title="假设你有下面的命令："></a>假设你有下面的命令：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    uppercase = app.config.get(<span class="string">'USE_UPPERCASE'</span>, <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> uppercase:</span><br><span class="line">        name = name.upper()</span><br><span class="line">    <span class="keyword">print</span> hello, name</span><br></pre></td></tr></table></figure><blockquote><p>python manage.py hello joe -c dev.cfg<br>hello JOE</p></blockquote><h5 id="注意，”config“选项并没有传给上面的hello命令。"><a href="#注意，”config“选项并没有传给上面的hello命令。" class="headerlink" title="注意，”config“选项并没有传给上面的hello命令。"></a>注意，”config“选项并没有传给上面的hello命令。</h5><h5 id="为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示-例。"><a href="#为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示-例。" class="headerlink" title="为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示 例。"></a>为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示 例。</h5><hr><hr><h1 id="获取用户输入"><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h1><hr><h5 id="Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如："><a href="#Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如：" class="headerlink" title="Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如："></a>Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager, prompt_bool</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropdb</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> prompt_bool(</span><br><span class="line">        <span class="string">"Are you sure you want to lose all your data"</span>):</span><br><span class="line">        db.drop_all()</span><br></pre></td></tr></table></figure><h5 id="执行如下："><a href="#执行如下：" class="headerlink" title="执行如下："></a>执行如下：</h5><blockquote><p>python manage.py dropdb<br>Are you sure you want to lose all your data ? [N]</p></blockquote><p>#####从下文API中获取更多关于prompt functions的内容。</p><hr><hr><h1 id="默认命令"><a href="#默认命令" class="headerlink" title="默认命令"></a>默认命令</h1><hr><h5 id="Flask-Script拥有一对预设的命令，你可以加入或者定制：Server-and-Shell。"><a href="#Flask-Script拥有一对预设的命令，你可以加入或者定制：Server-and-Shell。" class="headerlink" title="Flask-Script拥有一对预设的命令，你可以加入或者定制：Server and Shell。"></a>Flask-Script拥有一对预设的命令，你可以加入或者定制：Server and Shell。</h5><h5 id="Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。"><a href="#Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。" class="headerlink" title="Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。"></a>Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Server, Manager</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> create_app</span><br><span class="line"></span><br><span class="line">manager = Manager(create_app)</span><br><span class="line">manager.add_command(<span class="string">"runserver"</span>, Server())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><h5 id="运行如下："><a href="#运行如下：" class="headerlink" title="运行如下："></a>运行如下：</h5><blockquote><p>python manage.py runserver</p></blockquote><h5 id="Server命令有一组命令行参数，运行python-manage-py-runserver-h-获取详细信息。你也可以在构造函数中重新定义默认-行为："><a href="#Server命令有一组命令行参数，运行python-manage-py-runserver-h-获取详细信息。你也可以在构造函数中重新定义默认-行为：" class="headerlink" title="Server命令有一组命令行参数，运行python manage.py runserver -h 获取详细信息。你也可以在构造函数中重新定义默认 行为："></a>Server命令有一组命令行参数，运行python manage.py runserver -h 获取详细信息。你也可以在构造函数中重新定义默认 行为：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server = Server(host=&quot;0.0.0.0&quot;, port=9000)</span><br></pre></td></tr></table></figure><h5 id="无需赘言，开发Server不是为生产环境准备的。"><a href="#无需赘言，开发Server不是为生产环境准备的。" class="headerlink" title="无需赘言，开发Server不是为生产环境准备的。"></a>无需赘言，开发Server不是为生产环境准备的。</h5><h5 id="Shell名令启动一个Python-shell。可以穿进去一个make-context参数，这个参数必须是一个字典。默认情况下，将返回你的-Flask应用实例。"><a href="#Shell名令启动一个Python-shell。可以穿进去一个make-context参数，这个参数必须是一个字典。默认情况下，将返回你的-Flask应用实例。" class="headerlink" title="Shell名令启动一个Python shell。可以穿进去一个make_context参数，这个参数必须是一个字典。默认情况下，将返回你的 Flask应用实例。"></a>Shell名令启动一个Python shell。可以穿进去一个make_context参数，这个参数必须是一个字典。默认情况下，将返回你的 Flask应用实例。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Shell, Manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_make_context</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> dict(app=app, db=db, models=models)</span><br><span class="line"></span><br><span class="line">manager = Manager(create_app)</span><br><span class="line">manager.add_command(<span class="string">"shell"</span>, Shell(make_context=_make_context))</span><br></pre></td></tr></table></figure><h5 id="这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。"><a href="#这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。" class="headerlink" title="这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。"></a>这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。</h5><h5 id="Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python-shell。你可以用两种方法关闭这一-行为：传use-ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。"><a href="#Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python-shell。你可以用两种方法关闭这一-行为：传use-ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。" class="headerlink" title="Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python shell。你可以用两种方法关闭这一 行为：传use_ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。"></a>Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python shell。你可以用两种方法关闭这一 行为：传use_ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell = Shell(use_ipython=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h5 id="也有一个shell修饰符，你可以在函数上下文中使用。"><a href="#也有一个shell修饰符，你可以在函数上下文中使用。" class="headerlink" title="也有一个shell修饰符，你可以在函数上下文中使用。"></a>也有一个shell修饰符，你可以在函数上下文中使用。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.shell</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_shell_context</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> dict(app=app, db=db, models=models)</span><br></pre></td></tr></table></figure><h5 id="这将使这个命令成为shell的默认执行的命令。"><a href="#这将使这个命令成为shell的默认执行的命令。" class="headerlink" title="这将使这个命令成为shell的默认执行的命令。"></a>这将使这个命令成为shell的默认执行的命令。</h5><blockquote><p>python manage.py shell</p></blockquote><h5 id="默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写-add-command-或者修饰符。若你传给Manager的构造器一个with-default-commands-False参数，则这些命令不会被载入。"><a href="#默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写-add-command-或者修饰符。若你传给Manager的构造器一个with-default-commands-False参数，则这些命令不会被载入。" class="headerlink" title="默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写 add_command()或者修饰符。若你传给Manager的构造器一个with_default_commands=False参数，则这些命令不会被载入。"></a>默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写 add_command()或者修饰符。若你传给Manager的构造器一个with_default_commands=False参数，则这些命令不会被载入。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager = Manager(app, with_default_commands=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的Python shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>flask的外部脚本的使用</title>
    <link href="http://yoursite.com/2018/02/12/flask%E7%9A%84%E5%A4%96%E9%83%A8%E8%84%9A%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/02/12/flask的外部脚本的使用/</id>
    <published>2018-02-12T08:12:55.000Z</published>
    <updated>2018-04-24T12:18:29.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码"><a href="#1-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码" class="headerlink" title="1.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码"></a>1.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><hr><p>在终端中使用<code>python manage.py hello</code>即可运行该脚本<br><img src="/images/flask的外部脚本的使用/0C71170F-1BEA-4977-B4A9-401B85C69117.png" alt="这里写图片描述"></p><h1 id="2-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码"><a href="#2-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码" class="headerlink" title="2.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码"></a>2.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option('-m','--msg',dest='msg_val',default='world')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(msg_val)</span>:</span></span><br><span class="line">    print(<span class="string">'hello '</span>+msg_val)</span><br></pre></td></tr></table></figure><p>在终端中使用<code>python manage.py hello -m csdn</code>或者<code>python manage.py hello --msg_val=csdn</code>即可运行该脚本<br>运行结果为<code>hello csdn</code></p>]]></content>
    
    <summary type="html">
    
      本文是对flask的外部脚本的使用的总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>flask连接sqlite3数据库</title>
    <link href="http://yoursite.com/2018/02/12/flask%E8%BF%9E%E6%8E%A5sqlite3%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/02/12/flask连接sqlite3数据库/</id>
    <published>2018-02-12T08:00:56.000Z</published>
    <updated>2018-04-19T16:04:26.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-在flask文件夹中新建一个models-py文件用来定义模型，内部代码如下"><a href="#1-在flask文件夹中新建一个models-py文件用来定义模型，内部代码如下" class="headerlink" title="1.在flask文件夹中新建一个models.py文件用来定义模型，内部代码如下"></a>1.在flask文件夹中新建一个models.py文件用来定义模型，内部代码如下</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3 <span class="comment">#导入sqlite3包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#定义该函数用来连接数据库</span></span><br><span class="line">    <span class="keyword">return</span> sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,id,name)</span>:</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        sql = <span class="string">"insert into user VALUES (?,?)"</span><span class="comment">#sql语句</span></span><br><span class="line">        conn = get_conn()<span class="comment">#连接数据库</span></span><br><span class="line">        cursor = conn.cursor()<span class="comment">#定义一个游标</span></span><br><span class="line">        cursor.execute(sql,(self.id,self.name))<span class="comment">#执行sql语句</span></span><br><span class="line">        conn.commit()<span class="comment">#提交数据库改动</span></span><br><span class="line">        cursor.close()<span class="comment">#关闭游标</span></span><br><span class="line">        conn.close()<span class="comment">#关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    staticmethod相当于一个定义在类里面的函数，所以如果一个方法既不跟实例</span></span><br><span class="line"><span class="string">    相关也不跟特定的类相关，推荐将其定义为一个staticmethod，这样不仅使代</span></span><br><span class="line"><span class="string">    码一目了然，而且似的利于维护代码。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">()</span>:</span></span><br><span class="line">        sql = <span class="string">"select * from user"</span></span><br><span class="line">        conn = get_conn()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        rows = cursor.execute(sql)</span><br><span class="line">        users = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            user = User(row[<span class="number">0</span>],row[<span class="number">1</span>])</span><br><span class="line">            users.append(user)</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> users</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'id:&#123;&#125;--name:&#123;&#125;'</span>.format(self.id,self.name)<span class="comment">#注此处的是点不是逗号</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="2-在flask文件夹中新建一个manage-py文件"><a href="#2-在flask文件夹中新建一个manage-py文件" class="headerlink" title="2.在flask文件夹中新建一个manage.py文件"></a>2.在flask文件夹中新建一个manage.py文件</h1><hr><p>###（1）导入flask_script包，导入sqlite3包，导入models.py中定义的模型，导入flask中的应用，所以最终头部代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br></pre></td></tr></table></figure></p><hr><p>###（2）创建数据库，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    sql = <span class="string">"create table user (id INT,name TEXT)"</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure></p><hr><p>###（3）保存数据，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'csdn'</span>)</span><br><span class="line">    user.save()</span><br></pre></td></tr></table></figure></p><hr><p>###（4）查询数据，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br></pre></td></tr></table></figure></p><hr><h3 id="整体代码如下"><a href="#整体代码如下" class="headerlink" title="整体代码如下"></a>整体代码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    sql = <span class="string">"create table user (id INT,name TEXT)"</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'zhangjia'</span>)</span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><hr><hr><h1 id="3-在终端中使用命令即可运行数据库的创建，添加以及查询"><a href="#3-在终端中使用命令即可运行数据库的创建，添加以及查询" class="headerlink" title="3.在终端中使用命令即可运行数据库的创建，添加以及查询"></a>3.在终端中使用命令即可运行数据库的创建，添加以及查询</h1>]]></content>
    
    <summary type="html">
    
      本文是flask连接sqlite3数据库的总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>flask路由，消息提醒，以及异常处理</title>
    <link href="http://yoursite.com/2018/02/11/flask%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%B6%88%E6%81%AF%E6%8F%90%E9%86%92%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/02/11/flask路由，消息提醒，以及异常处理/</id>
    <published>2018-02-11T13:37:46.000Z</published>
    <updated>2018-04-19T16:02:21.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建一个小的flask应用"><a href="#1-创建一个小的flask应用" class="headerlink" title="1.创建一个小的flask应用"></a>1.创建一个小的flask应用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">（文件名为app.py）</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>上述代码便是一个最简单的flask应用，使用<code>python app.py</code>即可运行，命令行运行情况如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python app.py</span><br><span class="line"> * Running on http://127.0.0.1:5000/</span><br></pre></td></tr></table></figure></p><hr><hr><h1 id="2-flask的路由"><a href="#2-flask的路由" class="headerlink" title="2.flask的路由"></a>2.flask的路由</h1><hr><p>###（1）下面的代码表示在<a href="http://127.0.0.1:5000/hello路径下可以在网页中看到返回值`hello`" target="_blank" rel="noopener">http://127.0.0.1:5000/hello路径下可以在网页中看到返回值`hello`</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure></p><hr><p>###（2）下面的代码表示可以在获取路由中的值，如在路径中输入路径<a href="http://127.0.0.1:5000/hello/123，页面中将会显示返回值`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello/123，页面中将会显示返回值`hello</a> 123`<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello/&lt;id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+id)</span><br></pre></td></tr></table></figure></p><hr><p>###（3）下面的代码同样可以获取路由中的值，如在路径中输入<a href="http://127.0.0.1:5000/hello?id=123，页面将会显示返回值`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello?id=123，页面将会显示返回值`hello</a> 123`<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    id = request.args.get(<span class="string">'id'</span>)</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+id)</span><br></pre></td></tr></table></figure></p><hr><hr><h1 id="3-flask反向路由"><a href="#3-flask反向路由" class="headerlink" title="3.flask反向路由"></a>3.flask反向路由</h1><hr><h4 id="第二个函数将会通过url-for函数来获取函数名为hello的函数的路由，即在路径中输入http-127-0-0-1-5000-hello-url，网页将会显示-hello-hello"><a href="#第二个函数将会通过url-for函数来获取函数名为hello的函数的路由，即在路径中输入http-127-0-0-1-5000-hello-url，网页将会显示-hello-hello" class="headerlink" title="第二个函数将会通过url_for函数来获取函数名为hello的函数的路由，即在路径中输入http://127.0.0.1:5000/hello_url，网页将会显示`hello /hello`"></a>第二个函数将会通过url_for函数来获取函数名为hello的函数的路由，即在路径中输入<a href="http://127.0.0.1:5000/hello_url，网页将会显示`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello_url，网页将会显示`hello</a> /hello`</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#反向路由</span></span><br><span class="line"><span class="meta">@app.route('/hello_url')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+url_for(<span class="string">'hello'</span>))</span><br></pre></td></tr></table></figure><hr><hr><h1 id="4-前后端数据传输"><a href="#4-前后端数据传输" class="headerlink" title="4.前后端数据传输"></a>4.前后端数据传输</h1><hr><p>###（1）后端向前端传输数据</p><h4 id="下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可看到页面返回了"><a href="#下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可看到页面返回了" class="headerlink" title="下面的代码最后在在路径中输入http://127.0.0.1:5000/hello即可看到页面返回了"></a>下面的代码最后在在路径中输入<a href="http://127.0.0.1:5000/hello即可看到页面返回了" target="_blank" rel="noopener">http://127.0.0.1:5000/hello即可看到页面返回了</a></h4><p><code>hello csdn</code><br><code>hello 1</code></p><h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">"csdn"</span>)</span><br><span class="line">    context = &#123;<span class="string">"user"</span>:user&#125;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>,context=context)</span><br><span class="line">    <span class="comment">#注意，此处的传参数方式与Django中的不同，前一个context指传到前端的参数名</span></span><br></pre></td></tr></table></figure><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>user_index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; context.user.user_name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; context.user.user_id &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>###（2）前端向后端提交数据</p><h4 id="下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可返回一个表单，-if-request-method-‘GET’-用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理"><a href="#下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可返回一个表单，-if-request-method-‘GET’-用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理" class="headerlink" title="下面的代码最后在在路径中输入http://127.0.0.1:5000/hello即可返回一个表单，`if request.method == ‘GET’:`用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理"></a>下面的代码最后在在路径中输入<a href="http://127.0.0.1:5000/hello即可返回一个表单，`if" target="_blank" rel="noopener">http://127.0.0.1:5000/hello即可返回一个表单，`if</a> request.method == ‘GET’:`用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理</h4><h4 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request,flash</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/hello",methods=['POST','GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = request.form</span><br><span class="line">        user_name = form.get(<span class="string">"user_name"</span>)</span><br><span class="line">        password = form.get(<span class="string">"password"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_name:</span><br><span class="line">            flash(<span class="string">"Please input username"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> password:</span><br><span class="line">            flash(<span class="string">"Please input password"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user_name == <span class="string">"csdn"</span> <span class="keyword">and</span> password == <span class="string">"12345678"</span>:</span><br><span class="line">            flash(<span class="string">"Login succeed"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">"username or password is wrong"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br></pre></td></tr></table></figure><h4 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; get_flashed_messages()[0] &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="5-消息提醒"><a href="#5-消息提醒" class="headerlink" title="5.消息提醒"></a>5.消息提醒</h1><hr><p>####（1）使用消息提示是需要配置secret_key</p><p>####（2）flash获得的为一个列表，所以前端使用<code>get_flashed_messages()[0]</code>来获得消息提醒</p><h4 id="后端代码-2"><a href="#后端代码-2" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,render_template,flash</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = &apos;123&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/hello&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    flash(&quot;csdn&quot;)</span><br><span class="line">    return render_template(&quot;hello.html&quot;)</span><br></pre></td></tr></table></figure><h4 id="前端代码-2"><a href="#前端代码-2" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; get_flashed_messages()[0] &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6.异常处理"></a>6.异常处理</h1><hr><p>###（1）404错误</p><h4 id="当路由中输入错误路径，将会返回404页面"><a href="#当路由中输入错误路径，将会返回404页面" class="headerlink" title="当路由中输入错误路径，将会返回404页面"></a>当路由中输入错误路径，将会返回404页面</h4><h4 id="后端代码-3"><a href="#后端代码-3" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"404.html"</span>)</span><br></pre></td></tr></table></figure><h4 id="前端代码-3"><a href="#前端代码-3" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（文件名为404.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>抱歉您找的页面不存在<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>###（2）有条件的跳转到404页面</p><h4 id="当在路由中输入http-127-0-0-1-5000-error-login-1是返回登录成功页面，反之返回404页面"><a href="#当在路由中输入http-127-0-0-1-5000-error-login-1是返回登录成功页面，反之返回404页面" class="headerlink" title="当在路由中输入http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面"></a>当在路由中输入<a href="http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面" target="_blank" rel="noopener">http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面</a></h4><p>####后端代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,abort</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/hello/&lt;id&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> int(id) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br></pre></td></tr></table></figure></p><h4 id="前端代码-4"><a href="#前端代码-4" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>您已登录成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      flask路由，消息提醒，以及异常处理是flask中很重要的部分，本文对此进行了总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Django网站部署前期准备</title>
    <link href="http://yoursite.com/2018/02/10/Django%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2018/02/10/Django网站部署前期准备/</id>
    <published>2018-02-10T13:52:08.000Z</published>
    <updated>2018-04-24T12:17:23.733Z</updated>
    
    <content type="html"><![CDATA[<h3 id="建立虚拟环境"><a href="#建立虚拟环境" class="headerlink" title="建立虚拟环境"></a>建立虚拟环境</h3><hr><p>####（1）创建一个空文件夹，并命名为learning_log</p><p>####（2）在终端中切换到该文件夹中使用<code>virtualenv ll_env</code>创建一个虚拟环境，如创建失败请使用<code>pip install virtualenv</code>命令来安装virtualenv包</p><p>####（3）完成上述命令后learning_log文件加如下所示<br><img src="/images/Django网站部署前期准备/C8ACB738-1CEE-480F-BF0B-D386892A068A.png" alt="这里写图片描述"></p><p><img src="/images/Django网站部署前期准备/2CD77709-FE56-4704-A194-29F885EC5BD4.png" alt="这里写图片描述"></p><hr><hr><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><hr><p>####（1）使用<code>source ll_env/bin/activate</code>命令激活虚拟环境，激活后终端前将出现（ll_env）<br><img src="/images/Django网站部署前期准备/974485ED-0954-4E4D-A707-AE7CE9013DC2.png" alt="这里写图片描述"></p><h5 id="注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境"><a href="#注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境" class="headerlink" title="注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境"></a>注：如果需要停止虚拟环境，请使用<code>deactivate</code>命令来关闭虚拟环境</h5><hr><hr><h3 id="安装，新建Django项目"><a href="#安装，新建Django项目" class="headerlink" title="安装，新建Django项目"></a>安装，新建Django项目</h3><hr><p>####（1）创建并激活虚拟环境之后，我们就可以安装Django了安装命令为<code>pip install django</code></p><p>####（2）使用<code>django-admin.py startproject learning_log .</code>来新建项目（注意不要忽略.，如没有.则manage.py文件将不与ll_env文件夹在同一目录，会影响后期部署）<br><img src="/images/Django网站部署前期准备/7419757A-AB42-43DD-BDBE-EE546956CE9B.png" alt="这里写图片描述"></p><hr><hr><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><hr><p>####（1）使用命令<code>python manage.py migrate</code>来修改数据库，我们将这称为迁移数据库，首次执行将新建一个必要的数据表<br><img src="/images/Django网站部署前期准备/87285B1B-7928-44AB-B7B0-37C2E7FD8A32.png" alt="这里写图片描述"></p><hr><hr><h3 id="查看项目"><a href="#查看项目" class="headerlink" title="查看项目"></a>查看项目</h3><hr><p>####（1）使用<code>python manage.py runserver</code>来启动该项目，启动之后便可在<a href="http://127.0.0.1:8000/打开该网站，若8000端口被占用可使用`python" target="_blank" rel="noopener">http://127.0.0.1:8000/打开该网站，若8000端口被占用可使用`python</a> manage.py runserver 8001`使网站在8001端口打开，如仍被占用，请继续向后增加，直至成功，关闭请按ctrl+c<br><img src="/images/Django网站部署前期准备/C732941D-96E2-4099-A92B-88D68BF04574.png" alt="这里写图片描述"></p><p><img src="/images/Django网站部署前期准备/4030F3FE-055D-4DE6-954D-41F2C452D4D1.png" alt="这里写图片描述"></p><hr><hr><h3 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h3><hr><p>####（1）使用<code>python manage.py startapp learning_logs</code>命令创建一个名为learning_logs的app,运行后文件夹中将出现learning_logs文件夹</p><hr><hr><h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><hr><p>####（1）打开models.py文件添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br></pre></td></tr></table></figure></p><h5 id="DateTimeField-auto-now-add-True-是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串"><a href="#DateTimeField-auto-now-add-True-是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串" class="headerlink" title="DateTimeField(auto_now_add=True)是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串"></a><code>DateTimeField(auto_now_add=True)</code>是指日期自动添加，<strong>str</strong>函数表示了该模型的简单显示，该模型的返回值等于text字符串</h5><hr><hr><p>###激活模型</p><hr><p>####（1）在settings.py文件中将learning_logs这个app添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#我的应用</span></span><br><span class="line">    <span class="string">'learning_logs'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>####（2）我们使用<code>python manage.py makemigrations</code>命令，makemigrations是Django确认数据库如何修改，输出表示django创建了一个0001_initial.py的迁移文件，之后使用<code>python manage.py migrate</code>这种迁移数据库来修改数据库<br><img src="/images/Django网站部署前期准备/3B4B5F11-F537-4A7C-9BCD-106D448558CB.png" alt="这里写图片描述"></p><p>#####注：管理数据的正常顺序为：修改models.py，对修改使用makemigrations，最后使用migrate来迁移数据</p><hr><hr><p>###Django管理网站</p><hr><p>####（1）创建超级用户，命令为<code>python manage.py createsuperuser</code></p><p>####（2）向管理网站注册模型，在admin.py文件中添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic,Entry</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br></pre></td></tr></table></figure></p><p>####之后登录<a href="http://127.0.0.1:8000/admin通过Django的后台来进行网站管理，在这个网站中寻在Topic模型，可以在这里添加Topic" target="_blank" rel="noopener">http://127.0.0.1:8000/admin通过Django的后台来进行网站管理，在这个网站中寻在Topic模型，可以在这里添加Topic</a></p><p>####（3）同理我们可以定义一个Entry模型，models.py文件中添加的代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    topic = models.ForeignKey(Topic)</span><br><span class="line">    text = models.TextField()</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name_plural = <span class="string">'entries'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text[:<span class="number">50</span>] + <span class="string">'...'</span></span><br></pre></td></tr></table></figure></p><h4 id="这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys"><a href="#这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys" class="headerlink" title="这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys"></a>这里的<strong>str</strong>指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys</h4><p>####（4）进行数据迁移</p><p>####（5）向管理网站注册entry，在admin.py中添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.site.register(Entry)</span><br></pre></td></tr></table></figure></p><hr><hr>]]></content>
    
    <summary type="html">
    
      本文总结了Django进行开发的常见前期追被工作
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
</feed>
