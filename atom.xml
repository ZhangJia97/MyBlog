<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随我的博客</title>
  
  <subtitle>记录学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suiwo.xyz/"/>
  <updated>2019-07-31T09:01:54.895Z</updated>
  <id>http://suiwo.xyz/</id>
  
  <author>
    <name>随我</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot集成Redis</title>
    <link href="http://suiwo.xyz/2019/07/25/springboot%E9%9B%86%E6%88%90Redis/"/>
    <id>http://suiwo.xyz/2019/07/25/springboot集成Redis/</id>
    <published>2019-07-25T08:47:01.000Z</published>
    <updated>2019-07-31T09:01:54.895Z</updated>
    
    <content type="html"><![CDATA[<p>由于之前在项目中集成了身份验证以及权限功能，所以在请求操作时会有大量数据库读操作来获取用户的角色以及所拥有的权限，这对于数据库来说是一个巨大的性能开支，所以我打算尝试使用redis来减少数据库读写，而是使用缓存读写，<code>本文是在看完集成Redis入门后所做的总结，所以对很多地方还有疑问，请大家酌情参考</code></p><h2 id="一、添加Redis依赖"><a href="#一、添加Redis依赖" class="headerlink" title="一、添加Redis依赖"></a>一、添加Redis依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、application-properties中添加配置参数"><a href="#二、application-properties中添加配置参数" class="headerlink" title="二、application.properties中添加配置参数"></a>二、application.properties中添加配置参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Redis相关</span><br><span class="line">spring.redis.database=0</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.jedis.pool.max-active=8</span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.jedis.pool.max-wait=-1</span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.jedis.pool.max-idle=8</span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.jedis.pool.min-idle=0</span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=0</span><br></pre></td></tr></table></figure><h2 id="三、书写Redis工具类"><a href="#三、书写Redis工具类" class="headerlink" title="三、书写Redis工具类"></a>三、书写Redis工具类</h2><blockquote><p>本部分是很久之前参考的他人的代码，由于时间久远，原博文链接找不到了，所以在此无法放上原文章链接，对原博主表示歉意，如果有知道原链接的，请发给我谢谢<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisUtil</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递增因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递减因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束  0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引  index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="四、使用redis缓存"><a href="#四、使用redis缓存" class="headerlink" title="四、使用redis缓存"></a>四、使用redis缓存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroServiceImpl</span> <span class="keyword">implements</span> <span class="title">ShiroService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PermissionDao permissionDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RoleDao roleDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">listUserPerms</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; permsSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        String key = <span class="string">"Shiro:Perms:"</span> + userId;</span><br><span class="line">        <span class="keyword">if</span>(redisUtil.hasKey(key))&#123;</span><br><span class="line">            permsSet = (Set&lt;String&gt;) redisUtil.get(key);</span><br><span class="line">            logger.info(<span class="string">"ShiroServiceImpl.listUserPerms : 从缓存中获取了用户 &#123;&#125; 的权限 &gt;&gt; &#123;&#125; "</span>, userId, permsSet);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;String&gt; permsList = permissionDao.listUserPerms(userId);</span><br><span class="line">            <span class="keyword">for</span> (String perms : permsList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (perms == <span class="keyword">null</span> || perms.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                permsSet.addAll(Arrays.asList(perms.trim().split(<span class="string">","</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            redisUtil.set(key, permsSet);</span><br><span class="line">            logger.info(<span class="string">"ShiroServiceImpl.listUserPerms : 向缓存中插入了用户 &#123;&#125; 的权限 &gt;&gt; &#123;&#125; "</span>, userId, permsSet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permsSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">listUserRoles</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; userRolesSet;</span><br><span class="line">        String key = <span class="string">"Shiro:Roles:"</span> + userId;</span><br><span class="line">        <span class="keyword">if</span>(redisUtil.hasKey(key))&#123;</span><br><span class="line">            userRolesSet = (Set&lt;String&gt;) redisUtil.get(key);</span><br><span class="line">            logger.info(<span class="string">"ShiroServiceImpl.listUserRoles : 从缓存中获取了用户 &#123;&#125; 的角色 &gt;&gt; &#123;&#125; "</span>, userId, userRolesSet);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            userRolesSet = roleDao.listUserRoles(userId);</span><br><span class="line">            redisUtil.set(key, userRolesSet);</span><br><span class="line">            logger.info(<span class="string">"ShiroServiceImpl.listUserRoles : 向缓存中插入了用户 &#123;&#125; 的角色 &gt;&gt; &#123;&#125; "</span>, userId, userRolesSet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roleDao.listUserRoles(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：由于我此次参考资料不多，所以感觉这个总结中还是有很多欠缺，后期会重新对SpringBoot集成Redis进行新的总结</p>]]></content>
    
    <summary type="html">
    
      Redis 是一种开源的内存中数据存储，提供亚毫秒级的响应时间。其主要使用案例包括：缓存、会话存储、排行榜、发布/订阅等等。
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
      <category term="Redis" scheme="http://suiwo.xyz/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>springboot集成定时任务功能</title>
    <link href="http://suiwo.xyz/2019/07/24/springboot%E9%9B%86%E6%88%90%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/"/>
    <id>http://suiwo.xyz/2019/07/24/springboot集成定时任务功能/</id>
    <published>2019-07-24T09:34:38.000Z</published>
    <updated>2019-07-31T08:48:58.822Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="http://www.ityouknow.com/springboot/2016/12/02/spring-boot-scheduler.html" target="_blank" rel="noopener">http://www.ityouknow.com/springboot/2016/12/02/spring-boot-scheduler.html</a></p><h3 id="1-集成pom包依赖"><a href="#1-集成pom包依赖" class="headerlink" title="1.集成pom包依赖"></a>1.集成pom包依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在启动类中添加注释"><a href="#2-在启动类中添加注释" class="headerlink" title="2.在启动类中添加注释"></a>2.在启动类中添加注释</h3><blockquote><p>在启动类中添加<code>@EnableScheduling</code>即可开启定时<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="3-创建任意的一个定时线程实现类"><a href="#3-创建任意的一个定时线程实现类" class="headerlink" title="3.创建任意的一个定时线程实现类"></a>3.创建任意的一个定时线程实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0,30 * * * *"</span>)  <span class="comment">//cron接受cron表达式，根据cron表达式确定定时规则</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedulerTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// todo 业务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cron表达式可以参考这篇博文：<a href="https://www.jianshu.com/p/e9ce1a7e1ed1" target="_blank" rel="noopener">https://www.jianshu.com/p/e9ce1a7e1ed1</a></p><h3 id="4-fixedRate-参数说明"><a href="#4-fixedRate-参数说明" class="headerlink" title="4.fixedRate 参数说明"></a>4.fixedRate 参数说明</h3><p><code>@Scheduled(fixedRate = 6000)</code> ：上一次开始执行时间点之后6秒再执行<br><code>@Scheduled(fixedDelay = 6000)</code> ：上一次执行完毕时间点之后6秒再执行<br><code>@Scheduled(initialDelay=1000, fixedRate=6000)</code> ：第一次延迟1秒后执行，之后按 fixedRate 的规则每6秒执行一次</p>]]></content>
    
    <summary type="html">
    
      本文是今天尝试在springboot中集成定时任务后的总结
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
      <category term="SchedulerTask" scheme="http://suiwo.xyz/tags/SchedulerTask/"/>
    
  </entry>
  
  <entry>
    <title>springboot集成多线程功能</title>
    <link href="http://suiwo.xyz/2019/07/22/springboot%E9%9B%86%E6%88%90%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%9F%E8%83%BD/"/>
    <id>http://suiwo.xyz/2019/07/22/springboot集成多线程功能/</id>
    <published>2019-07-22T10:10:44.000Z</published>
    <updated>2019-07-31T08:48:56.425Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章<br><a href="https://segmentfault.com/a/1190000015766938" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015766938</a><br><a href="https://blog.csdn.net/qq_34545192/article/details/80484780" target="_blank" rel="noopener">https://blog.csdn.net/qq_34545192/article/details/80484780</a></p><blockquote><p>在平时我们写多线程可能更多是使用new Thread() 或者创建线程池来实现的，但是在阿里的java开发规范中要求不要自己直接创建新线程，而是通过线程池来实现的，恰好spring boot支持多线程的开发，所以我尝试通过多线程的方式来暂时解决原来同步发送邮件是的请求时间过长的问题。当然多线程并不能彻底解决实现异步，还是需要通过消息中间件来实现功能的解耦，实现真正的异步</p></blockquote><h3 id="1-在springboot的启动类添加-EnableAsync注解"><a href="#1-在springboot的启动类添加-EnableAsync注解" class="headerlink" title="1.在springboot的启动类添加@EnableAsync注解"></a>1.在springboot的启动类添加@EnableAsync注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-添加ThreadConfig的配置类"><a href="#2-添加ThreadConfig的配置类" class="headerlink" title="2.添加ThreadConfig的配置类"></a>2.添加ThreadConfig的配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">15</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">25</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-下面我们编写多线程部分的业务实现"><a href="#3-下面我们编写多线程部分的业务实现" class="headerlink" title="3.下面我们编写多线程部分的业务实现"></a>3.下面我们编写多线程部分的业务实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailTool</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.mail.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sendFrom; <span class="comment">//读取配置文件中的参数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmailAsync</span><span class="params">(EmailEntity emailEntity, CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">        sendEmail(emailEntity);</span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(EmailEntity emailEntity)</span> </span>&#123;</span><br><span class="line">        MimeMessage message = javaMailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper helper;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);<span class="comment">//这里可以自定义发信名称</span></span><br><span class="line">            helper.setFrom(sendFrom);</span><br><span class="line">            helper.setTo(emailEntity.getSendTo());</span><br><span class="line">            helper.setSubject(emailEntity.getSubject());</span><br><span class="line">            helper.setText(emailEntity.getMessage(),</span><br><span class="line">                    <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过上述步骤就可以实现sendEmailAsync函数的异步功能了,但是在使用这个方法的时候我们要注意的问题就是</p></blockquote><h3 id="Async无效的问题"><a href="#Async无效的问题" class="headerlink" title="@Async无效的问题"></a>@Async无效的问题</h3><p>异步方法和调用方法一定要 <strong>写在不同的类中</strong> ,如果写在一个类中,是没有效果的</p>]]></content>
    
    <summary type="html">
    
      本文是今天尝试在springboot中集成多线程后的总结
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
      <category term="SchedulerTask" scheme="http://suiwo.xyz/tags/SchedulerTask/"/>
    
  </entry>
  
  <entry>
    <title>springboot集成Shiro</title>
    <link href="http://suiwo.xyz/2019/07/20/springboot%E9%9B%86%E6%88%90Shiro/"/>
    <id>http://suiwo.xyz/2019/07/20/springboot集成Shiro/</id>
    <published>2019-07-20T07:55:45.000Z</published>
    <updated>2019-07-31T08:46:46.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h5 id="Apache-Shiro是一个强大且易用的Java安全框架-执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API-您可以快速、轻松地获得任何应用程序-从最小的移动应用程序到最大的网络和企业应用程序。本文是使用Shiro-JWT-Json-Web-Token-实现的，对于jwt部分有疑问的可以参考之前jwt相关文章，本博文中的一部分函数使用的是JWT那一篇文章文章所写的函数。"><a href="#Apache-Shiro是一个强大且易用的Java安全框架-执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API-您可以快速、轻松地获得任何应用程序-从最小的移动应用程序到最大的网络和企业应用程序。本文是使用Shiro-JWT-Json-Web-Token-实现的，对于jwt部分有疑问的可以参考之前jwt相关文章，本博文中的一部分函数使用的是JWT那一篇文章文章所写的函数。" class="headerlink" title="Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。本文是使用Shiro + JWT(Json Web Token)实现的，对于jwt部分有疑问的可以参考之前jwt相关文章，本博文中的一部分函数使用的是JWT那一篇文章文章所写的函数。"></a>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。本文是使用Shiro + JWT(Json Web Token)实现的，对于jwt部分有疑问的可以参考之前jwt相关文章，本博文中的一部分函数使用的是JWT那一篇文章文章所写的函数。</h5><blockquote><p>参考博文 <a href="https://blog.csdn.net/w_stronger/article/details/73109248" target="_blank" rel="noopener">https://blog.csdn.net/w_stronger/article/details/73109248</a> </p></blockquote><h2 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h2><h4 id="使用idea创建空项目并添加以下依赖"><a href="#使用idea创建空项目并添加以下依赖" class="headerlink" title="使用idea创建空项目并添加以下依赖"></a>使用idea创建空项目并添加以下依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、创建自定义Realm"><a href="#三、创建自定义Realm" class="headerlink" title="三、创建自定义Realm"></a>三、创建自定义Realm</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyRealm.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户相关</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shiro数据相关</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShiroService shiroService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大坑！，必须重写此方法，不然Shiro会报错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token <span class="keyword">instanceof</span> JWTToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有当需要检测用户权限的时候才会调用此方法，例如checkRole,checkPermission之类的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取用户token</span></span><br><span class="line">        String token = (String) principals.getPrimaryPrincipal();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过token获取用户信息</span></span><br><span class="line">        String username = JWTUtil.getUsername(token);</span><br><span class="line">        User user = userDao.getUserAllInfoByTel(username);</span><br><span class="line">        <span class="keyword">int</span> userId = user.getId();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取用户拥有操作</span></span><br><span class="line">        Set&lt;String&gt; permsSet = shiroService.listUserPerms(userId);</span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        info.addStringPermissions(permsSet);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取用户拥有角色</span></span><br><span class="line">        Set&lt;String&gt; rolesSet = shiroService.listUserRoles(userId);</span><br><span class="line">        info.setRoles(rolesSet);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认使用此方法进行用户名正确与否验证，错误抛出异常即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken auth)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String token = (String) auth.getCredentials();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解密获得username，用于和数据库进行对比，此部分的身份验证请参考我的JWT相关博文</span></span><br><span class="line">        String username = JWTUtil.getUsername(token);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"Username or password error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        User user = userDao.getUserAllInfoByTel(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"Username or password error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证信息</span></span><br><span class="line">        <span class="keyword">if</span> (!JWTUtil.verify(token, username, user.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"Username or password error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(token, token, <span class="string">"myRealm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、自定义JWT拦截器"><a href="#四、自定义JWT拦截器" class="headerlink" title="四、自定义JWT拦截器"></a>四、自定义JWT拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JWTFilter.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTFilter</span> <span class="keyword">extends</span> <span class="title">BasicHttpAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里我们详细说明下为什么最终返回的都是true，即允许访问</span></span><br><span class="line"><span class="comment">     * 例如我们提供一个地址 GET /article</span></span><br><span class="line"><span class="comment">     * 登入用户和游客看到的内容是不同的</span></span><br><span class="line"><span class="comment">     * 如果在这里返回了false，请求会被直接拦截，用户看不到任何东西</span></span><br><span class="line"><span class="comment">     * 所以我们在这里返回true，Controller中可以通过 subject.isAuthenticated() 来判断用户是否登入</span></span><br><span class="line"><span class="comment">     * 如果有些资源只有登入用户才能访问，我们只需要在方法上面加上 <span class="doctag">@RequiresAuthentication</span> 注解即可</span></span><br><span class="line"><span class="comment">     * 但是这样做有一个缺点，就是不能够对GET,POST等请求进行分别过滤鉴权(因为我们重写了官方的方法)，但实际上对应用影响不大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查看当前Header中是否携带Authorization属性(Token)，有的话就进行登录认证授权</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isLoginAttempt(request, response)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 进行Shiro的登录UserRealm</span></span><br><span class="line">                <span class="keyword">this</span>.executeLogin(request, response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 认证出现异常，传递错误信息msg</span></span><br><span class="line">                String msg = e.getMessage();</span><br><span class="line">                <span class="comment">// 获取应用异常(该Cause是导致抛出此throwable(异常)的throwable(异常))</span></span><br><span class="line">                Throwable throwable = e.getCause();</span><br><span class="line">                <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> SignatureVerificationException) &#123;</span><br><span class="line">                    <span class="comment">// 该异常为JWT的AccessToken认证失败(Token或者密钥不正确)</span></span><br><span class="line">                    msg = <span class="string">"Token或者密钥不正确("</span> + throwable.getMessage() + <span class="string">")"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> TokenExpiredException) &#123;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 应用异常不为空</span></span><br><span class="line">                    <span class="keyword">if</span> (throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 获取应用异常msg</span></span><br><span class="line">                        msg = throwable.getMessage();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  错误两种处理方式</span></span><br><span class="line"><span class="comment">                  1. 将非法请求转发到/401的Controller处理，抛出自定义无权访问异常被全局捕捉再返回Response信息</span></span><br><span class="line"><span class="comment">                  2. 无需转发，直接返回Response信息</span></span><br><span class="line"><span class="comment">                  一般使用第二种(更方便)</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有携带Token</span></span><br><span class="line">            HttpServletRequest httpServletRequest = WebUtils.toHttp(request);</span><br><span class="line">            <span class="comment">// 获取当前请求类型</span></span><br><span class="line">            String httpMethod = httpServletRequest.getMethod();</span><br><span class="line">            <span class="comment">// 获取当前请求URI</span></span><br><span class="line">            String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">            logger.info(<span class="string">"当前请求 &#123;&#125; Authorization属性(Token)为空 请求类型 &#123;&#125;"</span>, requestURI, httpMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断用户是否想要登入。</span></span><br><span class="line"><span class="comment">     * 检测header里面是否包含Authorization字段即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isLoginAttempt</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        String authorization = req.getHeader(<span class="string">"AuthKey"</span>);</span><br><span class="line">        <span class="keyword">return</span> authorization != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行AccessToken登录认证授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">executeLogin</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        String authorization = httpServletRequest.getHeader(<span class="string">"AuthKey"</span>);</span><br><span class="line">        JWTToken token = <span class="keyword">new</span> JWTToken(authorization);</span><br><span class="line">        <span class="comment">// 提交给realm进行登入，如果错误他会抛出异常并被捕获</span></span><br><span class="line">        getSubject(request, response).login(token);</span><br><span class="line">        <span class="comment">// 如果没有抛出异常则代表登入成功，返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对跨域提供支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-control-Allow-Origin"</span>, httpServletRequest.getHeader(<span class="string">"Origin"</span>));</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET,POST,OPTIONS,PUT,DELETE"</span>);</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, httpServletRequest.getHeader(<span class="string">"Access-Control-Request-Headers"</span>));</span><br><span class="line">        <span class="comment">// 跨域时会首先发送一个option请求，这里我们给option请求直接返回正常状态</span></span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.OK.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将非法请求跳转到 /401</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">response401</span><span class="params">(ServletRequest req, ServletResponse resp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpServletResponse httpServletResponse = (HttpServletResponse) resp;</span><br><span class="line">            httpServletResponse.sendRedirect(<span class="string">"/401"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、添加配置文件"><a href="#五、添加配置文件" class="headerlink" title="五、添加配置文件"></a>五、添加配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ShiroConfig.java</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getManager</span><span class="params">(MyRealm realm)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用自定义realm</span></span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 关闭shiro自带的session，详情见文档</span></span><br><span class="line"><span class="comment">         * http://shiro.apache.org/session-management.html#SessionManagement-StatelessApplications%28Sessionless%29</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DefaultSubjectDAO subjectDAO = <span class="keyword">new</span> DefaultSubjectDAO();</span><br><span class="line">        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator = <span class="keyword">new</span> DefaultSessionStorageEvaluator();</span><br><span class="line">        defaultSessionStorageEvaluator.setSessionStorageEnabled(<span class="keyword">false</span>);</span><br><span class="line">        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);</span><br><span class="line">        manager.setSubjectDAO(subjectDAO);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"shiroFilter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">factory</span><span class="params">(DefaultWebSecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean factoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加自己的过滤器并且取名为jwt</span></span><br><span class="line">        Map&lt;String, Filter&gt; filterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">"jwt"</span>, <span class="keyword">new</span> JWTFilter());</span><br><span class="line">        factoryBean.setFilters(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 自定义url规则</span></span><br><span class="line"><span class="comment">         * http://shiro.apache.org/web.html#urls-</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, String&gt; filterRuleMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 所有请求通过我们自己的JWT Filter</span></span><br><span class="line">        filterRuleMap.put(<span class="string">"/users/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">"/users"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">"/users/*"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(filterRuleMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面的代码是添加注解支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@DependsOn</span>(<span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        <span class="comment">// 强制使用cglib，防止重复代理和可能引起代理出错的问题</span></span><br><span class="line">        <span class="comment">// https://zhuanlan.zhihu.com/p/29161098</span></span><br><span class="line">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(DefaultWebSecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor advisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        advisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：一定要将所有需要判断拦截的请求使用自定义的拦截器进行拦截</p></blockquote><h2 id="6、使用注解对接口进行权限判断以及身份验证"><a href="#6、使用注解对接口进行权限判断以及身份验证" class="headerlink" title="6、使用注解对接口进行权限判断以及身份验证"></a>6、使用注解对接口进行权限判断以及身份验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个函数的意思是需要请求这个接口的用户角色需要时admin，</span></span><br><span class="line"><span class="comment"> * 同时具有sys:user:save的权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"admin"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(value = <span class="string">"sys:user:save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RestResult <span class="title">addUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    logger.debug(<span class="string">"/users [Post] -&gt; user : &#123;&#125;"</span>, user);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.insertUser(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> RestResultFactory.restResult(<span class="number">402</span>, <span class="string">"用户创建失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、对于常见注解的介绍"><a href="#7、对于常见注解的介绍" class="headerlink" title="7、对于常见注解的介绍"></a>7、对于常见注解的介绍</h2><h3 id="Shiro共有5个注解，接下来我们就详细说说吧"><a href="#Shiro共有5个注解，接下来我们就详细说说吧" class="headerlink" title="Shiro共有5个注解，接下来我们就详细说说吧"></a>Shiro共有5个注解，接下来我们就详细说说吧</h3><h4 id="1-RequiresAuthentication"><a href="#1-RequiresAuthentication" class="headerlink" title="1.RequiresAuthentication:"></a>1.RequiresAuthentication:</h4><ul><li>使用该注解标注的类，实例，方法在访问或调用时，当前<code>Subject</code>必须在当前session中已经过认证。</li></ul><h4 id="2-RequiresGuest"><a href="#2-RequiresGuest" class="headerlink" title="2.RequiresGuest:"></a>2.RequiresGuest:</h4><ul><li>使用该注解标注的类，实例，方法在访问或调用时，当前<code>Subject</code>可以是“gust”身份，不需要经过认证或者在原先的session中存在记录。</li></ul><h4 id="3-RequiresPermissions"><a href="#3-RequiresPermissions" class="headerlink" title="3.RequiresPermissions:"></a>3.RequiresPermissions:</h4><ul><li>当前<code>Subject</code>需要拥有某些特定的权限时，才能执行被该注解标注的方法。如果当前<code>Subject</code>不具有这样的权限，则方法不会被执行。</li></ul><h4 id="4-RequiresRoles"><a href="#4-RequiresRoles" class="headerlink" title="4.RequiresRoles:"></a>4.RequiresRoles:</h4><ul><li>当前<code>Subject</code>必须拥有所有指定的角色时，才能访问被该注解标注的方法。如果当前<code>Subject</code>不同时拥有所有指定角色，则方法不会执行还会抛出<code>AuthorizationException</code>异常。</li></ul><h4 id="5-RequiresUser"><a href="#5-RequiresUser" class="headerlink" title="5.RequiresUser"></a>5.RequiresUser</h4><ul><li>当前<code>Subject</code>必须是应用的用户，才能访问或调用被该注解标注的类，实例，方法。</li></ul><h5 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h5><blockquote><p>Shiro的认证注解处理是有内定的处理顺序的，如果有个多个注解的话，前面的通过了会继续检查后面的，若不通过则直接返回，处理顺序依次为（与实际声明顺序无关）：</p><ol><li>RequiresRoles </li><li>RequiresPermissions </li><li>RequiresAuthentication </li><li>RequiresUser </li><li>RequiresGuest<br>例如：你同时声明了RequiresRoles和RequiresPermissions，那就要求拥有此角色的同时还得拥有相应的权限。</li></ol></blockquote><h5 id="1-RequiresRoles"><a href="#1-RequiresRoles" class="headerlink" title="1) RequiresRoles"></a>1) RequiresRoles</h5><blockquote><p>可以用在Controller或者方法上。可以多个roles，多个roles时默认逻辑为 AND也就是所有具备所有role才能访问。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequiresRoles &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">    <span class="function">Logical <span class="title">logical</span><span class="params">()</span> <span class="keyword">default</span> Logical.AND</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属于user角色</span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"user"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须同时属于user和admin角色</span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(&#123;<span class="string">"user"</span>,<span class="string">"admin"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//属于user或者admin之一;修改logical为OR 即可</span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(value=&#123;<span class="string">"user"</span>,<span class="string">"admin"</span>&#125;,logical=Logical.OR)</span><br></pre></td></tr></table></figure><h5 id="2-RequiresPermissions"><a href="#2-RequiresPermissions" class="headerlink" title="2) RequiresPermissions"></a>2) RequiresPermissions</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequiresPermissions &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">    <span class="function">Logical <span class="title">logical</span><span class="params">()</span> <span class="keyword">default</span> Logical.AND</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//符合index:hello权限要求</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"index:hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须同时复核index:hello和index:world权限要求</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(&#123;<span class="string">"index:hello"</span>,<span class="string">"index:world"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//符合index:hello或index:world权限要求即可</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(value=&#123;<span class="string">"index:hello"</span>,<span class="string">"index:world"</span>&#125;,logical=Logical.OR)</span><br></pre></td></tr></table></figure><h5 id="3-RequiresAuthentication，RequiresUser，RequiresGuest"><a href="#3-RequiresAuthentication，RequiresUser，RequiresGuest" class="headerlink" title="3) RequiresAuthentication，RequiresUser，RequiresGuest"></a>3) RequiresAuthentication，RequiresUser，RequiresGuest</h5><blockquote><p>这三个的使用方法一样</p><ul><li>@RequiresAuthentication</li><li>@RequiresUser</li><li>@RequiresGusst</li></ul></blockquote><blockquote><p>总结：总体来说，shiro的存在大大的降低了关于权限部分的开发时间，使我们有更多精力关注业务开发，也让我们能快速的开发出一个完善的权限系统，避免自己开发权限时出现的权限考虑不周到的情况</p></blockquote>]]></content>
    
    <summary type="html">
    
      Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
      <category term="Shiro" scheme="http://suiwo.xyz/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>如何使用JWT</title>
    <link href="http://suiwo.xyz/2019/07/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8JWT/"/>
    <id>http://suiwo.xyz/2019/07/16/如何使用JWT/</id>
    <published>2019-07-16T07:27:55.000Z</published>
    <updated>2019-07-31T08:46:31.540Z</updated>
    
    <content type="html"><![CDATA[<p>参考博文：<a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">https://www.jianshu.com/p/576dbf44b2ae</a></p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><blockquote><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p></blockquote><h2 id="二、JWT样式格式"><a href="#二、JWT样式格式" class="headerlink" title="二、JWT样式格式"></a>二、JWT样式格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br><span class="line"></span><br><span class="line">//第一部分我们称它为头部（header)</span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br><span class="line"></span><br><span class="line">//第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)</span><br><span class="line">yJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</span><br><span class="line"></span><br><span class="line">//第三部分是签证（signature)</span><br><span class="line">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><h2 id="三、如何使用JWT"><a href="#三、如何使用JWT" class="headerlink" title="三、如何使用JWT"></a>三、如何使用JWT</h2><blockquote><p>关于JWT在此我就不做过多的介绍，下面直接看，如何通过代码实现JWT</p></blockquote><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建Token实体类"><a href="#2-创建Token实体类" class="headerlink" title="2.创建Token实体类"></a>2.创建Token实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JWTToken</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTToken</span> <span class="keyword">implements</span> <span class="title">AuthenticationToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JWTToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-书写工具类（包括加密解密）"><a href="#3-书写工具类（包括加密解密）" class="headerlink" title="3.书写工具类（包括加密解密）"></a>3.书写工具类（包括加密解密）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JWTUtil.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE_TIME = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secret   密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String username, String secret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date date = <span class="keyword">new</span> Date(System.currentTimeMillis() + EXPIRE_TIME);</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">            <span class="keyword">return</span> JWT.create().withClaim(<span class="string">"username"</span>, username)</span><br><span class="line">                    .withExpiresAt(date)<span class="comment">//添加超时时间</span></span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中的用户名，无需secret解密，也可以类似的获取token中其他在payload中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUsername</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DecodedJWT jwt = JWT.decode(token);</span><br><span class="line">            <span class="keyword">return</span> jwt.getClaim(<span class="string">"username"</span>).asString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token是否正确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token    密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secret   密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String token, String username, String secret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">            JWTVerifier verifier = JWT.require(algorithm)</span><br><span class="line">                    .withClaim(<span class="string">"username"</span>, username)</span><br><span class="line">                    .build();</span><br><span class="line">            DecodedJWT jwt = verifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结: JWT只是一个单独的工具，要和其他的框架或者自行实现一些其他功能才能真的将JWT应用在后台开发中，后面我将总结如何使用Shiro + JWT实现一个简单的权限认证功能。</p></blockquote>]]></content>
    
    <summary type="html">
    
      在平时我们经常会听到cookie和token用于身份验证的区别，而jwt（Json Web Token）就是最常见的一种计算token的方式，下面就让我们看看如何使用JWT吧。
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
      <category term="JWT" scheme="http://suiwo.xyz/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>关于MySQL日期相关语句</title>
    <link href="http://suiwo.xyz/2019/07/12/%E5%85%B3%E4%BA%8EMySQL%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E8%AF%AD%E5%8F%A5/"/>
    <id>http://suiwo.xyz/2019/07/12/关于MySQL日期相关语句/</id>
    <published>2019-07-12T03:36:27.000Z</published>
    <updated>2019-07-26T03:55:12.300Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-MySQL按照时间范围进行查询的SQL语句"><a href="#1-MySQL按照时间范围进行查询的SQL语句" class="headerlink" title="1.MySQL按照时间范围进行查询的SQL语句"></a>1.MySQL按照时间范围进行查询的SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># DATE_FORMAT(字段名, 格式化规则) startDate endDate指代查询范围</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_name <span class="keyword">where</span> <span class="keyword">DATE_FORMAT</span>(c_date, <span class="string">'%Y%m%d%H%i'</span>) <span class="keyword">between</span> startDate <span class="keyword">and</span> endDate;</span><br></pre></td></tr></table></figure><h4 id="2-MySQL中的时间的加减-以加法为例"><a href="#2-MySQL中的时间的加减-以加法为例" class="headerlink" title="2.MySQL中的时间的加减(以加法为例)"></a>2.MySQL中的时间的加减(以加法为例)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="string">'2018-06-26 23:59:59'</span>,<span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">hour</span>);</span><br></pre></td></tr></table></figure><p>输出结果为</p><blockquote><p>‘2018-06-27 0:59:59’</p></blockquote><h4 id="3-较为复杂的MySQL语句，用来查询当前时间一个小时后的时间"><a href="#3-较为复杂的MySQL语句，用来查询当前时间一个小时后的时间" class="headerlink" title="3.较为复杂的MySQL语句，用来查询当前时间一个小时后的时间"></a>3.较为复杂的MySQL语句，用来查询当前时间一个小时后的时间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 数据格式：201907121251（2019年07月12日12时51分）</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">DATE_ADD</span>(<span class="keyword">DATE_FORMAT</span>(<span class="keyword">now</span>(), <span class="string">'%Y-%m-%d %H:%i'</span>), <span class="built_in">interval</span> <span class="string">'1'</span> <span class="keyword">hour</span>),<span class="string">'%Y%m%d%H%i'</span>);</span><br></pre></td></tr></table></figure><p>更多相关可以参考下面两篇文章<br><a href="https://yq.aliyun.com/articles/526458" target="_blank" rel="noopener">https://yq.aliyun.com/articles/526458</a><br><a href="https://www.cnblogs.com/zhongchi/archive/2010/05/04/1727096.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhongchi/archive/2010/05/04/1727096.html</a></p>]]></content>
    
    <summary type="html">
    
      本文是今天遇到的一些关于MySQL的Date相关的一些问题
    
    </summary>
    
      <category term="数据库" scheme="http://suiwo.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://suiwo.xyz/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>基于编程方式实现条件装配</title>
    <link href="http://suiwo.xyz/2019/06/14/%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%9D%A1%E4%BB%B6%E8%A3%85%E9%85%8D/"/>
    <id>http://suiwo.xyz/2019/06/14/基于编程方式实现条件装配/</id>
    <published>2019-06-14T03:16:59.000Z</published>
    <updated>2019-06-14T03:35:48.237Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要讲通过编程方式来实现条件装配 —— <code>@Condition</code></p></blockquote><hr><h4 id="首先我们添加判断类"><a href="#首先我们添加判断类" class="headerlink" title="首先我们添加判断类"></a>首先我们添加判断类</h4><p><code>OnSystemPropertyCondition.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: OnSystemPropertyCondition</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 15:04</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 系统属性条件判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnSystemPropertyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; attributes = metadata.getAnnotationAttributes(ConditionalOnSystemProperty.class.getName());</span><br><span class="line">        String  propertyName = String.valueOf(attributes.get(<span class="string">"name"</span>));</span><br><span class="line">        String  propertyValue = String.valueOf(attributes.get(<span class="string">"value"</span>));</span><br><span class="line">        String  javaPropertyValue = System.getProperty(propertyName);</span><br><span class="line">        System.out.println(javaPropertyValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> propertyValue.equals(javaPropertyValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="然后添加注解类"><a href="#然后添加注解类" class="headerlink" title="然后添加注解类"></a>然后添加注解类</h4><p><code>ConditionalOnSystemProperty.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: ConditionalOnSystemProperty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 15:02</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Java系统属性条件判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(OnSystemPropertyCondition.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnSystemProperty &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java系统属性名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java系统属性值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="最后我们添加引导启动类"><a href="#最后我们添加引导启动类" class="headerlink" title="最后我们添加引导启动类"></a>最后我们添加引导启动类</h4><p><code>ConditionalSystemPropertyBootstrap.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.bootstrap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.WebApplicationType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> xyz.suiwo.diveinspringboot.condition.ConditionalOnSystemProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: ConditionalSystemPropertyBootstrap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 15:10</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 系统属性条件引导类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionalSystemPropertyBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnSystemProperty</span>(name = <span class="string">"user.name"</span>,value = <span class="string">"zhangsan"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">"Hello world zhangsan"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnSystemProperty</span>(name = <span class="string">"user.name"</span>,value = <span class="string">"suiwo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloW</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world suiwo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> SpringApplicationBuilder(ConditionalSystemPropertyBootstrap.class)</span><br><span class="line">                        .web(WebApplicationType.NONE)</span><br><span class="line">                        .run(args);</span><br><span class="line">        System.out.println(context.getBean(<span class="string">"helloW"</span>,String.class));</span><br><span class="line">        System.out.println(context.getBean(<span class="string">"helloWorld"</span>,String.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭上下文</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="当我们运行后会发现终端运行结果"><a href="#当我们运行后会发现终端运行结果" class="headerlink" title="当我们运行后会发现终端运行结果"></a>当我们运行后会发现终端运行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.1.5.RELEASE)</span><br><span class="line"></span><br><span class="line">2019-06-14 11:28:50.783  INFO 30704 --- [           main] s.d.b.ConditionalSystemPropertyBootstrap : Starting ConditionalSystemPropertyBootstrap on suiwoMBP with PID 30704 (/Users/dive-in-spring-boot/target/classes started by suiwo in /Users/dive-in-spring-boot)</span><br><span class="line">2019-06-14 11:28:50.790  INFO 30704 --- [           main] s.d.b.ConditionalSystemPropertyBootstrap : No active profile set, falling back to default profiles: default</span><br><span class="line">suiwo</span><br><span class="line">suiwo</span><br><span class="line">2019-06-14 11:28:51.251  INFO 30704 --- [           main] s.d.b.ConditionalSystemPropertyBootstrap : Started ConditionalSystemPropertyBootstrap in 1.218 seconds (JVM running for 1.945)</span><br><span class="line">Hello world suiwo</span><br><span class="line">Exception in thread &quot;main&quot; org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &apos;helloWorld&apos; available</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:769)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1221)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:294)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1111)</span><br><span class="line">at xyz.suiwo.diveinspringboot.bootstrap.ConditionalSystemPropertyBootstrap.main(ConditionalSystemPropertyBootstrap.java:36)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><h4 id="由此可见当不满足条件时，此时bean无法装配"><a href="#由此可见当不满足条件时，此时bean无法装配" class="headerlink" title="由此可见当不满足条件时，此时bean无法装配"></a>由此可见当不满足条件时，此时bean无法装配</h4>]]></content>
    
    <summary type="html">
    
      本文主要讲通过编程方式来实现条件装配
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>基于配置方式实现自定义条件装配</title>
    <link href="http://suiwo.xyz/2019/06/14/%E5%9F%BA%E4%BA%8E%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%A1%E4%BB%B6%E8%A3%85%E9%85%8D/"/>
    <id>http://suiwo.xyz/2019/06/14/基于配置方式实现自定义条件装配/</id>
    <published>2019-06-14T03:02:45.000Z</published>
    <updated>2019-06-14T03:15:19.788Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要讲通过配置方式来实现自定义条件装配 —— <code>@Profile</code></p></blockquote><h3 id="我们尝试使用Profile实现两个计算服务，分别是Java7的for循环以及Java8的lambda表达式"><a href="#我们尝试使用Profile实现两个计算服务，分别是Java7的for循环以及Java8的lambda表达式" class="headerlink" title="我们尝试使用Profile实现两个计算服务，分别是Java7的for循环以及Java8的lambda表达式"></a>我们尝试使用Profile实现两个计算服务，分别是Java7的for循环以及Java8的lambda表达式</h3><hr><h4 id="首先我们先新建一个计算服务接口"><a href="#首先我们先新建一个计算服务接口" class="headerlink" title="首先我们先新建一个计算服务接口"></a>首先我们先新建一个计算服务接口</h4><p><code>CalculateService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: CalculateService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 13:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CalculateService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sum求和</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 多个整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">sum</span><span class="params">(Integer... values)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="添加两种方式的实现类"><a href="#添加两种方式的实现类" class="headerlink" title="添加两种方式的实现类"></a>添加两种方式的实现类</h4><p><code>Java7CalculateService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: Java7CalculateService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 13:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"Java7"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java7CalculateService</span> <span class="keyword">implements</span> <span class="title">CalculateService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Java7实现"</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : values)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CalculateService calculateService = <span class="keyword">new</span> Java7CalculateService();</span><br><span class="line">        System.out.println(calculateService.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Java8CalculateService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: Java8CalculateService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 13:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"Java8"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8CalculateService</span> <span class="keyword">implements</span> <span class="title">CalculateService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Java8实现"</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = Stream.of(values).reduce(<span class="number">0</span>,Integer::sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CalculateService calculateService = <span class="keyword">new</span> Java7CalculateService();</span><br><span class="line">        System.out.println(calculateService.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="下面我们来添加启动类"><a href="#下面我们来添加启动类" class="headerlink" title="下面我们来添加启动类"></a>下面我们来添加启动类</h4><p><code>CalculateServiceBootstrap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.bootstrap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.WebApplicationType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> xyz.suiwo.diveinspringboot.service.CalculateService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: CalculateServiceBootstrap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 14:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = <span class="string">"xyz.suiwo.diveinspringboot.service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculateServiceBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> SpringApplicationBuilder(CalculateServiceBootstrap.class)</span><br><span class="line">                        .web(WebApplicationType.NONE)</span><br><span class="line">                        .profiles(<span class="string">"Java8"</span>)</span><br><span class="line">                        .run(args);</span><br><span class="line"></span><br><span class="line">        CalculateService calculateService = context</span><br><span class="line">                .getBean(CalculateService.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sum:"</span> + calculateService.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭上下文</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时终端打印结果如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.1.5.RELEASE)</span><br><span class="line"></span><br><span class="line">2019-06-14 11:09:17.221  INFO 30420 --- [           main] x.s.d.b.CalculateServiceBootstrap        : Starting CalculateServiceBootstrap on XXX with PID 30434 (/Users/dive-in-spring-boot/target/classes started by XXX in /Users/dive-in-spring-boot)</span><br><span class="line">2019-06-14 11:09:17.228  INFO 30420 --- [           main] x.s.d.b.CalculateServiceBootstrap        : The following profiles are active: Java8</span><br><span class="line">2019-06-14 11:09:20.062  INFO 30420 --- [           main] x.s.d.b.CalculateServiceBootstrap        : Started CalculateServiceBootstrap in 3.416 seconds (JVM running for 4.569)</span><br><span class="line">Java8实现</span><br><span class="line">sum:55</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><blockquote><p>若将<code>profile</code>改成<code>Java7</code>，则终端结果为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.1.5.RELEASE)</span><br><span class="line"></span><br><span class="line">2019-06-14 11:10:17.847  INFO 30434 --- [           main] x.s.d.b.CalculateServiceBootstrap        : Starting CalculateServiceBootstrap on XXX with PID 30434 (/Users/dive-in-spring-boot/target/classes started by XXX in /Users/dive-in-spring-boot)</span><br><span class="line">2019-06-14 11:10:17.851  INFO 30434 --- [           main] x.s.d.b.CalculateServiceBootstrap        : The following profiles are active: Java7</span><br><span class="line">2019-06-14 11:10:20.149  INFO 30434 --- [           main] x.s.d.b.CalculateServiceBootstrap        : Started CalculateServiceBootstrap in 2.822 seconds (JVM running for 3.95)</span><br><span class="line">Java7实现</span><br><span class="line">sum:55</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文主要讲通过配置方式来实现自定义条件装配
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Java通过RMI实现手写RPC框架</title>
    <link href="http://suiwo.xyz/2019/04/24/Java%E9%80%9A%E8%BF%87RMI%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6/"/>
    <id>http://suiwo.xyz/2019/04/24/Java通过RMI实现手写RPC框架/</id>
    <published>2019-04-24T10:56:13.000Z</published>
    <updated>2019-04-24T11:59:15.463Z</updated>
    
    <content type="html"><![CDATA[<p>参考视频：<a href="https://www.bilibili.com/video/av30168877/?p=3" target="_blank" rel="noopener">https://www.bilibili.com/video/av30168877/?p=3</a><br>参考文章：<a href="https://blog.csdn.net/shan9liang/article/details/8995023" target="_blank" rel="noopener">https://blog.csdn.net/shan9liang/article/details/8995023</a></p><h3 id="1-RPC与RMI"><a href="#1-RPC与RMI" class="headerlink" title="1.RPC与RMI"></a>1.RPC与RMI</h3><ul><li>RMI(remote method invocation，面向对象的远程方法调用)</li><li>RPC（remote procedure call，远程过程调用）</li></ul><p>RPC是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。在RPC中，当一个请求到达RPC服务器时，这个请求就包含了一个参数集和一个文本值，通常形成“classname.methodname”的形式。这就向RPC服务器表明，被请求的方法在为 “classname”的类中，名叫“methodname”。然后RPC服务器就去搜索与之相匹配的类和方法，并把它作为那种方法参数类型的输入。这里的参数类型是与RPC请求中的类型是匹配的。一旦匹配成功，这个方法就被调用了，其结果被编码后返回客户方。</p><p>Java RMI 指的是远程方法调用 (Remote Method Invocation)。它是一种机制，能够让在某个 Java 虚拟机上的对象调用另一个 Java 虚拟机中的对象上的方法。可以用此方法调用的任何对象必须实现该远程接口。</p><p>RPC与RMI区别于联系</p><ul><li>RPC 跨语言，而 RMI只支持Java。</li><li>RMI 调用远程对象方法，允许方法返回 Java 对象以及基本数据类型，而RPC 不支持对象的概念，传送到 RPC 服务的消息由外部数据表示 (External Data Representation, XDR) 语言表示，这种语言抽象了字节序类和数据类型结构之间的差异。只有由 XDR 定义的数据类型才能被传递， 可以说 RMI 是面向对象方式的 Java RPC 。</li><li>在方法调用上，RMI中，远程接口使每个远程方法都具有方法签名。如果一个方法在服务器上执行，但是没有相匹配的签名被添加到这个远程接口上，那么这个新方法就不能被RMI客户方所调用。</li></ul><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>1.Server端方法接口与实现类<br>HelloService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHi</span><span class="params">(String name)</span></span>;<span class="comment">//hi name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.远程调用的函数注册中心接口及其实现<br>RegisterServerCenter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegisterServerCenter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//服务启动</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务终止</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务注册</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(Class service, Class serviceImpl)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RegisterServerCenterImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServerCenterImpl</span> <span class="keyword">implements</span> <span class="title">RegisterServerCenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以哈希表的形式存储注册的远程调用函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Class&gt; serviceRegister = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//远程调用端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个定长线程池，可控制线程最大并发数</span></span><br><span class="line">    <span class="comment">//java.lang.Runtime.availableProcessors() 方法返回到Java虚拟机的可用的处理器数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//程序启动和关闭的标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isRunning = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterServerCenterImpl</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//与ServerSocket与指定端口号绑定</span></span><br><span class="line">            serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        isRunning = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"---- start server ----"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//等待请求</span></span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//启动线程完成请求</span></span><br><span class="line">                executorService.execute(<span class="keyword">new</span> ServiceTask(socket));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isRunning = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Class service, Class serviceImpl)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将可远程调用注册到map中</span></span><br><span class="line">        serviceRegister.put(service.getName(), serviceImpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        ServiceTask(Socket socket) &#123;</span><br><span class="line">            <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ObjectOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//接收到请求</span></span><br><span class="line">                inputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取类名、方法名、参数类型、参数值</span></span><br><span class="line">                String serviceName = inputStream.readUTF();</span><br><span class="line">                String methodName = inputStream.readUTF();</span><br><span class="line">                Class[] paramType = (Class[]) inputStream.readObject();</span><br><span class="line">                Object[] args = (Object[]) inputStream.readObject();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//通过服务注册表，获取类、获取方法，执行方法获取结果</span></span><br><span class="line">                Class serviceClass = serviceRegister.get(serviceName);</span><br><span class="line">                Method method = serviceClass.getMethod(methodName, paramType);</span><br><span class="line">                Object result = method.invoke(serviceClass.newInstance(), args);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//返回结果</span></span><br><span class="line">                outputStream = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">                outputStream.writeObject(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        inputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        socket.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.Client端代码<br>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * a:类加载器 ：  需要代理哪个类（例如HelloService接口），</span></span><br><span class="line"><span class="comment">     * 就需要将HelloService的类加载器 传入第一个参数</span></span><br><span class="line"><span class="comment">     * b:需要代理的对象，具备哪些方法  --接口</span></span><br><span class="line"><span class="comment">     * 单继承，多实现  A implements B接口,c接口</span></span><br><span class="line"><span class="comment">     * String str = new String();</span></span><br><span class="line"><span class="comment">     * String[] str = new String[]&#123;"aaa","bb","cc"&#125; ;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getRemoteProxyObj</span><span class="params">(Class service, InetSocketAddress inetSocketAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[]&#123;service&#125;, <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket socket = <span class="keyword">new</span> Socket();</span><br><span class="line">                ObjectOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">                ObjectInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//与端口建立连接</span></span><br><span class="line">                    socket.connect(inetSocketAddress);</span><br><span class="line">                    outputStream = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//按顺序将参数传给server端</span></span><br><span class="line">                    outputStream.writeUTF(service.getName());</span><br><span class="line">                    outputStream.writeUTF(method.getName());</span><br><span class="line">                    outputStream.writeObject(method.getParameterTypes());</span><br><span class="line">                    outputStream.writeObject(args);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//获取返回的结果</span></span><br><span class="line">                    inputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                    <span class="keyword">return</span> inputStream.readObject();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    Objects.requireNonNull(inputStream).close();</span><br><span class="line">                    Objects.requireNonNull(outputStream).close();</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.服务端启动类<br>RPCServerTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> server.HelloService;</span><br><span class="line"><span class="keyword">import</span> server.HelloServiceImpl;</span><br><span class="line"><span class="keyword">import</span> server.RegisterServerCenter;</span><br><span class="line"><span class="keyword">import</span> server.RegisterServerCenterImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RPCServerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启一个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//服务中心</span></span><br><span class="line">                RegisterServerCenter server = <span class="keyword">new</span> RegisterServerCenterImpl(<span class="number">9999</span>);</span><br><span class="line">                <span class="comment">//将HelloService接口及实现类 注册到 服务中心</span></span><br><span class="line">                server.register(HelloService.class, HelloServiceImpl.class);</span><br><span class="line">                server.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();<span class="comment">//start()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.客户端启动类<br>ClientRPCTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> client.Client;</span><br><span class="line"><span class="keyword">import</span> server.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientRPCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//通过类反射机制类参数</span></span><br><span class="line">        HelloService service = Client.getRemoteProxyObj(Class.forName(<span class="string">"server.HelloService"</span>), <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>));</span><br><span class="line">        System.out.println((service.sayHi(<span class="string">"zhangsan"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时启动两个启动类便可实现RPC远程方法调用</p>]]></content>
    
    <summary type="html">
    
      使用Java的RMI实现手写一个满足多线程的RPC框架
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="RPC" scheme="http://suiwo.xyz/tags/RPC/"/>
    
      <category term="多线程" scheme="http://suiwo.xyz/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="动态代理" scheme="http://suiwo.xyz/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
      <category term="RMI" scheme="http://suiwo.xyz/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>synchronized及其优化</title>
    <link href="http://suiwo.xyz/2019/04/21/synchronized%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    <id>http://suiwo.xyz/2019/04/21/synchronized及其优化/</id>
    <published>2019-04-20T17:03:43.000Z</published>
    <updated>2019-05-05T01:43:17.599Z</updated>
    
    <content type="html"><![CDATA[<p>参考博文：<br><a href="http://www.cnblogs.com/wade-luffy/p/5969418.html" target="_blank" rel="noopener">http://www.cnblogs.com/wade-luffy/p/5969418.html</a><br><a href="http://www.cnblogs.com/kniught-ice/p/5189997.html" target="_blank" rel="noopener">http://www.cnblogs.com/kniught-ice/p/5189997.html</a><br><a href="https://www.zhihu.com/question/270564693" target="_blank" rel="noopener">https://www.zhihu.com/question/270564693</a></p><hr><hr><h3 id="一、锁是什么？"><a href="#一、锁是什么？" class="headerlink" title="一、锁是什么？"></a>一、锁是什么？</h3><blockquote><p>在java中对象都可以作为锁。<br>普通同步方法：锁是当前实例对象。<br>静态同步方法：锁是当前的<code>class对象</code>。<br>同步方法块：锁是<code>sychonized</code>括号中的对象。</p></blockquote><hr><h4 id="1、根据获取的锁的分类-获取对象锁和获取类锁"><a href="#1、根据获取的锁的分类-获取对象锁和获取类锁" class="headerlink" title="1、根据获取的锁的分类:获取对象锁和获取类锁"></a>1、根据获取的锁的分类:获取对象锁和获取类锁</h4><h5 id="获取对象锁的两种用法"><a href="#获取对象锁的两种用法" class="headerlink" title="获取对象锁的两种用法"></a>获取对象锁的两种用法</h5><ol><li>同步代码块<code>synchronized (this)</code> , <code>synchronized (类实例对象)</code>,锁是小括号()中的实例对象。</li><li>同步非静态方法 <code>synchronized method</code> , 锁是当前对象的实例对象。</li></ol><h5 id="获取类锁的两种用法"><a href="#获取类锁的两种用法" class="headerlink" title="获取类锁的两种用法"></a>获取类锁的两种用法</h5><ol><li>同步代码块<code>synchronized (类.class)</code>, 锁是小括号()中的类对象(Class对象)。</li><li>同步静态方法 <code>synchronized static method</code>, 锁是当前对象的类对象(Class对象)。</li></ol><hr><h4 id="2、对象锁和类锁的总结"><a href="#2、对象锁和类锁的总结" class="headerlink" title="2、对象锁和类锁的总结"></a>2、对象锁和类锁的总结</h4><ul><li>有线程访问对象的同步代码块时 ,另外的线程可以访问该对象的非同步代码块;</li><li>若锁住的是同一个对象,一个线程在访问对象的同步代码块时,另一个访问对象的同步代码块的线程会被阻塞;</li><li>若锁住的是同一个对象,一个线程在访问对象的同步方法时,另一个访问对象同步方法的线程会被阻塞;</li><li>若锁住的是同一个对象,一个线程在访问对象的同步代码块时,另一个访问对象同步方法的线程会被阻塞,反之亦然;</li><li>同一个类的不同对象的对象锁互不干扰;</li><li>类锁由于也是一种特殊的对象锁,因此表现和上述1,2,3,4一致，而由于一个类只有一把对象锁,所以同一个类的不同对象使用类锁将会是同步的;</li><li>类锁和对象锁互不干扰。</li></ul><hr><h4 id="3、其他锁相关知识点："><a href="#3、其他锁相关知识点：" class="headerlink" title="3、其他锁相关知识点："></a>3、其他锁相关知识点：</h4><ul><li>jvm是基于进入和退出<code>monitor</code>对象来实现方法的同步和代码块的同步。</li><li><code>synchronized</code>锁的不是代码，锁的是对象。</li><li>Java提供了<code>synchronized</code>关键字来支持内在锁。<code>Synchronized</code>关键字可以放在方法的前面、对象的前面、类的前面。</li><li>Java虚拟机中的同步<code>(Synchronization)</code>基于进入和退出管程<code>(Monitor)</code>对象实现，无论是显式同步(有明确的<code>monitorenter</code>和<code>monitorexit</code>指令,即同步代码块)还是隐式同步都是如此。</li></ul><hr><hr><h3 id="二、synchronized底层实现"><a href="#二、synchronized底层实现" class="headerlink" title="二、synchronized底层实现"></a>二、synchronized底层实现</h3><hr><h4 id="1、synchronized底层语义原理"><a href="#1、synchronized底层语义原理" class="headerlink" title="1、synchronized底层语义原理"></a>1、synchronized底层语义原理</h4><blockquote><p>在JVM的规范中，有这么一些话:“在JVM中,每个对象和类在逻辑上都是和一个监视器相关联的，为了实现监视器的排他性监视能力，JVM为每一个对象和类都关联一个锁，锁住了一个对象，就是获得对象相关联的监视器”</p></blockquote><p>在Java中，每个对象都会有一个<code>monitor</code>对象监视器。</p><ul><li>Java虚拟机中的一个线程在它到达监视区域开始处的时候请求一个锁。JAVA程序中每一个监视区域都和一个对象引用相关联。某一线程占有这个对象的时候，先<code>monitor</code>的计数器是不是0，如果是0还没有线程占有，这个时候线程占有这个对象，并且对这个对象的<code>monitor+1</code>;如果不为0，表示这个线程已经被其他线程占有，这个线程等待。当线程释放占有权的时候，<code>monitor-1</code>;</li><li>同一线程可以对同一对象进行多次加锁，+1, +1，重入性,而一个锁就像一种任何时候只允许一个线程拥有的特权.一个线程可以允许多次对同一对象上锁.对于每一个对象来说,java虚拟机维护一个计数器,记录对象被加了多少次锁,没被锁的对象的计数器是0,线程每加锁一次，计数器就加1,每释放一次,计数器就减1.当计数器跳到0的时候,锁就被完全释放了.</li><li>在Java语言中，同步用的最多的地方可能是被<code>synchronized</code>修饰的同步方法。同步方法并不是由<code>monitorenter</code>和<code>monitorexit</code>指令来实现同步的，而是由方法调用指令读取运行时常量池中方法的<code>ACC_ SYNCHRONIZED</code>标志来隐式实现的。下面先来了解一个概念Java对象头，这对深入理解<code>synchronized</code>实现原理非常关键。</li></ul><hr><h4 id="2、下面我们通过代码进行理解"><a href="#2、下面我们通过代码进行理解" class="headerlink" title="2、下面我们通过代码进行理解"></a>2、下面我们通过代码进行理解</h4><h5 id="当使用synchronized关键字对方法加上同步锁"><a href="#当使用synchronized关键字对方法加上同步锁" class="headerlink" title="当使用synchronized关键字对方法加上同步锁"></a>当使用synchronized关键字对方法加上同步锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">synchronizedFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2</span>);</span><br><span class="line">            m++;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们对字节码文件使用<code>javap -v</code>时，我们会发现反编译的文件中对方法添加<code>synchronized</code>关键字，会在该方法头的<code>flags</code>中存在一个<code>ACC_SYNCHRONIZED</code>（隐式同步）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedFun</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">0</span></span><br><span class="line">         0: ldc2_w        #2                  // long 2l</span><br><span class="line">         3: invokestatic  #4                  // Method java/lang/Thread.sleep:(J)V</span><br><span class="line">         6: getstatic     #5                  // Field m:I</span><br><span class="line">         <span class="number">9</span>: iconst_1</span><br><span class="line">        <span class="number">10</span>: iadd</span><br><span class="line">        11: putstatic     #5                  // Field m:I</span><br><span class="line">        <span class="number">14</span>: goto          <span class="number">22</span></span><br><span class="line">        <span class="number">17</span>: astore_0</span><br><span class="line">        <span class="number">18</span>: aload_0</span><br><span class="line">        19: invokevirtual #7                  // Method java/lang/InterruptedException.printStackTrace:()V</span><br><span class="line">        <span class="number">22</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">0</span>    <span class="number">14</span>    <span class="number">17</span>   Class java/lang/InterruptedException</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">14</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">17</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">18</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">22</span></span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">81</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ class java/lang/InterruptedException ]</span><br><span class="line">        frame_type = <span class="number">4</span> <span class="comment">/* same */</span></span><br></pre></td></tr></table></figure><h5 id="当使用synchronized关键字对代码块加上同步锁"><a href="#当使用synchronized关键字对代码块加上同步锁" class="headerlink" title="当使用synchronized关键字对代码块加上同步锁"></a>当使用synchronized关键字对代码块加上同步锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">synchronizedFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">        TimeUnit.MINUTES.sleep(<span class="number">2</span>);</span><br><span class="line">            m++;</span><br><span class="line">        &#125;    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们对字节码文件使用<code>javap -v</code>时，我们会发现反编译的文件中发现第3行出现了<code>monitorexit</code>，第19行和第25行出现了<code>monitorexit</code>，对于为什么只有一个<code>enter</code>却有两个<code>exit</code>是因为，同步锁是原子性的，所以有一个为当失败时进行回滚的<code>exit</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synchronizedFun</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: dup</span><br><span class="line">         <span class="number">2</span>: astore_1</span><br><span class="line">         <span class="number">3</span>: monitorenter</span><br><span class="line">         4: ldc2_w        #2                  // long 2l</span><br><span class="line">         7: invokestatic  #4                  // Method java/lang/Thread.sleep:(J)V</span><br><span class="line">        10: getstatic     #5                  // Field m:I</span><br><span class="line">        <span class="number">13</span>: iconst_1</span><br><span class="line">        <span class="number">14</span>: iadd</span><br><span class="line">        15: putstatic     #5                  // Field m:I</span><br><span class="line">        <span class="number">18</span>: aload_1</span><br><span class="line">        <span class="number">19</span>: monitorexit</span><br><span class="line">        <span class="number">20</span>: goto          <span class="number">28</span></span><br><span class="line">        <span class="number">23</span>: astore_2</span><br><span class="line">        <span class="number">24</span>: aload_1</span><br><span class="line">        <span class="number">25</span>: monitorexit</span><br><span class="line">        <span class="number">26</span>: aload_2</span><br><span class="line">        <span class="number">27</span>: athrow</span><br><span class="line">        <span class="number">28</span>: goto          <span class="number">36</span></span><br><span class="line">        <span class="number">31</span>: astore_1</span><br><span class="line">        <span class="number">32</span>: aload_1</span><br><span class="line">        33: invokevirtual #7                  // Method java/lang/InterruptedException.printStackTrace:()V</span><br><span class="line">        <span class="number">36</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">4</span>    <span class="number">20</span>    <span class="number">23</span>   any</span><br><span class="line">            <span class="number">23</span>    <span class="number">26</span>    <span class="number">23</span>   any</span><br><span class="line">             <span class="number">0</span>    <span class="number">28</span>    <span class="number">31</span>   Class java/lang/InterruptedException</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">18</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">28</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">31</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">32</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">36</span></span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">4</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">23</span></span><br><span class="line">          locals = [ class SynchronizedDemo, class java/lang/Object ]</span><br><span class="line">          stack = [ class java/lang/Throwable ]</span><br><span class="line">        frame_type = <span class="number">250</span> <span class="comment">/* chop */</span></span><br><span class="line">          offset_delta = <span class="number">4</span></span><br><span class="line">        frame_type = <span class="number">66</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ class java/lang/InterruptedException ]</span><br><span class="line">        frame_type = <span class="number">4</span> <span class="comment">/* same */</span></span><br></pre></td></tr></table></figure><hr><hr><h3 id="三、理解Java对象头与Monitor"><a href="#三、理解Java对象头与Monitor" class="headerlink" title="三、理解Java对象头与Monitor"></a>三、理解Java对象头与Monitor</h3><p>在JVM中，对象在内存中的布局分为三块区域:对象头、实例数据和对齐填充。</p><ul><li>实例变量:存放类的属性数据信息，包括父类的属性信息，如果是数组的实例部分还包括数组的长度，这部分内存按4字节对齐。</li><li>填充数据:由于虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐，这点了解即可。</li><li>Java头对象，它实现<code>synchronized</code>的锁对象的基础，这点我们重点分析它，一般而言，<code>synchronized</code>使用的锁对象是存储在Java对象头里的，jvm中采用2个字来存储对象头(如果对象是数组则会分配3个字，多出来的1个字记录的是数组长度)，其主要结构是由<code>Mark Word</code>和<code>Class Metadata Address</code>组成，其结构说明如下表:</li></ul><table><thead><tr><th>长度</th><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>32/64bit</td><td>Mark Word</td><td>存储对象的hashCode或锁信息等</td></tr><tr><td>32/64bit</td><td>Class Metadata Address</td><td>存储到对象类型数据的指针</td></tr><tr><td>32/64bit</td><td>Array length</td><td>数组的长度(如果当前对象是数组)</td></tr></tbody></table><hr><h4 id="1、对象头的Mark-Word默认存储的对象的hashCode，分代年龄和锁标志位"><a href="#1、对象头的Mark-Word默认存储的对象的hashCode，分代年龄和锁标志位" class="headerlink" title="1、对象头的Mark Word默认存储的对象的hashCode，分代年龄和锁标志位"></a>1、对象头的Mark Word默认存储的对象的hashCode，分代年龄和锁标志位</h4><table><thead><tr><th>锁状态</th><th>25bit</th><th>4bit</th><th>1bit是否是偏向锁</th><th>2bit锁标志位</th></tr></thead><tbody><tr><td>无锁状态</td><td>对象的hashCode</td><td>对象分代年龄</td><td>0</td><td>01</td></tr></tbody></table><h4 id="2、-Mark-Word的状态变化"><a href="#2、-Mark-Word的状态变化" class="headerlink" title="2、 Mark Word的状态变化"></a>2、 Mark Word的状态变化</h4><p><img src="/images/synchronized及其优化/20190421003216865.png" alt="在这里插入图片描述"></p><hr><hr><h3 id="四、synchronized的优化-偏向锁、轻量级锁、重量级锁"><a href="#四、synchronized的优化-偏向锁、轻量级锁、重量级锁" class="headerlink" title="四、synchronized的优化-偏向锁、轻量级锁、重量级锁"></a>四、synchronized的优化-偏向锁、轻量级锁、重量级锁</h3><blockquote><ul><li>synchronized是java多线程编程的元老级人物，也被称为重量级锁</li><li>偏向锁和轻量级锁之所以会在性能上比重量级锁好是因为本质上偏向锁和轻量级锁仅仅使用了CAS</li></ul></blockquote><hr><h4 id="1、偏向锁：仅适用于锁没有竞争的情况，假设共享变量只有一个线程访问。如果有其他线程竞争锁，锁则会膨胀为轻量级锁。"><a href="#1、偏向锁：仅适用于锁没有竞争的情况，假设共享变量只有一个线程访问。如果有其他线程竞争锁，锁则会膨胀为轻量级锁。" class="headerlink" title="1、偏向锁：仅适用于锁没有竞争的情况，假设共享变量只有一个线程访问。如果有其他线程竞争锁，锁则会膨胀为轻量级锁。"></a>1、偏向锁：仅适用于锁没有竞争的情况，假设共享变量只有一个线程访问。如果有其他线程竞争锁，锁则会膨胀为轻量级锁。</h4><h5 id="加锁方式："><a href="#加锁方式：" class="headerlink" title="加锁方式："></a>加锁方式：</h5><ol><li>初始时对象处于<code>biasable</code>状态，并且ThreadID为0即<code>biasable&amp;unbiased</code>状态。</li><li>当一个线程视图锁住处于<code>biasable&amp;unbiased</code>状态的对象时，通过一个CAS锁将自己的ThreadID放置到<code>Mark Word</code>中的相应位置，如果CAS操作成功则进入第三步，否则进入第四步。</li><li>当进入此步则表示所没有竞争，Object继续保持biasable状态，但是这是的ThreadID字段设置成了偏向锁所有者的ID，然后执行同步代码块。</li><li>当线程执行CAS获取偏向锁失败，表示在该锁对象上存在竞争并且这个时候另一个线程获得偏向锁的所有权。当到达全局安全点是获取偏向锁的线程被挂起，并将Object设置为<code>LightWeight Lock（轻量级锁）</code>状态并且Mark Word中的<code>Lock Record</code>指向刚才持有偏向锁线程的<code>Monitor record（监视器记录）</code>，最后被阻塞在安全点的线程被释放，进入到轻量级锁的执行路径中，同时被撤销偏向锁的线程继续往下执行同步代码。</li></ol><h6 id="解锁过程："><a href="#解锁过程：" class="headerlink" title="解锁过程："></a>解锁过程：</h6><ul><li>偏向锁解锁过程很简单，只需要测试下是否Object上的偏向锁模式是否还存在，如果存在则解锁成功不需要任何其他额外的操作。</li></ul><hr><h4 id="2、轻量级锁：适用于锁有多个竞争，但是在一个同步方法块周期中锁不存在竞争，如果在同步周期内有其他线程竞争锁，锁会膨胀为重量级锁。"><a href="#2、轻量级锁：适用于锁有多个竞争，但是在一个同步方法块周期中锁不存在竞争，如果在同步周期内有其他线程竞争锁，锁会膨胀为重量级锁。" class="headerlink" title="2、轻量级锁：适用于锁有多个竞争，但是在一个同步方法块周期中锁不存在竞争，如果在同步周期内有其他线程竞争锁，锁会膨胀为重量级锁。"></a>2、轻量级锁：适用于锁有多个竞争，但是在一个同步方法块周期中锁不存在竞争，如果在同步周期内有其他线程竞争锁，锁会膨胀为重量级锁。</h4><h6 id="加锁过程："><a href="#加锁过程：" class="headerlink" title="加锁过程："></a>加锁过程：</h6><ul><li>线程在执行同步块之前，JVM会现在当前线程的栈帧中创建用于存储锁记录的空间，并将对象头中的<code>Mark Word</code>复制到锁记录中，官方称为<code>Displaced Mark Word</code>，然后线程尝试使用CAS将对象头中的<code>Mark Word</code>替换为指向锁记录的指针。如果成功，当前线程获取锁，如果失败，则进行自旋获取锁，当自选获取锁仍然失败是，表示当前线程存在两条或两条以上线程竞争同一个锁，则轻量级锁膨胀成重量级锁。</li></ul><h6 id="解锁过程：-1"><a href="#解锁过程：-1" class="headerlink" title="解锁过程："></a>解锁过程：</h6><ul><li>轻量级解锁时，会使用原子的CAS操作来将<code>Displaced Mark Word</code>替换回到对象头，如果成功，则表示同步过程已完成。如果失败则表示有其他线程尝试过获取锁，则要将释放锁的同时唤醒被挂起的线程。</li></ul><hr><h4 id="3-重量级锁：竞争激烈的情况下使用重量级锁。"><a href="#3-重量级锁：竞争激烈的情况下使用重量级锁。" class="headerlink" title="3.重量级锁：竞争激烈的情况下使用重量级锁。"></a>3.重量级锁：竞争激烈的情况下使用重量级锁。</h4><ul><li>重量锁在JVM中又叫<code>对象监视器（Monitor）</code>，它很像C中的Mutex，除了具备Mutex(0|1)互斥的功能，它还负责实现了<code>Semaphore(信号量)</code>的功能，也就是说它至少包含一个竞争锁的队列，和一个<code>信号阻塞队列（wait队列）</code>，前者负责做互斥，后一个用于做线程同步。</li></ul><hr><h4 id="4、通过JVM参数来修改锁状态"><a href="#4、通过JVM参数来修改锁状态" class="headerlink" title="4、通过JVM参数来修改锁状态"></a>4、通过JVM参数来修改锁状态</h4><ul><li>偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟<code>-XX：BiasedLockingStartupDelay = 0</code>。如果你确定自己应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁<code>-XX:-UseBiasedLocking=false</code>，那么默认会进入轻量级锁状态。</li></ul><p>-</p><h4 id="5、自旋锁"><a href="#5、自旋锁" class="headerlink" title="5、自旋锁"></a>5、自旋锁</h4><ul><li><p>线程的阻塞和唤醒需要CPU从用户态转为核心态，频繁的阻塞和唤醒对CPU来说是一件负担很重的工作。同时我们可以发现，很多对象锁的锁定状态只会持续很短的一段时间，例如整数的自加操作，在很短的时间内阻塞并唤醒线程显然不值得，为此引入了自旋锁。</p></li><li><p>所谓“自旋”，就是让线程去执行一个无意义的循环，循环结束后再去重新竞争锁，如果竞争不到继续循环，循环过程中线程会一直处于running状态，但是基于JVM的线程调度，会出让时间片，所以其他线程依旧有申请锁和释放锁的机会。</p></li><li><p>自旋锁省去了阻塞锁的时间空间（队列的维护等）开销，但是长时间自旋就变成了“忙式等待”，忙式等待显然还不如阻塞锁。所以自旋的次数一般控制在一个范围内，例如10,100等，在超出这个范围后，自旋锁会升级为阻塞锁。</p></li></ul><hr><h4 id="6、自旋锁和轻量级锁的关系"><a href="#6、自旋锁和轻量级锁的关系" class="headerlink" title="6、自旋锁和轻量级锁的关系"></a>6、自旋锁和轻量级锁的关系</h4><ul><li>轻量级锁是一种状态，而自旋锁是一种获取锁的方式。线程首先会通过CAS获取锁，失败后通过自旋锁来尝试获取锁，再失败锁就膨胀为重量级锁。所以轻量级锁状态下可能会有自旋锁的参与（cas将对象头的标记指向锁记录指针失败的时候）</li></ul><hr><hr><h3 id="五、偏向锁，轻量级锁，重量级锁对比"><a href="#五、偏向锁，轻量级锁，重量级锁对比" class="headerlink" title="五、偏向锁，轻量级锁，重量级锁对比"></a>五、偏向锁，轻量级锁，重量级锁对比</h3><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗</td><td>适用于只有一个线程访问同步块场景</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度</td><td>如果始终得不到锁竞争的线程使用自旋会消耗CPU</td><td>追求响应时间,锁占用时间很短</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗CPU</td><td>线程阻塞，响应时间缓慢</td><td>追求吞吐量,锁占用时间较长</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      本文对synchronized及其优化相关知识点进行总结。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="锁" scheme="http://suiwo.xyz/tags/%E9%94%81/"/>
    
      <category term="Java多线程" scheme="http://suiwo.xyz/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="synchronized" scheme="http://suiwo.xyz/tags/synchronized/"/>
    
  </entry>
  
  <entry>
    <title>synchronized,lock和volatile的区别</title>
    <link href="http://suiwo.xyz/2019/04/20/synchronized,lock%E5%92%8Cvolatile%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://suiwo.xyz/2019/04/20/synchronized,lock和volatile的区别/</id>
    <published>2019-04-20T13:33:50.000Z</published>
    <updated>2019-04-20T15:52:00.045Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="https://www.jianshu.com/p/2344a3e68ca9" target="_blank" rel="noopener">https://www.jianshu.com/p/2344a3e68ca9</a><br><a href="https://cloud.tencent.com/developer/article/1369358" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1369358</a></p><hr><h3 id="1、synchronized"><a href="#1、synchronized" class="headerlink" title="1、synchronized"></a>1、synchronized</h3><p>Java语言的关键字，可用来给对象和方法或者代码块加锁，当它锁定一个方法或者一个代码块的时候，同一时刻最多只有一个线程执行这段代码。当两个并发线程访问同一个对象object中的这个加锁同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。然而，当一个线程访问object的一个加锁代码块时，另一个线程仍然可以访问该object中的非加锁代码块。</p><hr><h3 id="2、Lock"><a href="#2、Lock" class="headerlink" title="2、Lock"></a>2、Lock</h3><p><code>synchronized</code>是Java语言的关键字，是内置特性，而<code>ReentrantLock</code>是一个类(实现<code>Lock</code>接口的类)，通过该类可以实现线程的同步。<br>关于Lock的具体解析可以点击<a href="https://suiwo.xyz/2019/04/20/Java%E4%B8%ADLock%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/">传送门</a></p><hr><h3 id="3、volatile"><a href="#3、volatile" class="headerlink" title="3、volatile"></a>3、volatile</h3><p><code>volatile</code>是一个类型修饰符（type specifier）。它是被设计用来修饰被不同线程访问和修改的变量。确保本条指令不会因编译器的优化而省略，且要求每次直接读值。</p><hr><h3 id="4、synchronized-lock和volatile区别（可见性、原子性、有序性）"><a href="#4、synchronized-lock和volatile区别（可见性、原子性、有序性）" class="headerlink" title="4、synchronized, lock和volatile区别（可见性、原子性、有序性）"></a>4、synchronized, lock和volatile区别（可见性、原子性、有序性）</h3><table><thead><tr><th>属性</th><th>Synchronized</th><th>lock</th><th>volatile</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td>可见性</td><td>√</td><td>√</td><td>√</td><td style="text-align:left">变量被操作之后，能够快速写入内存，并提醒其他线程重读，加锁是通过一个一个执行保证了可见性。</td></tr><tr><td>原子性</td><td>√</td><td>√</td><td>×</td><td style="text-align:left">做的过程中，不要有相关的来打扰，不相关的我们也不关心，加锁是通过一个一个执行保证了流程不会被相关的打扰。</td></tr><tr><td>有序性</td><td>√</td><td>√</td><td>√</td><td style="text-align:left">在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</td></tr></tbody></table><hr><h3 id="5、synchronized与lock区别"><a href="#5、synchronized与lock区别" class="headerlink" title="5、synchronized与lock区别"></a>5、synchronized与lock区别</h3><table><thead><tr><th>类别</th><th>synchronized</th><th>Lock</th></tr></thead><tbody><tr><td>存在层次</td><td>Java的关键字，在jvm层面上</td><td>是一个类</td></tr><tr><td>锁的释放</td><td>1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</td><td>在finally中必须释放锁，不然容易造成线程死锁</td></tr><tr><td>锁的获取</td><td>假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td><td>分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待</td></tr><tr><td>锁状态</td><td>无法判断</td><td>可以判断</td></tr><tr><td>锁类型</td><td>可重入 不可中断 非公平</td><td>可重入 可判断 可公平（两者皆可）</td></tr><tr><td>性能</td><td>少量同步</td><td>大量同步</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      本文对synchronized,lock和volatile这三个多线程编程中经常遇到的关键词或者类进行比较。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="锁" scheme="http://suiwo.xyz/tags/%E9%94%81/"/>
    
      <category term="Java多线程" scheme="http://suiwo.xyz/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java中Lock接口解析</title>
    <link href="http://suiwo.xyz/2019/04/20/Java%E4%B8%ADLock%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/"/>
    <id>http://suiwo.xyz/2019/04/20/Java中Lock接口解析/</id>
    <published>2019-04-20T11:03:52.000Z</published>
    <updated>2019-04-20T15:33:35.986Z</updated>
    
    <content type="html"><![CDATA[<p>本文非原创，为转载文章，原文链接：<a href="https://www.jianshu.com/p/2344a3e68ca9" target="_blank" rel="noopener">https://www.jianshu.com/p/2344a3e68ca9</a></p><hr><hr><h3 id="一、Lock"><a href="#一、Lock" class="headerlink" title="一、Lock"></a>一、Lock</h3><blockquote><p>synchronized是Java语言的关键字，是内置特性，而ReentrantLock是一个类(实现Lock接口的类)，通过该类可以实现线程的同步。Lock是一个接口，源码很简单，主要是声明了四个方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> var1, TimeUnit var3)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-Lock一般的使用如下："><a href="#1-Lock一般的使用如下：" class="headerlink" title="1.Lock一般的使用如下："></a>1.Lock一般的使用如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lock lock= ...;<span class="comment">//获取锁</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//处理任务</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lock()</code>、<code>tryLock()</code>、<code>tryLock(long time, TimeUnit unit)</code>和<code>lockInterruptibly()</code>是用来获取锁的，<code>unLock()</code>方法是用来释放锁的，其放在finally块里执行，可以保证锁一定被释放，<code>newCondition</code>方法下面会做介绍（通过该方法可以生成一个Condition对象，而Condition是一个多线程间协调通信的工具类）。</p><hr><h4 id="2-Lock接口的主要方法介绍："><a href="#2-Lock接口的主要方法介绍：" class="headerlink" title="2.Lock接口的主要方法介绍："></a>2.Lock接口的主要方法介绍：</h4><ul><li><code>lock()</code>：获取不到锁就不罢休，否则线程一直处于<code>block</code>状态。</li><li><code>tryLock()</code>：尝试性地获取锁，不管有没有获取到都马上返回，拿到锁就返回<code>true</code>，不然就返回<code>false</code> 。</li><li><code>tryLock(long time, TimeUnit unit)</code>：如果获取不到锁，就等待一段时间，超时返回false。</li><li><code>lockInterruptibly()</code>：该方法稍微难理解一些，在说该方法之前，先说说线程的中断机制，每个线程都有一个中断标志，不过这里要分两种情况说明：<ol><li>线程在<code>sleep</code>、<code>wait</code>或者<code>join</code>， 这个时候如果有别的线程调用该线程的 <code>interrupt（）</code>方法，此线程会被唤醒并被要求处理<code>InterruptedException</code>。</li><li>如果线程处在运行状态， 则在调用该线程的<code>interrupt（）</code>方法时，不会响应该中断。<br><code>lockInterruptibly()</code>和上面的第一种情况是一样的， 线程在获取锁被阻塞时，如果调用<code>lockInterruptibly()</code>方法，该线程会被唤醒并被要求处理<code>InterruptedException</code>。下面给出一个响应中断的简单例子：</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">MyRunnable myRunnable = <span class="keyword">new</span> Test().new MyRunnable();</span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">"thread1"</span>);</span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">"thread2"</span>);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br><span class="line">thread2.interrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Lock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">lock.lockInterruptibly();</span><br><span class="line">System.out.println(Thread.currentThread().getName() +<span class="string">"获取了锁"</span>);</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(Thread.currentThread().getName() +<span class="string">"响应中断"</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">System.out.println(Thread.currentThread().getName() +<span class="string">"释放了锁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thread1获取了锁</span><br><span class="line">thread1释放了锁</span><br><span class="line">thread2响应中断</span><br></pre></td></tr></table></figure><p>thread2在响应中断后，在<code>finally</code>块里执行<code>unlock</code>方法时，会抛出<code>java.lang.IllegalMonitorStateException</code>异常（因为thread2并没有获取到锁，只是在等待获取锁的时候响应了中断，这时再释放锁就会抛出异常）。</p><hr><h4 id="3-newCondition-方法"><a href="#3-newCondition-方法" class="headerlink" title="3.newCondition()方法"></a>3.newCondition()方法</h4><p>上面简单介绍了ReentrantLock的使用，下面具体介绍使用ReentrantLock的中的newCondition方法实现一个生产者消费者的例子。<br>生产者、消费者<br>例子：两个线程A、B，A生产牙刷并将其放到一个缓冲队列中，B从缓冲队列中购买（消费）牙刷（说明：缓冲队列的大小是有限制的），这样就会出现如下两种情况。</p><ol><li>当缓冲队列已满时，A并不能再生产牙刷，只能等B从缓冲队列购买牙刷；</li><li>当缓冲队列为空时，B不能再从缓冲队列中购买牙刷，只能等A生产牙刷放到缓冲队列后才能购买。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToothBrushDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToothBrushBusiness toothBrushBusiness =</span><br><span class="line">                <span class="keyword">new</span> ToothBrushDemo().new ToothBrushBusiness();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                executeRunnable(toothBrushBusiness, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"牙刷生产者1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                executeRunnable(toothBrushBusiness, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"牙刷消费者1"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环执行50次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executeRunnable</span><span class="params">(ToothBrushBusiness toothBrushBusiness,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">boolean</span> isProducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isProducer) &#123;</span><br><span class="line">                toothBrushBusiness.produceToothBrush();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                toothBrushBusiness.consumeToothBrush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToothBrushBusiness</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个大小为10的牙刷缓冲队列</span></span><br><span class="line">        <span class="keyword">private</span> GoodQueue&lt;ToothBrush&gt; toothBrushQueue = <span class="keyword">new</span> GoodQueue&lt;ToothBrush&gt;(<span class="keyword">new</span> ToothBrush[<span class="number">10</span>]);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = lock.newCondition();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = lock.newCondition();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ToothBrushBusiness</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//生产牙刷</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceToothBrush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//牙刷缓冲队列已满,则生产牙刷线程等待</span></span><br><span class="line">                <span class="keyword">while</span> (toothBrushQueue.isFull()) &#123;</span><br><span class="line">                    notFull.await();</span><br><span class="line">                &#125;</span><br><span class="line">                ToothBrush toothBrush = <span class="keyword">new</span> ToothBrush(number);</span><br><span class="line">                toothBrushQueue.enQueue(toothBrush);</span><br><span class="line">                System.out.println(<span class="string">"生产: "</span> + toothBrush.toString());</span><br><span class="line">                number++;</span><br><span class="line">                <span class="comment">//牙刷缓冲队列加入牙刷后,唤醒消费牙刷线程</span></span><br><span class="line">                notEmpty.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (GoodQueueException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费牙刷</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeToothBrush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//牙刷缓冲队列为空,则消费牙刷线程等待</span></span><br><span class="line">                <span class="keyword">while</span> (toothBrushQueue.isEmpty()) &#123;</span><br><span class="line">                    notEmpty.await();</span><br><span class="line">                &#125;</span><br><span class="line">                ToothBrush toothBrush = toothBrushQueue.deQueue();</span><br><span class="line">                System.out.println(<span class="string">"消费: "</span> + toothBrush.toString());</span><br><span class="line">                <span class="comment">//从牙刷缓冲队列取出牙刷后,唤醒生产牙刷线程</span></span><br><span class="line">                notFull.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (GoodQueueException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToothBrush</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ToothBrush</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"牙刷编号&#123;"</span> +</span><br><span class="line">                    <span class="string">"number="</span> + number +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里缓冲队列的大小设成了10，定义了一个可重入锁lock，两个状态标记对象notEmpty，notFull，分别用来标记缓冲队列是否为空，是否已满。</p><ol><li>当缓冲队列已满时，调用notFull.await方法用来阻塞生产牙刷线程。</li><li>当缓冲队列为空时，调用notEmpty.await方法用来阻塞购买牙刷线程。</li><li>notEmpty.signal用来唤醒消费牙刷线程，notFull.signal用来唤醒生产牙刷线程。</li></ol><hr><h4 id="4-Object和Conditon对应关系如下："><a href="#4-Object和Conditon对应关系如下：" class="headerlink" title="4.Object和Conditon对应关系如下："></a>4.Object和Conditon对应关系如下：</h4><table><thead><tr><th></th><th>Object</th><th>Condition</th></tr></thead><tbody><tr><td>休眠</td><td>wait</td><td>await</td></tr><tr><td>唤醒特定线程</td><td>notify</td><td>signal</td></tr><tr><td>唤醒所有线程</td><td>notifyAll</td><td>signalAll</td></tr></tbody></table><p>对于同一个锁，我们可以创建多个Condition，就是多个监视器的意思。在不同的情况下使用不同的Condition，Condition是被绑定到Lock上的，要创建一个Lock的Condition必须用newCondition()方法。</p><hr><hr><h3 id="二、ReadWriteLock"><a href="#二、ReadWriteLock" class="headerlink" title="二、ReadWriteLock"></a>二、ReadWriteLock</h3><p>ReentrantLock（可重入锁）是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。</p><blockquote><p>synchronized和ReentrantLock都是可重入锁，可重入性举个简单的例子，当一个线程执行到某个synchronized方法时，比如说method1，而在method1中会调用另外一个synchronized方法method2，此时线程不必重新去申请锁，而是可以直接执行方法method2。</p></blockquote><hr><h4 id="ReentrantReadWriteLock简介"><a href="#ReentrantReadWriteLock简介" class="headerlink" title="ReentrantReadWriteLock简介"></a>ReentrantReadWriteLock简介</h4><p>上面的响应中断的例子已经地使用到了ReentrantLock，下面来介绍另外一种锁，可重入读写锁ReentrantReadWriteLock，该类实现了ReadWriteLock接口，该接口的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</span><br><span class="line"><span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ReentrantReadWriteLock会使用两把锁来解决问题，一个读锁，一个写锁。</p></blockquote><ul><li><h5 id="线程进入读锁的前提条件："><a href="#线程进入读锁的前提条件：" class="headerlink" title="线程进入读锁的前提条件："></a>线程进入读锁的前提条件：</h5><ol><li>没有其他线程的写锁</li><li>没有写请求，或者有写请求但调用线程和持有锁的线程是同一个线程</li></ol></li><li><h5 id="进入写锁的前提条件："><a href="#进入写锁的前提条件：" class="headerlink" title="进入写锁的前提条件："></a>进入写锁的前提条件：</h5><ol><li>没有其他线程的读锁</li><li>没有其他线程的写锁</li></ol></li><li><h5 id="需要提前了解的概念："><a href="#需要提前了解的概念：" class="headerlink" title="需要提前了解的概念："></a>需要提前了解的概念：</h5><ul><li>锁降级：从写锁变成读锁；</li><li>锁升级：从读锁变成写锁。</li></ul></li></ul><blockquote><p>读锁是可以被多线程共享的，写锁是单线程独占的。也就是说写锁的并发限制比读锁高，这可能就是升级/降级名称的来源。</p></blockquote><p>ReadWriteLock接口只有获取读锁和写锁的方法，而ReentrantReadWriteLock是实现了ReadWriteLock接口，接着对其应用场景做简单介绍。</p><hr><h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><p>假设一个共享的文件，其属性是可读，如果某个时间有100个线程在同时读取该文件，如果通过synchronized或者Lock来实现线程的同步访问，那么有个问题来了，当这100个线程的某个线程获取到了锁后，其它的线程都要等该线程释放了锁才能进行读操作，这样就会造成系统资源和时间极大的浪费，而ReentrantReadWriteLock正好解决了这个问题。下面给一个简单的例子，并根据代码以及输出结果做简要说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRunnable myRunnable = newTest().new MyRunnable();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(myRunnable, <span class="string">"thread1"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(myRunnable, <span class="string">"thread2"</span>);</span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(myRunnable, <span class="string">"thread3"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ReadLock lock = <span class="keyword">new</span> ReentrantReadWriteLock().readLock();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"正在进行读操作"</span>);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"读操作完毕"</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1读操作完毕</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3读操作完毕</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2读操作完毕</span><br></pre></td></tr></table></figure><p>从输出结果可以看出，三个线程并没有交替输出，这是因为这里只是读取了5次，但将读取次数i的值改成一个较大的数值如100000时，输出结果就会交替的出现。</p><hr><blockquote><p>看了好多人的博文，在我看来，这个Lock的用处就是可以细化加锁和解锁的操作，使锁操作更加直观，可控</p></blockquote>]]></content>
    
    <summary type="html">
    
      本文对Lock这一多线程中常见接口进行解析。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="锁" scheme="http://suiwo.xyz/tags/%E9%94%81/"/>
    
      <category term="Java多线程" scheme="http://suiwo.xyz/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="转载" scheme="http://suiwo.xyz/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>今天我也要当一个玄学boy</title>
    <link href="http://suiwo.xyz/2019/04/19/%E4%BB%8A%E5%A4%A9%E6%88%91%E4%B9%9F%E8%A6%81%E5%BD%93%E4%B8%80%E4%B8%AA%E7%8E%84%E5%AD%A6boy/"/>
    <id>http://suiwo.xyz/2019/04/19/今天我也要当一个玄学boy/</id>
    <published>2019-04-19T07:00:28.000Z</published>
    <updated>2019-04-19T07:50:12.789Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天在github上看到了一个优秀Java进阶知识点项目，顺带竟然还发现了一个优秀的歌曲《我的offer在哪里》，最近各种投递简历、笔试、面试，搞得头晕脑胀，身心俱疲，看来我也要玄学一下，顺便我博客的歌曲也正好换成这个，毕竟玄学就是第一生产力(ಡωಡ)。传送门一并送上~</p></blockquote><ul><li><a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener">互联网 Java 工程师进阶知识完全扫盲</a></li><li><a href="https://doocs.github.io/advanced-java/#/" target="_blank" rel="noopener">滚过来学习</a></li><li><a href="https://doocs.github.io/advanced-java/#/offer" target="_blank" rel="noopener">劳(quan)逸(kao)结(xuan)合(xue)</a></li></ul><p>网易云插件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1321616516&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><p>下面是歌词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">每天起床第一句 先给自己打个气</span><br><span class="line">每次刷新查成绩 都要说声保佑me</span><br><span class="line">魔镜魔镜告诉我 我的offer在哪里</span><br><span class="line">努力 我要努力 我要变成收割机</span><br><span class="line">offer offer</span><br><span class="line">我要变成收割机</span><br><span class="line">offer offer</span><br><span class="line"></span><br><span class="line">为了拿下BAT 天天提着一口气</span><br><span class="line">大厂小厂投简历 刷光面经笔试题</span><br><span class="line">天生我才难自弃 可惜面试都悲剧</span><br><span class="line">努力 我要努力 我要变成收割机</span><br><span class="line">Wow</span><br><span class="line"></span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">我的offer在哪里</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">拜拜 二次元 综艺直播动作片 言情玄幻宫斗剧</span><br><span class="line">拿走拿走别客气</span><br><span class="line"></span><br><span class="line">拜拜 铂金一 戒掉农药戒吃鸡 通宵开黑玩游戏</span><br><span class="line">别再熬夜伤身体</span><br><span class="line"></span><br><span class="line">来来 沉住气 专业课本重拾起 牛客网上刷真题</span><br><span class="line">保温杯里泡枸杞</span><br><span class="line"></span><br><span class="line">来来 深呼吸 对照镜子做练习</span><br><span class="line">单面群面全模拟 不拿offer不放弃</span><br><span class="line"></span><br><span class="line">为了拿下BAT 天天提着一口气</span><br><span class="line">大厂小厂投简历 刷光面经笔试题</span><br><span class="line">天生我才难自弃 可惜面试都悲剧</span><br><span class="line">努力 我要努力 我要变成收割机</span><br><span class="line">Wow</span><br><span class="line"></span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">我的offer在哪里</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">拜拜 二次元 综艺直播动作片 言情玄幻宫斗剧</span><br><span class="line">拿走拿走别客气</span><br><span class="line"></span><br><span class="line">拜拜 铂金一 戒掉农药戒吃鸡 通宵开黑玩游戏</span><br><span class="line">别再熬夜伤身体</span><br><span class="line"></span><br><span class="line">来来 沉住气 专业课本重拾起 牛客网上刷真题</span><br><span class="line">保温杯里泡枸杞</span><br><span class="line"></span><br><span class="line">来来 深呼吸 对照镜子做练习</span><br><span class="line">单面群面全模拟 不拿offer不放弃</span><br><span class="line"></span><br><span class="line">奇了怪了 小的时候明明是妈妈说</span><br><span class="line">考上大学就好惹 没烦恼</span><br><span class="line">直到熟悉的大学的寝室都住不上了 原来毕了业</span><br><span class="line">没人要 才烦恼</span><br><span class="line">希望 offer</span><br><span class="line">钱是多哒</span><br><span class="line">HR</span><br><span class="line">超nice哒</span><br><span class="line">不如跟着节奏没在怕的 努努力</span><br><span class="line">别让校招季卡住你 卡住你</span><br><span class="line">不拿offer不放弃</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">拜拜 二次元 综艺直播动作片 言情玄幻宫斗剧</span><br><span class="line">拿走拿走别客气</span><br><span class="line"></span><br><span class="line">拜拜 铂金一 戒掉农药戒吃鸡 通宵开黑玩游戏</span><br><span class="line">别再熬夜伤身体</span><br><span class="line"></span><br><span class="line">来来 沉住气 专业课本重拾起 牛客网上刷真题</span><br><span class="line">保温杯里泡枸杞</span><br><span class="line"></span><br><span class="line">来来 深呼吸 对照镜子做练习</span><br><span class="line">单面群面全模拟 不拿offer不放弃</span><br><span class="line">不放弃</span><br><span class="line">燃烧我的卡路里</span><br><span class="line">不放弃</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">我要变成收割机</span><br></pre></td></tr></table></figure></p><blockquote><p>文章刚写完就收到了七牛的笔试通知。。。。。看来玄学有望啊，哈哈哈哈哈哈，加油++，未来可期。</p></blockquote>]]></content>
    
    <summary type="html">
    
      emmmm，笔试面试越多，越觉得自己需要查漏补缺的地方还有很多，今天无意中发现了一首歌，很适合我，毕竟我的offer在哪里´&lt;_`，把博客的歌给换了，顺便期待玄学，加油加油！！！
    
    </summary>
    
      <category term="企图玄学" scheme="http://suiwo.xyz/categories/%E4%BC%81%E5%9B%BE%E7%8E%84%E5%AD%A6/"/>
    
    
      <category term="企图玄学" scheme="http://suiwo.xyz/tags/%E4%BC%81%E5%9B%BE%E7%8E%84%E5%AD%A6/"/>
    
      <category term="面试" scheme="http://suiwo.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题的基础总结（JVM篇）</title>
    <link href="http://suiwo.xyz/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88JVM%E7%AF%87%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/13/常见面试题的基础总结（JVM篇）/</id>
    <published>2019-04-13T04:27:05.000Z</published>
    <updated>2019-05-05T03:36:53.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、为什么Java一次编译，到处可运行"><a href="#1、为什么Java一次编译，到处可运行" class="headerlink" title="1、为什么Java一次编译，到处可运行"></a>1、为什么Java一次编译，到处可运行</h3><ul><li>因为只需要将java文件编译成字节码文件，在运行平台只要有JVM虚拟机就可以运行。这样Java在不同的平台也不需要重新编译，只需要虚拟机把字节码文件转换成具体平台的机器指令。</li></ul><hr><h3 id="2、JVM是如何加载文件的"><a href="#2、JVM是如何加载文件的" class="headerlink" title="2、JVM是如何加载文件的"></a>2、JVM是如何加载文件的</h3><ul><li>首先对于字节码文件，使用Class Loader将class文件记载到内存中。然后使用Exction Engine对命令进行解析。对于使用了不同开发文件的原生库我们可以使用Native interface来为Java所用。</li></ul><hr><h3 id="3、Java反射机制"><a href="#3、Java反射机制" class="headerlink" title="3、Java反射机制"></a>3、Java反射机制</h3><ul><li>对于任何一个类，我们都可以知道这个类的所有属性和方法，对弈任何一个对象我们都能调用他的任意方法和属性。这种动态获取信息以及动态调用对象的方法就是成为Java语言的反射机制。</li></ul><hr><h3 id="4、Class-Loader"><a href="#4、Class-Loader" class="headerlink" title="4、Class Loader"></a>4、Class Loader</h3><ul><li>Class Loader在Java中有着非常重要的作用，它主要工作在Class装载的加载过程，主要作用是从系统外获取Class的二进制数据流。所有的class都是由他来加载很系统，然后交给虚拟机进行连接初始化等操作。过程为<code>加载-链接（校验-准备-解析）-初始化</code></li></ul><hr><h3 id="5、loadClass和forName区别"><a href="#5、loadClass和forName区别" class="headerlink" title="5、loadClass和forName区别"></a>5、loadClass和forName区别</h3><ul><li>对于loadClass没有链接，而forName获取的是已经初始化的。优点就是没有链接初始化可以减少资源浪费，需要的时候再进行初始化。</li></ul><hr><h3 id="6、JVM内存模型"><a href="#6、JVM内存模型" class="headerlink" title="6、JVM内存模型"></a>6、JVM内存模型</h3><blockquote><p>主要分为程序计数器，虚拟机栈，本地方法栈  这几个是线程私有的。<br>而堆（包含常量池，数组和类对象）以及MetaSpace（类加载信息）是线程共享的。</p></blockquote><ul><li><p>程序计数器：记录当前线程执行的字节码行号的指示器，通过改变这个值来选取下一条需要执行的字节码指令。和线程是一对一的关系即“线程私有”的，对于Native方法计数为Undefine</p></li><li><p>Java虚拟机栈：包含Java方法执行的内存模型，包含多个栈帧。每个栈帧都含有局部变量表，操作栈还有动态连接，返回地址等数据</p></li></ul><p><img src="/images/常见面试题的基础总结（JVM篇）/4DDBB319-AF7D-441C-A222-DEC72ECEE2DA.png" alt="这里写图片描述"></p><ul><li><p>本地方法栈：与虚拟机栈相似，主要作用是标注了native方法</p></li><li><p>局部变量存储的是方法执行过程中的所有变量。<br>操作数栈：入栈、出栈、复制、交换、产生消费变量</p></li></ul><hr><h3 id="7、递归为什么会引发StackOverFlowError异常"><a href="#7、递归为什么会引发StackOverFlowError异常" class="headerlink" title="7、递归为什么会引发StackOverFlowError异常"></a>7、递归为什么会引发StackOverFlowError异常</h3><ul><li>多次递归一直入栈超出虚拟栈深度</li></ul><hr><h3 id="8、JVM三大性能调优参数"><a href="#8、JVM三大性能调优参数" class="headerlink" title="8、JVM三大性能调优参数"></a>8、JVM三大性能调优参数</h3><ul><li><code>-Xss</code>规定虚拟栈大大小</li><li><code>-Xms</code>堆的初始值</li><li><code>-Xmx</code>堆能达到的最大值</li></ul><hr><h3 id="9、Java内存模型中的堆和栈的区别-内存分配策略"><a href="#9、Java内存模型中的堆和栈的区别-内存分配策略" class="headerlink" title="9、Java内存模型中的堆和栈的区别-内存分配策略"></a>9、Java内存模型中的堆和栈的区别-内存分配策略</h3><ul><li>静态存储：编译时确定每个数据目标在运行时的存储空间需求</li><li>栈式存储：数据区需求在编译时未知，运行时模块入口确定</li><li>堆式存储：编译时或者运行时入口都无法确认，动态分配</li></ul><hr><h3 id="10、堆和栈的关系与区别"><a href="#10、堆和栈的关系与区别" class="headerlink" title="10、堆和栈的关系与区别"></a>10、堆和栈的关系与区别</h3><ul><li>联系:<ul><li>引用对象或者数组时，栈中变量保存的是堆中目标的首地址</li></ul></li><li>区别:<ul><li>管理方式:栈自动释放，堆需要GC</li><li>空间大小:栈比堆小</li><li>碎片相关:栈产生的随便远小于堆</li><li>分配方式:栈支持动态和静态分配，而堆仅支持动态分配</li><li>效率:因为底层数据结构不同所以栈效率高于堆</li></ul></li></ul><hr><h3 id="11、元空间、堆、栈、线程独占部分的联系——————内存角度"><a href="#11、元空间、堆、栈、线程独占部分的联系——————内存角度" class="headerlink" title="11、元空间、堆、栈、线程独占部分的联系——————内存角度"></a>11、元空间、堆、栈、线程独占部分的联系——————内存角度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span> + name);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        HelloWorld hw = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">        hw.setName(<span class="string">"test"</span>);</span><br><span class="line">        hw.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用参数<br>本地变量<br>局部变量</p><p><img src="/images/常见面试题的基础总结（JVM篇）/98DF0A18-E236-4284-84E8-4C06EB932965.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      本文对面试中常见的一些Java虚拟机相关知识点或者问题的总结
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="JVM" scheme="http://suiwo.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题的基础总结（Java多线程篇）</title>
    <link href="http://suiwo.xyz/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/13/常见面试题的基础总结（Java多线程篇）/</id>
    <published>2019-04-13T04:15:39.000Z</published>
    <updated>2019-04-18T01:23:02.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、进程和线程的区别"><a href="#1、进程和线程的区别" class="headerlink" title="1、进程和线程的区别"></a>1、进程和线程的区别</h3><ul><li>运行一个程序会产生一个进程，进程包括至少一个线程</li><li>每个进程对应一个JVM实例，多个线程则是共享JVM的堆</li><li>Java采用单线程编程模型，程序会自动创建主线程</li><li>主线程可以创建子线程，原则上要后于子线程完成执行</li></ul><h3 id="2、Thead和Runnable什么关系"><a href="#2、Thead和Runnable什么关系" class="headerlink" title="2、Thead和Runnable什么关系"></a>2、Thead和Runnable什么关系</h3><p>Thread是实现了Runnable接口的类，使得run支持多线程<br>应为类的单一继承原则，所以推荐多使用Runnable接口</p><h3 id="3、如何给run（）传参"><a href="#3、如何给run（）传参" class="headerlink" title="3、如何给run（）传参"></a>3、如何给run（）传参</h3><ul><li>构造函数传参</li><li>成员变量传参 比如常见的set方法</li><li>回调函数传参<br>参考：<a href="https://blog.csdn.net/saycheesenn/article/details/52956331" target="_blank" rel="noopener">https://blog.csdn.net/saycheesenn/article/details/52956331</a></li></ul><h3 id="4、如何实现处理线程的返回值"><a href="#4、如何实现处理线程的返回值" class="headerlink" title="4、如何实现处理线程的返回值"></a>4、如何实现处理线程的返回值</h3><ul><li>主线程等待法  主线程等待子线程执行完毕</li><li>使用join（）阻塞当前线程等待执行完毕</li><li>通过Callable接口实现：通过FutureTask或者线程池获取</li></ul><p>如果使用FutureTask可以使用<code>isDone</code>方法可以判断是否执行完成</p><p><img src="/images/常见面试题的基础总结（Java多线程篇）/050B0CED-D039-4035-8797-81F8E8EE7C9E.png" alt="这里写图片描述"></p><p>对于线程池</p><p><img src="/images/常见面试题的基础总结（Java多线程篇）/627EF93D-E74D-4B44-ABAC-B280E924CAC6.png" alt="这里写图片描述"></p><h3 id="5、线程的状态："><a href="#5、线程的状态：" class="headerlink" title="5、线程的状态："></a>5、线程的状态：</h3><ul><li>新建：创建后还未启动的线程</li><li>运行：包含Runnable和Ready状态</li><li>无限期等待：需要显式唤醒 例如没有设置Timeout参数的<code>Object.wait()</code> 和 <code>Thread.join()</code></li><li>期限等待：在一定时间后会由系统自动唤醒  例如<code>Thread.sleep()</code>，设置了参数的<code>Object.wait()</code>和 <code>Thread.join()</code></li><li>阻塞状态：等待获取排它锁</li><li>结束：已终止线程的状态，线程已经结束执行</li></ul><h3 id="6、sleep和wait区别"><a href="#6、sleep和wait区别" class="headerlink" title="6、sleep和wait区别"></a>6、sleep和wait区别</h3><ul><li>sleep是Thread类的方法，wait是Object类的方法</li><li>sleep可以在任何地方使用</li><li>wait只能在<code>synchronized</code>方法或者<code>synchronized</code>块中使用</li><li>wait是通知当前线程等待然后释放对象锁，notify也是，所以如果没有获取对象锁就是没有意义的了</li></ul><h3 id="7、notify和notifyAll的区别"><a href="#7、notify和notifyAll的区别" class="headerlink" title="7、notify和notifyAll的区别"></a>7、notify和notifyAll的区别</h3><p>首先建立两个概念：</p><blockquote><p>锁池：假设对象A已经拥有了某个对象的锁，而其他线程想要调用这个对象的synchronize方法，所以其他线程会进入阻塞状态进入锁池等待锁的释放</p></blockquote><blockquote><p>等待池：假设线程A调用了某个对象的wait方法，线程A就会释放当前的锁然后进入等待池，进入等待池的线程不会去竞争锁</p></blockquote><ul><li>notifyAll会让所有处于等待池的线程全部进入锁池去竞争获取锁的机会</li><li>notify只会随机选取一个处于等待池中的线程进入锁池去竞争获取锁得机会</li></ul><h3 id="8、Yield"><a href="#8、Yield" class="headerlink" title="8、Yield"></a>8、Yield</h3><ul><li>当调用Thread.yield方法函数时，会给线程调度器一个当前线程愿意让出CPU使用的暗示，但是线程调度器可能会忽略这个暗示</li></ul><h3 id="9、如何中断线程"><a href="#9、如何中断线程" class="headerlink" title="9、如何中断线程"></a>9、如何中断线程</h3><ul><li>通过调用<code>stop（）</code>方法停止线程，通过<code>suspend</code>和<code>resume</code>方法（已经弃用）</li><li>调用<code>interrupt()</code>，通知线程应该中断了<ul><li>如果线程处于被阻塞状态，那么线程将立即退出被阻塞状态，并抛出一个<code>InterruptedException</code>异常</li><li>如果线程处于正常活动状态，那么该线程的中断标志位将设置为true，被设置的中断标志位的线程将继续正常运行不受影响。</li></ul></li><li>正常运行的任务是，经常检查本线程的中断标志位，如果被设置了中断标志就自行停止线程</li><li>如果线程处于活动状态，那么僵该线程的中断标志位设置为true，将设置中断标志的线程将继续正常运行，不受影响。</li></ul><h3 id="10、线程状态间的转换"><a href="#10、线程状态间的转换" class="headerlink" title="10、线程状态间的转换"></a>10、线程状态间的转换</h3><p><img src="/images/常见面试题的基础总结（Java多线程篇）/C55F6694-EB22-47DE-AE3B-0C5A53383AEE.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      本文对面试中常见的一些Java多线程相关知识点或者问题的总结
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Java多线程" scheme="http://suiwo.xyz/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题的基础总结（JavaGC篇）</title>
    <link href="http://suiwo.xyz/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88JavaGC%E7%AF%87%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/13/常见面试题的基础总结（JavaGC篇）/</id>
    <published>2019-04-13T03:53:03.000Z</published>
    <updated>2019-05-05T07:32:19.665Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、Java的垃圾回收判断对象是否为垃圾有两种算法。"><a href="#1、Java的垃圾回收判断对象是否为垃圾有两种算法。" class="headerlink" title="1、Java的垃圾回收判断对象是否为垃圾有两种算法。"></a>1、Java的垃圾回收判断对象是否为垃圾有两种算法。</h3><ul><li>引用计数算法，本算法就是通过引用计数器来统计，当被引用+1，完成引用-1.任何对象实例引用为0时就可以当做垃圾收集，优点是执行效率高，问题是循环引用会出现问题。</li><li>可达性分析算法，通过判断对象的引用链来决定对象是否可达。如果不可达便被回收。可作为GC ROOT的对象有虚拟机栈中引用的对象、方法区中的常量引用的对象，方法区中的类静态属性引用的对象还有Native方法引用的对象，以及活跃线程的引用对象。</li></ul><hr><h3 id="2、常见的垃圾回收算法"><a href="#2、常见的垃圾回收算法" class="headerlink" title="2、常见的垃圾回收算法"></a>2、常见的垃圾回收算法</h3><p><img src="/images/常见面试题的基础总结（JavaGC篇）/87EED0DF-D176-4236-A8FF-7C19199A26BD.png" alt="这里写图片描述"></p><ul><li><p>标签-清除算法<br>对存活对象进行标记，清除是从头到尾进行线性遍历，回收不可达的对象内存。问题时容易碎片化。</p></li><li><p>复制算法<br>分为对象面和空闲面。存活的对象从对象面复制到空闲面，同时将对象面的清空。优点是解决了碎片化的问题，顺序分配内存简单高效，适用于对象存活率低的场景。年轻代因为存活较少，所以适合于用复制算法</p></li><li><p>标记-整理算法<br>标记就是从GC ROOT进行扫描对存活对象进行标记，然后移动所有存活的对象，且按照内存地址依次有序排列，然后将末端的内存地址以后的内存都进行回收。有点是避免了内存的不连续行，且不用进行两块内存互换，适用于存活率高德场景。</p></li><li><p>分代收集算法<br>分代收集算法就是多种算法的集合，其中年轻代使用复制算法，老年代使用标记整理算法。JDK7之前有新生代，老年代和永久代。JDK7之后只有新生代和老年代没有了新生代。</p><ul><li>年轻代分为eden区和两个servivor区，当进行垃圾回收时，存活的对象计数会加一，同时复制到servivor中的from区，然后将eden区清空，当第二次进行GC时eden区同理，但是servivor区仍然会计数加1然后复制到另一个servivor中。直到某个存活对象的技术超过某个值然后该对象进入老年代。</li><li>老年代常用的是标记-清除和标记整理算法,其中新生代老年代一半了比例为1:2</li></ul></li></ul><hr><h3 id="3、对于新生代如何晋升老年代有三种情况："><a href="#3、对于新生代如何晋升老年代有三种情况：" class="headerlink" title="3、对于新生代如何晋升老年代有三种情况："></a>3、对于新生代如何晋升老年代有三种情况：</h3><ul><li>经历了多次MinorGC后仍然存活</li><li>survivor区中存放不下大对象</li><li>新生成的大对象</li></ul><hr><h3 id="4、常见得到调优参数"><a href="#4、常见得到调优参数" class="headerlink" title="4、常见得到调优参数"></a>4、常见得到调优参数</h3><ul><li><code>-XX:SurvivorRatio</code> : Eden和Survivor的比值,默认8 : 1</li><li><code>-XX:NewRatio</code>: 老年代和年轻代内存大小的比例</li><li><code>-XX:MaxTenuringThreshold</code>:对象从年轻代晋升到老生代经过GC次数的最大阈值</li></ul><hr><h3 id="5、触发GC的条件为"><a href="#5、触发GC的条件为" class="headerlink" title="5、触发GC的条件为"></a>5、触发GC的条件为</h3><p>老年代的FULL GC还有MajorGC比年轻代的MinorGC慢，但是执行频率低。</p><ul><li>老年代空间不足</li><li>CMS GC后老年代不足</li><li>年轻代晋升老年代的空间大于剩余空间</li><li>调用了<code>System.gs()</code></li></ul><hr><h3 id="6、常见垃圾收集器"><a href="#6、常见垃圾收集器" class="headerlink" title="6、常见垃圾收集器"></a>6、常见垃圾收集器</h3><ul><li>ParNew收集器( -XX:+UseParNewGC ,复制算法)</li></ul><ol><li>多线程收集,其余的行为、特点和Serial收集器一样</li><li>单核执行效率不如Serial ,在多核下执行才有优势</li></ol><ul><li><p>CMS收集器(标记清除算法)</p><blockquote><p>垃圾回收线程几乎可以与用户线程同时工作，对停顿比较敏感，并且可以提供更强的硬件，如果JVM中存在较多存在时间较长的对象，更适合使用CMS。其中初始标记和重新标记是需要s-t-w</p><ol><li>初始标记：进入s-t-w</li><li>并发标记：并发追溯标记程序不会停顿</li><li>并发预清理：查找并发标记阶段新生代晋升老年代的对象</li><li>重新标记：暂停虚拟机扫描CMS堆中的剩余对象</li><li>并发清理，清理对象，程序不会停顿</li><li>并发重置：重置CMS收集器的数据结构</li></ol></blockquote></li><li><p>G1收集器 Garbage First收集器(复制+标记整理算法)</p><blockquote><p>本收集器是将整个Java堆内存划分为多个大小相等的region，然后新生代和老年代不进行了物理隔离。</p></blockquote></li><li>特点：<ol><li>并发和并行</li><li>分带收集</li><li>空间整合</li><li>可预测的停顿</li></ol></li></ul><hr><h3 id="7、强引用，软引用，弱引用，虚引用"><a href="#7、强引用，软引用，弱引用，虚引用" class="headerlink" title="7、强引用，软引用，弱引用，虚引用"></a>7、强引用，软引用，弱引用，虚引用</h3><p><img src="/images/常见面试题的基础总结（JavaGC篇）/6095F9F4-8194-436E-85BD-526F77C76259.png" alt="这里写图片描述"></p><ul><li><p>强引用是最常见的引用如： Object object = new Object（）；<br>即使内存不足也不会被回收，但是我们可以通过将对象设置为null来弱化引用，使其被回收。</p></li><li><p>软引用是对象处在有用但是非必须的状态，只有内存不足时才会被回收<br>可以实现高速缓存，使用方法如下：<br>SoftReference <string> softStr = new SoftReference(str);</string></p></li><li><p>弱引用比软引用更弱一下，然后GC时会被回收，适用于偶尔使用但是不影响垃圾收集的对象。</p></li></ul><hr><h3 id="8、其他的常见概念"><a href="#8、其他的常见概念" class="headerlink" title="8、其他的常见概念"></a>8、其他的常见概念</h3><h5 id="Stop-the-world"><a href="#Stop-the-world" class="headerlink" title="Stop-the-world"></a>Stop-the-world</h5><ul><li>在GC过程中会有Stop-the-world也就是执行GC时虚拟机会停止应用程序的执行，而且是在所有GC算法中都会发生，多数的GC通过减少s-t-w发生时间来提高程序性能</li></ul><h5 id="SafePoint"><a href="#SafePoint" class="headerlink" title="SafePoint"></a>SafePoint</h5><ul><li>分析过程中对象引用关系不会改变的点，常见的点有方法调用，循环跳转，异常跳转。安全点数量应该适中，过多过少都不好。</li></ul><h5 id="JVM有两种运行模式Server和Client"><a href="#JVM有两种运行模式Server和Client" class="headerlink" title="JVM有两种运行模式Server和Client"></a>JVM有两种运行模式Server和Client</h5><ul><li>常见两个模式server启动慢但是启动后性能更好，因为server底层是一个更大的虚拟机,可以使用<code>java -version</code>来查询是哪一种模式下的</li></ul><h5 id="Object的finalize方法"><a href="#Object的finalize方法" class="headerlink" title="Object的finalize方法"></a>Object的finalize方法</h5><ul><li>Object的finalize方法是不确定的，不一定会执行。 </li></ul>]]></content>
    
    <summary type="html">
    
      本文对面试中常见的一些Java垃圾回收相关知识点或者问题的总结
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Java垃圾回收" scheme="http://suiwo.xyz/tags/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题的基础总结（数据库篇）</title>
    <link href="http://suiwo.xyz/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/13/常见面试题的基础总结（数据库篇）/</id>
    <published>2019-04-13T03:18:17.000Z</published>
    <updated>2019-04-18T01:22:57.006Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、为什么要使用索引"><a href="#1、为什么要使用索引" class="headerlink" title="1、为什么要使用索引"></a>1、为什么要使用索引</h3><ul><li>为了快速查询数据</li></ul><hr><h3 id="2、如何创建索引"><a href="#2、如何创建索引" class="headerlink" title="2、如何创建索引"></a>2、如何创建索引</h3><ul><li><p>唯一索引<br><code>CREATE UNIQUE INDEX 索引名称 ON 表名称 (列名称)</code></p></li><li><p>简单索引<br><code>CREATE INDEX 索引名称 ON 表名称 (列名称)</code></p></li></ul><hr><h3 id="3、普通索引，唯一索引，主键索引，全文索引，组合索引"><a href="#3、普通索引，唯一索引，主键索引，全文索引，组合索引" class="headerlink" title="3、普通索引，唯一索引，主键索引，全文索引，组合索引"></a>3、普通索引，唯一索引，主键索引，全文索引，组合索引</h3><ul><li>一个表只能有一个主键索引，可以有多个唯一索引；</li><li>主键索引一定是唯一索引， 唯一索引不是主键索引；。</li><li>普通索引：最基本的索引，没有任何限制</li><li>唯一索引：与”普通索引”类似，不同的就是：索引列的值必须唯一，但允许有空值。</li><li>主键索引：它是一种特殊的唯一索引，不允许有空值。 </li><li>全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时好空间。</li><li>组合索引：为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。</li></ul><hr><h3 id="4、密集索引，稀疏索引"><a href="#4、密集索引，稀疏索引" class="headerlink" title="4、密集索引，稀疏索引"></a>4、密集索引，稀疏索引</h3><ul><li>密集索引：每个搜索码值都对应一个索引值</li><li>稀疏索引：只为某些值建立索引</li></ul><hr><h3 id="5、什么是最左前缀原则"><a href="#5、什么是最左前缀原则" class="headerlink" title="5、什么是最左前缀原则"></a>5、什么是最左前缀原则</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user2`</span> (</span><br><span class="line">  <span class="string">`userid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`usertype`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`userid`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`a_b_c_index`</span> (<span class="string">`username`</span>,<span class="string">`password`</span>,<span class="string">`usertype`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>上表中有一个联合索引，下面开始验证最左匹配原则。</p><ul><li>当存在username时会使用索引查询：<br><code>explain select * from user2 where username = &#39;1&#39; and password = &#39;1&#39;;</code></li><li>当没有username时，不会使用索引查询：<br><code>explain select * from user2 where password = &#39;1&#39;;</code></li><li>当有username，但顺序乱序时也可以使用索引：<br><code>explain select * from user2 where password = &#39;1&#39; and username = &#39;1&#39;;</code></li></ul><p>在最左匹配原则中，有如下说明：</p><ul><li>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如<code>a = 1 and b = 2 and c &gt; 3 and d = 4</code> 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</li><li>=和in可以乱序，比如<code>a = 1 and b = 2 and c = 3</code> 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</li><li>最左前缀的成因也不难理解：就是生成索引是先按照第一个索引，再按照第二个索引。如果只有第二个条件，此时第二个条件的索引是无序的。</li></ul><hr><h3 id="6、索引失效的几种情况"><a href="#6、索引失效的几种情况" class="headerlink" title="6、索引失效的几种情况"></a>6、索引失效的几种情况</h3><ul><li>如果条件中有or，即使其中有条件带索引也不会使用(这也是为什么尽量少用or的原因)要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引</li><li>对于多列索引，不是使用的第一部分，则不会使用索引</li><li>like查询以%开头</li><li>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引</li><li>如果mysql估计使用全表扫描要比使用索引快,则不使用索引</li></ul><hr><h3 id="7、主键，复合主键，联合主键"><a href="#7、主键，复合主键，联合主键" class="headerlink" title="7、主键，复合主键，联合主键"></a>7、主键，复合主键，联合主键</h3><ul><li>主键是能唯一表示一条数据的字段</li><li>复合主键是多个字段的组合</li><li>联合主键是多个表之间的通过给的数据表主键然后创建的联合主键</li></ul><hr><h3 id="8、常见索引的数据结构"><a href="#8、常见索引的数据结构" class="headerlink" title="8、常见索引的数据结构"></a>8、常见索引的数据结构</h3><p>二叉搜索树</p><p>B-tree<br><img src="/images/常见面试题的基础总结（数据库篇）/FB9AF3CC-91EE-45A0-84B8-252F43013CE8.png" alt="这里写图片描述"><br>b+-tree<br><img src="/images/常见面试题的基础总结（数据库篇）/4D1E71C6-E9E1-4818-82F2-E0B5B36647EE.png" alt="这里写图片描述"></p><p>Hash</p><hr><h3 id="9、b-树和Hash优缺点"><a href="#9、b-树和Hash优缺点" class="headerlink" title="9、b+树和Hash优缺点"></a>9、b+树和Hash优缺点</h3><ul><li>B+树的磁盘读写代价更低</li><li>B +树的查询效率更加稳定</li><li>B+树更有利于对数据库的扫描</li><li>Hash仅仅能满足“=”, “IN”,</li><li>Hash不能使用范围查询</li><li>Hash无法被用来避免数据的排序操作</li><li>Hash不能利用部分索引键查询</li><li>Hash不能避免表扫描</li><li>Hash遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高</li></ul><hr><h3 id="10、b数和b-数区别"><a href="#10、b数和b-数区别" class="headerlink" title="10、b数和b+数区别"></a>10、b数和b+数区别</h3><ul><li>b数每个节点都存储key和data，叶子节点的指针为null</li><li>b+数只有叶子节点存储data，叶子节点包含了这个数的所有键值，叶子节点不存值</li></ul><hr><h3 id="11、如何定位慢查询"><a href="#11、如何定位慢查询" class="headerlink" title="11、如何定位慢查询"></a>11、如何定位慢查询</h3><ul><li>根据慢日志查询SQL语句 使用 show variables like ‘%query%’ 可以将slow_query_log选项开启，同时可以查看慢日志的路径</li><li>使用Explain关键字，即在普通SQL语句前加上Explain，可通过查看extra项和type项看是否使用到了索引</li><li>最左匹配原则</li></ul><hr><h3 id="12、索引是建立的越多越好吗"><a href="#12、索引是建立的越多越好吗" class="headerlink" title="12、索引是建立的越多越好吗"></a>12、索引是建立的越多越好吗</h3><ul><li>数据量小不需要索引</li><li>经常变更同时也需要维护索引，意味着更多的维护成本</li><li>更多索引以为这更多的空间</li></ul><hr><h3 id="13、InnoDB和MyISAM区别以及各自适合场景"><a href="#13、InnoDB和MyISAM区别以及各自适合场景" class="headerlink" title="13、InnoDB和MyISAM区别以及各自适合场景"></a>13、InnoDB和MyISAM区别以及各自适合场景</h3><ul><li>InnoDb数据索引在一个文件中。MyISAM数据与索引为两个文件</li><li>MyISAM默认用的是表级锁,不支持行级锁</li><li>InnoDB默认用的是行级锁,也支持表级锁</li><li>MyISAM适合于频繁执行全表count语句，同时对增删改频率不高，查询频繁，没有事务</li><li>InnoDB适合于增删改查都相当频繁，同时可靠性要求比较高，要求支持事务</li></ul><hr><h3 id="14、数据库不同隔离级别下遇到的问题"><a href="#14、数据库不同隔离级别下遇到的问题" class="headerlink" title="14、数据库不同隔离级别下遇到的问题"></a>14、数据库不同隔离级别下遇到的问题</h3><p>本问题可参考本博客之前的文章：<a href="https://suiwo.xyz/2019/02/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6/">传送门</a></p><p><img src="/images/常见面试题的基础总结（数据库篇）/A86B95F0-68CE-4201-90B5-8AFA5D50005E.png" alt="这里写图片描述"></p><hr><h3 id="15、事务的ACID"><a href="#15、事务的ACID" class="headerlink" title="15、事务的ACID"></a>15、事务的ACID</h3><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><hr><h3 id="16、数据库的优化"><a href="#16、数据库的优化" class="headerlink" title="16、数据库的优化"></a>16、数据库的优化</h3><h5 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h5><ul><li>读写分离从字面意思就可以理解，就是把对数据库的读操作和写操作分离开。读写分离在网站发展初期可以一定程度上缓解读写并发时产生锁的问题，将读写压力分担到多台服务器上，通常用于读远大于写的场景。</li><li>读写分离的基本原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。单表的数据量限制，当单表数据量到一定条数之后数据库性能会显著下降。数据多了之后，对数据库的读、写就会很多。分库减少单台数据库的压力。</li></ul><h5 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h5><ul><li>主从复制，是用来建立一个和主数据库完全一样的数据库环境，称为从数据库；</li><li>主数据库一般是实时的业务数据库，从数据库的作用和使用场合一般有几个：<ul><li>一是作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作；</li><li>二是可在从数据库作备份、数据统计等工作，这样不影响主数据库的性能；</li></ul></li></ul><hr><h3 id="17、InnoDB如何手动设置共享锁和排它锁"><a href="#17、InnoDB如何手动设置共享锁和排它锁" class="headerlink" title="17、InnoDB如何手动设置共享锁和排它锁"></a>17、InnoDB如何手动设置共享锁和排它锁</h3><ul><li>共享锁也叫读锁，简称S锁，原理：一个事务获取了一个数据行的共享锁，其他事务能获得该行对应的共享锁，但不能获得排他锁，即一个事务在读取一个数据行的时候，其他事务也可以读，但不能对该数据行进行增删改。</li><li>排他锁也叫写锁，简称x锁，原理：一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁（排他锁或者共享锁），即一个事务在读取一个数据行的时候，其他事务不能对该数据行进行增删改查。<h5 id="如何设置共享锁和排他锁？"><a href="#如何设置共享锁和排他锁？" class="headerlink" title="如何设置共享锁和排他锁？"></a>如何设置共享锁和排他锁？</h5></li><li>设置共享锁：<code>SELECT ... LOCK IN SHARE MODE;</code></li><li>设置排他锁：<code>SELECT ... FOR UPDATE;</code></li></ul><hr><h3 id="18、redis基础数据结构"><a href="#18、redis基础数据结构" class="headerlink" title="18、redis基础数据结构"></a>18、redis基础数据结构</h3><blockquote><p>redis相关问题可参考之前的一些文章：</p><ul><li><a href="https://suiwo.xyz/2019/02/14/redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97/">redis如何实现异步队列</a></li><li><a href="https://suiwo.xyz/2019/02/13/redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/">redis如何实现分布式锁</a></li></ul></blockquote><ul><li><p>string：是一个可变的字节数组</p><ul><li><code>set name zhangsan</code>（增加）</li><li><code>get name</code>（删除）</li><li><code>strlen name</code>（获取长度）</li><li><code>getrange name 1 10</code>（获取1-10的字符）</li><li><code>append name ishahaha</code>（追加字符，此时name 为 zhangsanis）</li><li><code>decrby name 100</code>（name的值减100）</li><li><code>Incrby name 100</code>（name的值加100）</li></ul></li><li><p>List：是一个列表数据结构，且是双向链表<br>常见操作：<code>rpop</code>，<code>rpush</code>，<code>lpop</code>，<code>lpush</code>，<code>llen（长度）</code>，<code>lrange</code>，<code>lset name 1 lisi（将list的第二个元素修改成lisi）</code>，<code>lrem（删除）</code></p></li><li><p>Hash：等价于HashMap<br>常见操作：<code>hset（添加一个元素）</code>，<code>hmset（添加多个元素）</code>，<code>hget（获取一个元素）</code>，<code>hmget（获取多个元素）</code>，<code>hkeys（获取所有键）</code>，<code>hvals（获取所有值）</code>，<code>hdel（删除元素）</code></p></li><li><p>Set：类似于HashSet，所以value指向同一个键。<br>常见操作：<code>sadd（添加）</code>，<code>smembers（获取所有value）</code>，<code>scard（获取长度）</code>，<code>srandmember（获取随机元素）</code>，<code>srem（删除元素）</code>，<code>spop（随机删除元素）</code>，<code>sismember（判断元素是否存在）</code></p></li><li><p>Sortset：类似于优先队列set中每一个元素有一个score<br>常见操作：<code>zadd（添加）</code>，<code>zcard（获取长度）</code>，<code>zrem（删除元素）</code>，<code>zremrangebyrank（根据排名删除）</code>，<code>zremrangebyscore（根据成绩删除）</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      本文对面试中常见的一些数据库相关知识点或者问题的总结
    
    </summary>
    
      <category term="数据库" scheme="http://suiwo.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://suiwo.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="面试" scheme="http://suiwo.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题的基础总结（计网篇）</title>
    <link href="http://suiwo.xyz/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E8%AE%A1%E7%BD%91%E7%AF%87%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/13/常见面试题的基础总结（计网篇）/</id>
    <published>2019-04-13T02:16:12.000Z</published>
    <updated>2019-04-18T01:23:51.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、OSI七层协议模型-TCP-IP四层体系结构"><a href="#1、OSI七层协议模型-TCP-IP四层体系结构" class="headerlink" title="1、OSI七层协议模型    TCP/IP四层体系结构"></a>1、OSI七层协议模型    TCP/IP四层体系结构</h3><table><thead><tr><th>OSI七层协议模型</th><th>TCP/IP四层体系结构</th><th>对应网络协议</th></tr></thead><tbody><tr><td>应用层</td><td>应用层（对应OSI应用层、表示层、会话层）</td><td>HTTP、TFTP、NFS、WAIS、SMTP</td></tr><tr><td>表示层</td><td></td><td>Telnet、Rlogin、SNMP、Gopher</td></tr><tr><td>会话层</td><td></td><td>SMTP、DNS</td></tr><tr><td>传输层</td><td>传输层</td><td>TCP、UDP</td></tr><tr><td>网络层</td><td></td><td>IP、ICMP、ARP、RARP、AKP、UUCP</td></tr><tr><td>数据链路层</td><td>网络接口层（对应OSI数据链路层、物理层）</td><td>FDDI、Ethernet、Arpanet、PDN、SLIP、PPP</td></tr><tr><td>物理层</td><td></td><td>IEEE 802.1A、IEEE 802.2到IEEE 802.11</td></tr></tbody></table><hr><h3 id="2、TCP三次握手"><a href="#2、TCP三次握手" class="headerlink" title="2、TCP三次握手:"></a>2、TCP三次握手:</h3><ul><li><p>C端:客户端; S服务端</p></li><li><p>第一次握手: C端向S端发送SYN数据包〈SYN=1，序列号=x)。A迸入SYN_ SENT状志，等待服务端确认。</p></li><li>第二次握手: S端收到SYN数据包并进行确认(SYN=1, ACK number=x+1, ACK=1,序列号=y)，再发送SYN+ACK数据包给C端，S端迸入SYN_ RCVD状志。</li><li>第三次握手: C端收到SYN+ACK数据包，如果ACK number=x+1,将ACK number设置为y+1, ACK=1，向S端发送ACK数据包，C端和S端都进入ESTABLISHED (已连接)状志。</li><li>简述:我连你，你同意，我再连你（成功）。</li></ul><p><img src="/images/常见面试题的基础总结（计网篇）/00B30835-5B39-4B03-994C-8480EBFCD6B6.png" alt="这里写图片描述"></p><h5 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手?"></a>为什么要三次握手?</h5><p>为了防止已失效的连接请求报文段突然又传到了服务端，产生错误。同时保证发送双方的消息发送与接收功能都可用。</p><blockquote><ul><li>解释:报文段已发送，在某个网络节点发生滞留，导致连接释放,释放后报文才到达另一端。</li><li>例如: C端发送SYN报文给S端，连接被释放后，S端才收到报文并误认为这是C端的新连接，给C端发送SYN+ACK报文，这是无法得到C端回应的，因为连接已无效。</li></ul></blockquote><hr><h3 id="3、TCP四次挥手"><a href="#3、TCP四次挥手" class="headerlink" title="3、TCP四次挥手"></a>3、TCP四次挥手</h3><ul><li>第一次挥手: A给B发送FIN报文(序列号=x)，A进入FIN_WAIT_1状态，表示A没有数据给B了。</li><li>第二次挥手: B收到FIN报文后，给A发送ACK报文(ACK=x+1)，A进入FIN_WAIT_2状态,B同意A关闭请求。</li><li>第三次挥手: B向A发送FIN报文(序列号=y)，请求关闭连接，B进入LAST_ACK状态。</li><li>第四次挥手: A收到FIN报文,向B发送ACK报文(ACK=y+1) , A进入TIME_WAIT状态，B收到ACK报文后关闭连接，A在2MSL后依然没收到回复，证明B端己关闭，A就可以关闭连接了。</li><li>简述:我要关闭，你同意，你要关闭，我同意你先关闭我再关闭。</li></ul><p><img src="/images/常见面试题的基础总结（计网篇）/41B7433B-AC8B-4F56-94B7-7A0F773F8362.png" alt="这里写图片描述"></p><h5 id="为什么TCP要四次挥手"><a href="#为什么TCP要四次挥手" class="headerlink" title="为什么TCP要四次挥手?"></a>为什么TCP要四次挥手?</h5><ul><li>TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。</li><li>TCP是全双工模式，主机1请求关闭连接，不再发送数据了，但是可以接收主机2的数据，主机2不再发送数据了，才算关闭，这样减小了丢失数据的风险。</li></ul><hr><h3 id="4、TIME-WAIT和CLOSE-TIME原因"><a href="#4、TIME-WAIT和CLOSE-TIME原因" class="headerlink" title="4、TIME-WAIT和CLOSE-TIME原因"></a>4、TIME-WAIT和CLOSE-TIME原因</h3><p>TCP要保证在所有可能的情况下使得所有的数据都能够被正确送达。当你关闭一个socket时，主动关闭一端的socket将进入TIME_WAIT状态，而被动关闭一方则转入CLOSED状态，这的确能够保证所有的数据都被传输。当一个socket关闭的时候，是通过两端四次握手完成的，当一端调用close()时，就说明本端没有数据要发送了。这好似看来在握手完成以后，socket就都可以处于初始的CLOSED状态了，其实不然。原因是这样安排状态有两个问题， 首先，我们没有任何机制保证最后的一个ACK能够正常传输，第二，网络上仍然有可能有残余的数据包(wandering duplicates)，我们也必须能够正常处理。</p><hr><h3 id="5、HTTP常见请求"><a href="#5、HTTP常见请求" class="headerlink" title="5、HTTP常见请求"></a>5、HTTP常见请求</h3><ul><li>Get 请求指定页面</li><li>Head 获取报头</li><li>Post 请求可能会导致资源建立</li><li>Put 修改资源</li><li>Delete 删除资源</li><li>Options 获取服务器性能</li></ul><hr><h3 id="6、HTTP常见状态码"><a href="#6、HTTP常见状态码" class="headerlink" title="6、HTTP常见状态码"></a>6、HTTP常见状态码</h3><ul><li>1xx    信息，服务器收到请求，需要请求者继续执行操作</li><li>2xx    成功，操作被成功接收并处理</li><li>3xx    重定向，需要进一步的操作以完成请求</li><li>4xx    客户端错误，请求包含语法错误或无法完成请求</li><li>5xx    服务器错误，服务器在处理请求的过程中发生了错误</li></ul><hr><h3 id="7、HTTP与HTTPS"><a href="#7、HTTP与HTTPS" class="headerlink" title="7、HTTP与HTTPS"></a>7、HTTP与HTTPS</h3><p>HTTP使用80端口，HTTPS使用443端口，其中HTTPS是由SSL+HTTP协议构建的可进行加密传输，身份认证的网络协议。SSL是安全套接层在传输层</p><hr><h3 id="8、HTTP-keep-alive"><a href="#8、HTTP-keep-alive" class="headerlink" title="8、HTTP keep-alive"></a>8、HTTP keep-alive</h3><p>参考：<a href="https://segmentfault.com/a/1190000012894416" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012894416</a><br>我们知道HTTP协议采用“请求-应答”模式，当使用普通模式，即非KeepAlive模式时，每个请求/应答客户和服务器都要新建一个连接，完成 之后立即断开连接（HTTP协议为无连接的协议）；当使用Keep-Alive模式（又称持久连接、连接重用）时，Keep-Alive功能使客户端到服 务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p><hr><h3 id="9、TCP-keepalive"><a href="#9、TCP-keepalive" class="headerlink" title="9、TCP keepalive"></a>9、TCP keepalive</h3><p> 概念:</p><ul><li>在使用TCP长连接（复用已建立TCP连接）的场景下，需要对TCP连接进行保活，避免被网关干掉连接。<br>在应用层，可以通过定时发送心跳包的方式实现。而Linux已提供的TCP KEEPALIVE，在应用层可不关心心跳包何时发送、发送什么内容，由OS管理：OS会在该TCP连接上定时发送探测包，探测包既起到连接保活的作用，也能自动检测连接的有效性，并自动关闭无效连接。</li></ul><p>原理:</p><ul><li>建立TCP连接时，就有定时器与之绑定，其中的一些定时器就用于处理keepalive过程。当keepalive定时器到0的时候，便会给对端发送一个不包含数据部分的keepalive探测包（probe packet），如果收到了keepalive探测包的回复消息，那就可以断定连接依然是OK的。如果我们没有收到对端keepalive探测包的回复消息，我们便可以断定连接已经不可用，进而采取一些措施。但Keepalive会额外产生一些网络数据包外，这些包将加大网络流量，对路由器和防火墙造成一定的负担。</li></ul><hr><h3 id="10、TCP滑动窗口"><a href="#10、TCP滑动窗口" class="headerlink" title="10、TCP滑动窗口"></a>10、TCP滑动窗口</h3><p>TCP滑动窗口具有拥塞控制和保证可靠性的功能</p><ul><li>对于拥塞控制，滑动窗口是可变大小的，如果滑动窗口发生拥塞控制则将窗口大小置为1，然后对长度进行2的指数增长，直到窗口大小可满足数据传输或者大小到达阈值。</li><li>对于可靠性，接收双方具有同样大小的窗口，然后对数据进行编号，如果接收端没有收到某部分信息就会发送请求给发送方然后重新发送未接收到的部分。</li></ul><hr><h3 id="11、TCP-UDP比较"><a href="#11、TCP-UDP比较" class="headerlink" title="11、TCP/UDP比较"></a>11、TCP/UDP比较</h3><table><thead><tr><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>TCP面向连接</td><td>UDP无连接</td></tr><tr><td>TCP是无界的</td><td>UDP是有界的</td></tr><tr><td>TCP可靠</td><td>UDP不可靠</td></tr><tr><td>TCP具有拥塞控制</td><td>UDP没有</td></tr><tr><td>TCP效率低</td><td>UDP效率高</td></tr><tr><td>TCP适合一对一连接</td><td>UDP适合广播、多播</td></tr><tr><td>TCP结构复杂</td><td>UDP结构简单</td></tr><tr><td>TCP能保证发送顺序</td><td>UDP无法保证</td></tr><tr><td>TCP使用字节流</td><td>UDP面向数据报</td></tr></tbody></table><ul><li>为什么TCP是无界的：例如TCP可能将一个连续数据分成多块发送，此时无法确认数据大小。</li><li>为什么UDP不可靠：因为TCP是面向连接的具有重传等机制，而UDP不会重传。</li><li>数据报：封装数据，目的地址，源地址，端口号</li></ul><hr><h3 id="12、Cookie、Session"><a href="#12、Cookie、Session" class="headerlink" title="12、Cookie、Session"></a>12、Cookie、Session</h3><ul><li>Cookie是由服务器端生成，发送给User-Agent（一般是浏览器），浏览器会将Cookie的key/value保存到某个目录下的文本文件内，下次请求同一网站时就发送该Cookie给服务器（前提是浏览器设置为启用cookie）。</li><li>Cookie名称和值可以由服务器端开发自己定义，这样服务器可以知道该用户是否合法用户以及是否需要重新登录等，服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。</li></ul><h5 id="Cookie和Session的区别与关系"><a href="#Cookie和Session的区别与关系" class="headerlink" title="Cookie和Session的区别与关系"></a>Cookie和Session的区别与关系</h5><ul><li>session 在服务器端，cookie 在客户端（浏览器）</li><li>session 默认被存在在服务器的一个文件里（不是内存）</li><li>session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）</li><li>session 可以放在 文件、数据库、或内存中都可以。</li><li>用户验证这种场合一般会用 session</li><li>由于http协议是无状态的，服务器需要记录用户的状态，所以cookie和session都是用来保持状态的方案，session又依赖cookie。</li></ul><hr><h3 id="13、Token"><a href="#13、Token" class="headerlink" title="13、Token"></a>13、Token</h3><h5 id="（1）Session和Token的区别"><a href="#（1）Session和Token的区别" class="headerlink" title="（1）Session和Token的区别"></a>（1）Session和Token的区别</h5><ul><li>session一般在cookie中传递而token一般放在header中</li></ul><h5 id="（2）Token的使用-Json-Web-Token"><a href="#（2）Token的使用-Json-Web-Token" class="headerlink" title="（2）Token的使用 Json Web Token"></a>（2）Token的使用 Json Web Token</h5><ul><li>jwt的token包括三个部分，分别是header，payload，还有signature，header就是放的类型还有加密方式，然后payload主要就是放签发信息，签发时间还有身份权限等自定义的信息，最后一个签名就是对前两部分进行加密，防止被人篡改，将用户的非私密信息传给前端。</li></ul><hr><h3 id="14、当打开一个浏览器输入url到请求道页面的整个过程"><a href="#14、当打开一个浏览器输入url到请求道页面的整个过程" class="headerlink" title="14、当打开一个浏览器输入url到请求道页面的整个过程"></a>14、当打开一个浏览器输入url到请求道页面的整个过程</h3><ol><li>DNS解析 将域名转化为IP地址</li><li>TCP连接 与服务器建立连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><hr><h3 id="15、restful常见请求方法"><a href="#15、restful常见请求方法" class="headerlink" title="15、restful常见请求方法"></a>15、restful常见请求方法</h3><blockquote><p>restfual分别有GET \ POST \ PUT \ DELETE \ TRACE \ HEAD \ OPTIONS \  PATCH \ 等几种请求方法</p></blockquote><ul><li>POST : POST请求通常用来创建一个实体，也就是一个没有ID的资源。</li><li>GET：从服务器取回数据（只是取回数据，而不会产生其他的影响）。这是一个幂等的方法（译者注：使用相同的参数重复执行，应该能够获取到相同的结果）。</li><li>PUT  ：PUT请求和POST请求类似，但是一般用来更新一个已有的实体。通过把已经存在的资源的ID和新的实体用PUT请求上传的服务器，来更新资源。</li><li>DELETE ： DELETE方法用来从服务器上删除资源。和PUT类似，你需要把要删除的资源的ID上传给服务器。</li></ul><hr><h3 id="16、其他问题"><a href="#16、其他问题" class="headerlink" title="16、其他问题"></a>16、其他问题</h3><ul><li><p>有没有网络编程，有，怎么看连接状态？netstat，有哪些？ESTABLISHED，LISTEN等等，有异常情况吗？TIME_WAIT很多，为什么？大量短链接</p></li><li><p>奖品秒杀模型设计</p></li></ul>]]></content>
    
    <summary type="html">
    
      昨天参加了华为的面试，其实本打算面试前就汇总好发到博客上，但是结果时间比较紧张，就没有把总结好的Word文档的内容发到博客。昨天的华为面试表现个人感觉不好，性格测试也可能挂了，希望能有个好结果吧（面试完华为许愿一波，希望可以拿到offer，虽然已经做好了最坏的打算）
    
    </summary>
    
      <category term="计算机网络" scheme="http://suiwo.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="面试" scheme="http://suiwo.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="计算机网络" scheme="http://suiwo.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>重温Java网络编程（实现简易TCP，UDP应用）</title>
    <link href="http://suiwo.xyz/2019/04/07/%E9%87%8D%E6%B8%A9Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93TCP%EF%BC%8CUDP%E5%BA%94%E7%94%A8%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/07/重温Java网络编程（实现简易TCP，UDP应用）/</id>
    <published>2019-04-07T15:31:37.000Z</published>
    <updated>2019-04-08T10:19:04.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于TCP以及UDP的相关知识，在此就不做相关总结，如有需要可以参考<a href="https://blog.csdn.net/li_ning_/article/details/52117463" target="_blank" rel="noopener">https://blog.csdn.net/li_ning_/article/details/52117463</a></p></blockquote><hr><hr><h3 id="一、使用TCP实现一个简易登录功能"><a href="#一、使用TCP实现一个简易登录功能" class="headerlink" title="一、使用TCP实现一个简易登录功能"></a>一、使用TCP实现一个简易登录功能</h3><h4 id="1-创建一个实体类-User-java"><a href="#1-创建一个实体类-User-java" class="headerlink" title="1.创建一个实体类 User.java"></a>1.创建一个实体类 User.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-服务器端代码-LoginServer-java"><a href="#2-服务器端代码-LoginServer-java" class="headerlink" title="2.服务器端代码 LoginServer.java"></a>2.服务器端代码 LoginServer.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个ServerSocket，指定监听的端口</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//使用ServerSocket监听用户请求</span></span><br><span class="line">            Socket socket = serverSocket.accept();<span class="comment">//如果没有请求则阻塞</span></span><br><span class="line">            <span class="comment">//启动一个登录线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> LoginThread(socket)).start();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"你是访问该服务器的第"</span> + ++i + <span class="string">"个用户,你的ip地址为"</span></span><br><span class="line">                    + socket.getInetAddress().getHostAddress());</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-登录线程代码-LoginThread-java"><a href="#3-登录线程代码-LoginThread-java" class="headerlink" title="3.登录线程代码 LoginThread.java"></a>3.登录线程代码 LoginThread.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    LoginThread(Socket socket) &#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理用户请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//接收来自客户端的数据并输出</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">            User user = (User) objectInputStream.readObject();</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送反馈</span></span><br><span class="line">            DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"zhangsan"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"1234"</span>.equals(user.getPassword())) &#123;</span><br><span class="line">                dataOutputStream.writeUTF(<span class="string">"登录成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dataOutputStream.writeUTF(<span class="string">"登录失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            dataOutputStream.close();</span><br><span class="line">            objectInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-客户端代码-LoginClient-java"><a href="#4-客户端代码-LoginClient-java" class="headerlink" title="4.客户端代码 LoginClient.java"></a>4.客户端代码 LoginClient.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Socket，指定服务器端的ip与端口</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入用户名:"</span>);</span><br><span class="line">        String username = sc.nextLine();</span><br><span class="line">        System.out.print(<span class="string">"请输入密码:"</span>);</span><br><span class="line">        String password = sc.nextLine();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送登录信息</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(outputStream);</span><br><span class="line">        objectOutputStream.writeObject(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(inputStream);</span><br><span class="line">        String res = dataInputStream.readUTF();</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        dataInputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(客户端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入用户名:zhangsan</span><br><span class="line">请输入密码:1234</span><br><span class="line">登录成功</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(服务端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&apos;zhangsan&apos;, password=&apos;1234&apos;&#125;</span><br><span class="line">你是访问该服务器的第1个用户,你的ip地址为xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><hr><hr><h3 id="二、使用UDP实现一个简易聊天室功能"><a href="#二、使用UDP实现一个简易聊天室功能" class="headerlink" title="二、使用UDP实现一个简易聊天室功能"></a>二、使用UDP实现一个简易聊天室功能</h3><blockquote><p>UDP相较于TCP实现简单一些，所以代码量也稍微的少一些</p></blockquote><h4 id="1-服务端代码"><a href="#1-服务端代码" class="headerlink" title="1.服务端代码"></a>1.服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.udp.moreThanOneUdp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能:在线客服.</span></span><br><span class="line"><span class="comment"> * 技能:使用UDP网络编程完成</span></span><br><span class="line"><span class="comment"> * 注意</span></span><br><span class="line"><span class="comment"> * 1. UDP编程中客户端和服务器端区分不明显,双方代码差别不大</span></span><br><span class="line"><span class="comment"> * 2.主动发起请求的一段是客户端，接收请求的是服务器端;一旦通信开始，客户端和服务器端无差别</span></span><br><span class="line"><span class="comment"> * 3.不涉及IO流</span></span><br><span class="line"><span class="comment"> * 4.主要API</span></span><br><span class="line"><span class="comment"> * - DatagramSocket:socket,作用是发送和接收DatagramPacket</span></span><br><span class="line"><span class="comment"> * - DatagramPacket:数据报（封装数据，目的地址，源地址，端口号）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AskServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个DatagramSocket,用来发送和接收数据</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);<span class="comment">//服务器端接收数据的端口</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//使用DatagramSocket接收一个DatagramPacket</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket datagramPacket1 = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">            socket.receive(datagramPacket1);</span><br><span class="line">            System.out.println(<span class="string">"对方说:"</span> + <span class="keyword">new</span> String(datagramPacket1.getData(), <span class="number">0</span>, datagramPacket1.getLength()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用DatagramSocket发送一个DatagramPacket</span></span><br><span class="line">            System.out.print(<span class="string">"请您输入:"</span>);</span><br><span class="line">            String info = sc.nextLine();</span><br><span class="line">            InetAddress inetAddress = datagramPacket1.getAddress();</span><br><span class="line">            <span class="keyword">int</span> port = datagramPacket1.getPort();</span><br><span class="line">            DatagramPacket datagramPacket2 = <span class="keyword">new</span> DatagramPacket(info.getBytes(), info.getBytes().length, inetAddress, port);</span><br><span class="line">            socket.send(datagramPacket2);</span><br><span class="line">            <span class="keyword">if</span> (info.equals(<span class="string">"bye"</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"聊天结束"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-客户端代码"><a href="#2-客户端代码" class="headerlink" title="2.客户端代码"></a>2.客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.udp.moreThanOneUdp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AskClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个DatagramSocket,用来发送和接收数据</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8889</span>);<span class="comment">//客户端接收数据的端口,可以省略，会自动分配</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//使用DatagramSocket发送一个DatagramPacket</span></span><br><span class="line">            System.out.print(<span class="string">"请您输入:"</span>);</span><br><span class="line">            String info = sc.nextLine();</span><br><span class="line">            InetAddress inetAddress = InetAddress.getLocalHost();</span><br><span class="line">            DatagramPacket datagramPacket1 = <span class="keyword">new</span> DatagramPacket(info.getBytes(), info.getBytes().length, inetAddress, <span class="number">8888</span>);</span><br><span class="line">            socket.send(datagramPacket1);</span><br><span class="line">            <span class="keyword">if</span> (info.equals(<span class="string">"bye"</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用DatagramSocket接收一个DatagramPacket</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1000</span>];</span><br><span class="line">            DatagramPacket datagramPacket2 = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">            socket.receive(datagramPacket2);</span><br><span class="line">            System.out.println(<span class="string">"对方说:"</span> + <span class="keyword">new</span> String(buf, <span class="number">0</span>, datagramPacket2.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"聊天结束"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(客户端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请您输入:你好呀</span><br><span class="line">对方说:你是谁</span><br><span class="line">请您输入:我是张三，你呢</span><br><span class="line">对方说:我是李四</span><br><span class="line">请您输入:好的，我要忙了</span><br><span class="line">对方说:bye</span><br><span class="line">请您输入:bye</span><br><span class="line">聊天结束</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(服务端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对方说:你好呀</span><br><span class="line">请您输入:你是谁</span><br><span class="line">对方说:我是张三，你呢</span><br><span class="line">请您输入:我是李四</span><br><span class="line">对方说:好的，我要忙了</span><br><span class="line">请您输入:bye</span><br><span class="line">聊天结束</span><br></pre></td></tr></table></figure><hr><hr><h3 id="三、使用TCP实现文件上传以及文件下载功能"><a href="#三、使用TCP实现文件上传以及文件下载功能" class="headerlink" title="三、使用TCP实现文件上传以及文件下载功能"></a>三、使用TCP实现文件上传以及文件下载功能</h3><blockquote><ul><li>文件上传的本质:文件从客户端到服务器端的复制</li><li>文件下载的本质:文件从服务器端到客户端的复制</li><li>文件的上传和下载都是两次文件复制</li></ul></blockquote><hr><h4 id="1-文件上传功能服务端代码"><a href="#1-文件上传功能服务端代码" class="headerlink" title="1.文件上传功能服务端代码"></a>1.文件上传功能服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.uploadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/test1.txt"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用输入流和输出流完成文件复制</span></span><br><span class="line">        <span class="comment">//中转站</span></span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取末尾的一个字节的内容赋给n</span></span><br><span class="line">        n = bufferedInputStream.read();</span><br><span class="line">        <span class="keyword">while</span> (n != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//写一个字节</span></span><br><span class="line">            bufferedOutputStream.write(n);</span><br><span class="line">            System.out.println(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//读一个字节</span></span><br><span class="line">            n = bufferedInputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-文件上传功能客户端代码"><a href="#2-文件上传功能客户端代码" class="headerlink" title="2.文件上传功能客户端代码"></a>2.文件上传功能客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.uploadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(),<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"/test.txt"</span>)));</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-文件下载功能服务端代码"><a href="#1-文件下载功能服务端代码" class="headerlink" title="1.文件下载功能服务端代码"></a>1.文件下载功能服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.downloadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/test.txt"</span>)));</span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用输入流和输出流完成文件复制</span></span><br><span class="line">        <span class="comment">//中转站</span></span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取末尾的一个字节的内容赋给n</span></span><br><span class="line">        n = bufferedInputStream.read();</span><br><span class="line">        <span class="keyword">while</span> (n != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//写一个字节</span></span><br><span class="line">            bufferedOutputStream.write(n);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读一个字节</span></span><br><span class="line">            n = bufferedInputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-文件下载功能客户端代码"><a href="#2-文件下载功能客户端代码" class="headerlink" title="2.文件下载功能客户端代码"></a>2.文件下载功能客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.downloadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(),<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/test1.txt"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实上传功能和下载功能的逻辑是相同的，只不过一个是文件c =&gt; s,一个是文件s =&gt; c</p></blockquote><hr><hr><blockquote><p>参考视频：<a href="https://www.bilibili.com/video/av31123719/" target="_blank" rel="noopener">https://www.bilibili.com/video/av31123719/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      今天在看计网相关问题时遇到了网络编程相关问题，所以重温了一下java的网络编程，并使用TCP实现一个简单登录系统，文件上传，文件下载功能，使用UDP实现一个简易聊天室。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="编程基础" scheme="http://suiwo.xyz/tags/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Socket编程" scheme="http://suiwo.xyz/tags/Socket%E7%BC%96%E7%A8%8B/"/>
    
      <category term="TCP/UDP" scheme="http://suiwo.xyz/tags/TCP-UDP/"/>
    
  </entry>
  
  <entry>
    <title>重温Java反射机制</title>
    <link href="http://suiwo.xyz/2019/04/01/%E9%87%8D%E6%B8%A9Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://suiwo.xyz/2019/04/01/重温Java反射机制/</id>
    <published>2019-04-01T08:08:44.000Z</published>
    <updated>2019-04-01T08:42:04.079Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要是为了实战Java反射，简单工厂只是一个背景，故对简单工厂模式不做解释了。</p></blockquote><hr><p>1、首先先做个一个使用了简单工厂模式的demo。<br>Fruit是一个接口，里面含有一个get()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Apple与Banana为两个实现了Fruit的接口，其中Apple类中方法较多用于实现Java反射中的各种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"name"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//无参无返回值情况</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">aha</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple, but you can't see this word."</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参无返回值情况</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ahaString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple, but you can't see this word."</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参有返回值情况</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">ahaReturn</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple, but you can't see this word."</span> + str);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"yes"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、FruitFactory为简单工厂模式创建类（为了后期再Main函数中体现Java反射机制，正确的应该像注释中那样，直接返回类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title">getFruit</span><span class="params">(String typeName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//通过字符串获取相关的类并返回</span></span><br><span class="line">            <span class="keyword">return</span> Class.forName(typeName);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//package SimpleFactory;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//public class FruitFactory &#123;</span></span><br><span class="line"><span class="comment">//    public static Fruit getFruit(String typeName)&#123;</span></span><br><span class="line"><span class="comment">//        Class fruitClass = null;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            fruitClass = Class.forName(typeName);</span></span><br><span class="line"><span class="comment">//            return (Fruit) fruitClass.newInstance();</span></span><br><span class="line"><span class="comment">//        &#125; catch (ClassNotFoundException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (IllegalAccessException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (InstantiationException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return null;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>4、下面是执行一下常见的反射操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainSimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//反射机制</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取Apple的Class</span></span><br><span class="line">            Class appleClass = FruitFactory.getFruit(<span class="string">"SimpleFactory.Apple"</span>);</span><br><span class="line">            <span class="comment">//创建实例</span></span><br><span class="line">            Fruit apple = (Fruit) appleClass.newInstance();</span><br><span class="line">            <span class="comment">//执行实例的public方法</span></span><br><span class="line">            apple.get();</span><br><span class="line">            <span class="comment">//获取private方法</span></span><br><span class="line">            Method getAha = appleClass.getDeclaredMethod(<span class="string">"aha"</span>);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            getAha.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//执行该无参无返回值的方法</span></span><br><span class="line">            getAha.invoke(apple);</span><br><span class="line">            <span class="comment">//获取private属性</span></span><br><span class="line">            Field name = appleClass.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//修改该name的值</span></span><br><span class="line">            name.set(apple, <span class="string">"newName"</span>);</span><br><span class="line">            <span class="comment">//修改后再一次执行getAha方法</span></span><br><span class="line">            getAha.invoke(apple);</span><br><span class="line">            <span class="comment">//获取private方法</span></span><br><span class="line">            Method getAhaString = appleClass.getDeclaredMethod(<span class="string">"ahaString"</span>,String.class);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            getAhaString.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//执行该有参无返回值的方法</span></span><br><span class="line">            getAhaString.invoke(apple, <span class="string">"false"</span>);</span><br><span class="line">            <span class="comment">//获取private方法</span></span><br><span class="line">            Method getAhaReturn = appleClass.getDeclaredMethod(<span class="string">"ahaReturn"</span>,String.class);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            getAhaReturn.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//执行该有参有返回值的方法</span></span><br><span class="line">            String res = (String) getAhaReturn.invoke(apple, <span class="string">"true"</span>);</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//与上面相同，只不过是使用简单工厂创建了Banana类的对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class appleClass = FruitFactory.getFruit(<span class="string">"SimpleFactory.Banana"</span>);</span><br><span class="line">            Fruit banana = (Fruit) appleClass.newInstance();</span><br><span class="line">            banana.get();</span><br><span class="line">            Method getAha = appleClass.getDeclaredMethod(<span class="string">"ahaa"</span>);</span><br><span class="line">            getAha.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            getAha.invoke(banana);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">This is apple</span><br><span class="line">This is apple, but you can&apos;t see this word.name</span><br><span class="line">This is apple, but you can&apos;t see this word.newName</span><br><span class="line">This is apple, but you can&apos;t see this word.false</span><br><span class="line">This is apple, but you can&apos;t see this word.true</span><br><span class="line">yes</span><br><span class="line">This is Banana</span><br><span class="line">This is banana, but you can&apos;t see this word.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      今天在学习Java设计模式时发现很多设计思想需要用到Java的反射，也算是对Java反射的一次实战了，毕竟之前都只是看了理论并没有真的在实战中使用，本文是结合最基础的简单工厂模式来实战使用Java反射。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="编程基础" scheme="http://suiwo.xyz/tags/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java反射" scheme="http://suiwo.xyz/tags/Java%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
</feed>
