<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随我的博客</title>
  
  <subtitle>记录学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-19T13:21:38.374Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>随我</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>链表的常见操作</title>
    <link href="http://yoursite.com/2018/04/19/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/19/链表的常见操作/</id>
    <published>2018-04-19T13:16:35.000Z</published>
    <updated>2018-04-19T13:21:38.374Z</updated>
    
    <content type="html"><![CDATA[<h6 id="这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下："><a href="#这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下：" class="headerlink" title="这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下："></a>这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125; Node,*PNode;</span><br><span class="line"><span class="function">PNode <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//创建链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNode)</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_empty</span><span class="params">(PNode)</span></span>;<span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNode)</span></span>;<span class="comment">//判断链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_list</span><span class="params">(PNode,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;<span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(PNode,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;<span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNode)</span></span>;<span class="comment">//对链表进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PNode pHead = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    pHead = create_list();</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表的长度为%d\n"</span>,len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要插入的位置以及数值:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;pos,&amp;val);</span><br><span class="line">    insert_list(pHead, pos, &amp;val);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要删除的位置!\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos);</span><br><span class="line">    delete_list(pHead, pos, &amp;val);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    sort_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"排序后的链表数据如下:"</span>);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PNode <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    </span><br><span class="line">    PNode pHead = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(pHead == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PNode pTail = pHead;<span class="comment">//这里是创建一个指向尾节点的变量</span></span><br><span class="line">    pTail-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要生成的链表的节点数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个节点的值:\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</span><br><span class="line">        </span><br><span class="line">        PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pNew-&gt;data = val;</span><br><span class="line">        pTail-&gt;pNext = pNew;</span><br><span class="line">        pNew-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">        pTail = pNew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pHead;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    PNode p = pHead-&gt;pNext;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表中的数据为:"</span>);</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_empty</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pHead-&gt;pNext == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该链表为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该链表不为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    PNode p = pHead-&gt;pNext;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_list</span><span class="params">(PNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span>* val)</span></span>&#123;</span><br><span class="line">    PNode p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; i&lt;pos<span class="number">-1</span>) &#123;<span class="comment">//使指针最后指向需要插入的节点的前一个节点</span></span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;pos<span class="number">-1</span> || p==<span class="literal">NULL</span>)&#123;<span class="comment">//当该节点为空，则说明该节点为尾节点的下一个节点，即输入不合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入不正确!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"动态分配内存失败!\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pNew-&gt;data = *val;</span><br><span class="line">            pNew-&gt; pNext = p-&gt;pNext;</span><br><span class="line">            p-&gt;pNext = pNew;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(PNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span>* val)</span></span>&#123;</span><br><span class="line">    PNode p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;pNext != <span class="literal">NULL</span> &amp;&amp; i&lt;pos<span class="number">-1</span>) &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;pos<span class="number">-1</span> || p-&gt;pNext == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入不正确!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode q = p-&gt;pNext;</span><br><span class="line">        *val = p-&gt;pNext-&gt;data;</span><br><span class="line">        p-&gt;pNext = p-&gt;pNext-&gt;pNext;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;<span class="comment">//将q中的野指针赋值为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除成功，删除的节点值为%d"</span>,*val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNode pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    PNode p, q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>,p=pHead-&gt;pNext; i&lt;len<span class="number">-1</span>; i++,p=p-&gt;pNext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>,q=p-&gt;pNext; j&lt;len; j++,q=q-&gt;pNext)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)  <span class="comment">//类似于数组中的:  a[i] &gt; a[j]</span></span><br><span class="line">            &#123;</span><br><span class="line">                t = p-&gt;data;<span class="comment">//类似于数组中的:  t = a[i];</span></span><br><span class="line">                p-&gt;data = q-&gt;data; <span class="comment">//类似于数组中的:  a[i] = a[j];</span></span><br><span class="line">                q-&gt;data = t; <span class="comment">//类似于数组中的:  a[j] = t;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。"><a href="#注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。" class="headerlink" title="注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。"></a>注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。</h6>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后对链表常见操作的代码的总结
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何使用github+hexo搭建一个博客</title>
    <link href="http://yoursite.com/2018/04/12/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/04/12/如何使用github+hexo搭建一个博客/</id>
    <published>2018-04-12T12:14:06.000Z</published>
    <updated>2018-04-16T13:08:51.205Z</updated>
    
    <content type="html"><![CDATA[<p>本文章是查阅了一下两个博客文章后所做的总结：<br><a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a><br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p><h3 id="一、配置环境以及准备"><a href="#一、配置环境以及准备" class="headerlink" title="一、配置环境以及准备"></a>一、配置环境以及准备</h3><h4 id="1-安装并配置node-js以及git"><a href="#1-安装并配置node-js以及git" class="headerlink" title="1.安装并配置node.js以及git"></a>1.安装并配置node.js以及git</h4><h4 id="2-在github中新建一个项目（记得点击添加README，项目命最好是“github用户名-github-io”）"><a href="#2-在github中新建一个项目（记得点击添加README，项目命最好是“github用户名-github-io”）" class="headerlink" title="2.在github中新建一个项目（记得点击添加README，项目命最好是“github用户名.github.io”）"></a>2.在github中新建一个项目（记得点击添加README，项目命最好是“github用户名.github.io”）</h4><h4 id="3-在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。"><a href="#3-在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。" class="headerlink" title="3.在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。"></a>3.在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。</h4><h4 id="4-在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo"><a href="#4-在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo" class="headerlink" title="4.在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo"></a>4.在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><h4 id="5-使用下面的命令查看是否安装成功"><a href="#5-使用下面的命令查看是否安装成功" class="headerlink" title="5.使用下面的命令查看是否安装成功"></a>5.使用下面的命令查看是否安装成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h4 id="6-输入下面的命令初始化文件夹"><a href="#6-输入下面的命令初始化文件夹" class="headerlink" title="6.输入下面的命令初始化文件夹"></a>6.输入下面的命令初始化文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4 id="7-输入下面的命令安装所需要的组件"><a href="#7-输入下面的命令安装所需要的组件" class="headerlink" title="7.输入下面的命令安装所需要的组件"></a>7.输入下面的命令安装所需要的组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="8-输入下面的命令首次体验hexo"><a href="#8-输入下面的命令首次体验hexo" class="headerlink" title="8.输入下面的命令首次体验hexo"></a>8.输入下面的命令首次体验hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="9-输入下面的命令开启服务器（若端口被占用则使用-hexo-server-p-端口号-）来改变端口号"><a href="#9-输入下面的命令开启服务器（若端口被占用则使用-hexo-server-p-端口号-）来改变端口号" class="headerlink" title="9.输入下面的命令开启服务器（若端口被占用则使用 hexo server -p 端口号 ）来改变端口号"></a>9.输入下面的命令开启服务器（若端口被占用则使用 <code>hexo server -p 端口号</code> ）来改变端口号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180413134226239?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="出现该页面则说明成功了"><a href="#出现该页面则说明成功了" class="headerlink" title="出现该页面则说明成功了"></a>出现该页面则说明成功了</h5><h4 id="10-将Hexo与github-page联系起来"><a href="#10-将Hexo与github-page联系起来" class="headerlink" title="10.将Hexo与github page联系起来"></a>10.将Hexo与github page联系起来</h4><h5 id="（1）配置Git个人信息-如果你之前已经配置好git个人信息，请跳过这一个步骤"><a href="#（1）配置Git个人信息-如果你之前已经配置好git个人信息，请跳过这一个步骤" class="headerlink" title="（1）配置Git个人信息(如果你之前已经配置好git个人信息，请跳过这一个步骤)"></a>（1）配置Git个人信息(如果你之前已经配置好git个人信息，请跳过这一个步骤)</h5><h5 id="a-设置Git的user-name和email：-如果是第一次的话）"><a href="#a-设置Git的user-name和email：-如果是第一次的话）" class="headerlink" title="a.设置Git的user name和email：(如果是第一次的话）"></a>a.设置Git的user name和email：(如果是第一次的话）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your_name&quot;</span><br><span class="line">git config --global user.email &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h6 id="b-生成密钥"><a href="#b-生成密钥" class="headerlink" title="b.生成密钥"></a>b.生成密钥</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h4 id="11-配置Deployment"><a href="#11-配置Deployment" class="headerlink" title="11.配置Deployment"></a>11.配置Deployment</h4><h5 id="在-config-yml文件中，找到Deployment，然后按照如下修改："><a href="#在-config-yml文件中，找到Deployment，然后按照如下修改：" class="headerlink" title="在_config.yml文件中，找到Deployment，然后按照如下修改："></a>在_config.yml文件中，找到Deployment，然后按照如下修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="二、写博客，发布文章"><a href="#二、写博客，发布文章" class="headerlink" title="二、写博客，发布文章"></a>二、写博客，发布文章</h3><h4 id="1-使用下面的命令新建一个博文（新建后在hexo-source-posts中将会看到你新建的-md后缀的文件）"><a href="#1-使用下面的命令新建一个博文（新建后在hexo-source-posts中将会看到你新建的-md后缀的文件）" class="headerlink" title="1.使用下面的命令新建一个博文（新建后在hexo\source\ _posts中将会看到你新建的.md后缀的文件）"></a>1.使用下面的命令新建一个博文（新建后在hexo\source\ _posts中将会看到你新建的.md后缀的文件）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;article title&quot;</span><br></pre></td></tr></table></figure><h4 id="2-使用markdown编辑器打开并进行编辑文章"><a href="#2-使用markdown编辑器打开并进行编辑文章" class="headerlink" title="2.使用markdown编辑器打开并进行编辑文章"></a>2.使用markdown编辑器打开并进行编辑文章</h4><h4 id="3-使用下面的命令进行生成和部署，成功后便可在https-yourName-github-io访问您的博文"><a href="#3-使用下面的命令进行生成和部署，成功后便可在https-yourName-github-io访问您的博文" class="headerlink" title="3.使用下面的命令进行生成和部署，成功后便可在https://yourName.github.io访问您的博文"></a>3.使用下面的命令进行生成和部署，成功后便可在<a href="https://yourName.github.io访问您的博文" target="_blank" rel="noopener">https://yourName.github.io访问您的博文</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   // 生成</span><br><span class="line">hexo d   // 部署</span><br></pre></td></tr></table></figure><h5 id="注：若提示-deloyer-not-found-git-则说明缺少一个扩展，运行-npm-install-save-hexo-deployer-git-命令即可解决"><a href="#注：若提示-deloyer-not-found-git-则说明缺少一个扩展，运行-npm-install-save-hexo-deployer-git-命令即可解决" class="headerlink" title="注：若提示 deloyer not found:git 则说明缺少一个扩展，运行 npm install --save hexo-deployer-git 命令即可解决"></a>注：若提示 <code>deloyer not found:git</code> 则说明缺少一个扩展，运行 <code>npm install --save hexo-deployer-git</code> 命令即可解决</h5><h3 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h3><p>hexo提供了许许多多的主题，我们可以轻松的修改一个自己喜欢的主题，具体方法如下：</p><h4 id="1-在-Hexo-中有两份主要的配置文件，其名称都是-config-yml。-其中，一份位于站点根目录下，主要包含-Hexo-本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。-为了描述方便，在以下说明中，将前者称为-站点配置文件，-后者称为-主题配置文件。在文件夹的themes中使用-git-clone-命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用"><a href="#1-在-Hexo-中有两份主要的配置文件，其名称都是-config-yml。-其中，一份位于站点根目录下，主要包含-Hexo-本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。-为了描述方便，在以下说明中，将前者称为-站点配置文件，-后者称为-主题配置文件。在文件夹的themes中使用-git-clone-命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用" class="headerlink" title="1.在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。在文件夹的themes中使用 git clone 命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用"></a>1.在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 <em>站点配置文件</em>， 后者称为 <em>主题配置文件</em>。在文件夹的themes中使用 <code>git clone</code> 命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h4 id="2-启用主题-与所有-Hexo-主题启用的模式一样。-当-克隆-下载-完成后，打开-站点配置文件，-找到-theme-字段，并将其值更改为-next。-启用-NexT-主题"><a href="#2-启用主题-与所有-Hexo-主题启用的模式一样。-当-克隆-下载-完成后，打开-站点配置文件，-找到-theme-字段，并将其值更改为-next。-启用-NexT-主题" class="headerlink" title="2.启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题"></a>2.启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，检查站点是否正确运行。 当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。选择 Scheme Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line">Mist - Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">Pisces - 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面</span><br></pre></td></tr></table></figure></p><p>注释 # 即可。 选择 Pisce Scheme<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure></p><p>5）<strong>设置语言</strong> 编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">语言</th><th style="text-align:center">代码</th><th style="text-align:center">设定实例</th></tr></thead><tbody><tr><td style="text-align:center">English</td><td style="text-align:center">en</td><td style="text-align:center">language: en</td></tr><tr><td style="text-align:center">简体中文</td><td style="text-align:center">zh-Hans</td><td style="text-align:center">language:zh-Hans</td></tr><tr><td style="text-align:center">Français</td><td style="text-align:center">fr-FR</td><td style="text-align:center">language:fr-FR</td></tr><tr><td style="text-align:center">Português</td><td style="text-align:center">pt</td><td style="text-align:center">language:pt</td></tr><tr><td style="text-align:center">繁體中文</td><td style="text-align:center">zh-hk或者zh-tw</td><td style="text-align:center">language:zh-hk</td></tr><tr><td style="text-align:center">Русский язык</td><td style="text-align:center">ru</td><td style="text-align:center">language:ru</td></tr><tr><td style="text-align:center">Deutsch</td><td style="text-align:center">de</td><td style="text-align:center">language:de</td></tr><tr><td style="text-align:center">日本語</td><td style="text-align:center">ja</td><td style="text-align:center">language:ja</td></tr><tr><td style="text-align:center">Indonesian</td><td style="text-align:center">id</td><td style="text-align:center">language:id</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      本文是我在网上查找了部分搭建博客的教程，以及使用github+hexo搭建博客时的流程以及遇到的一些问题的总结
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Django网站部署前期准备</title>
    <link href="http://yoursite.com/2018/02/10/Django%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2018/02/10/Django网站部署前期准备/</id>
    <published>2018-02-10T13:52:08.000Z</published>
    <updated>2018-04-19T13:30:50.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="建立虚拟环境"><a href="#建立虚拟环境" class="headerlink" title="建立虚拟环境"></a>建立虚拟环境</h3><hr><p>####（1）创建一个空文件夹，并命名为learning_log</p><p>####（2）在终端中切换到该文件夹中使用<code>virtualenv ll_env</code>创建一个虚拟环境，如创建失败请使用<code>pip install virtualenv</code>命令来安装virtualenv包</p><p>####（3）完成上述命令后learning_log文件加如下所示<br><img src="http://img.blog.csdn.net/20180210205316970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180210205350743?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><hr><p>####（1）使用<code>source ll_env/bin/activate</code>命令激活虚拟环境，激活后终端前将出现（ll_env）<br><img src="http://img.blog.csdn.net/20180210205632917?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h5 id="注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境"><a href="#注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境" class="headerlink" title="注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境"></a>注：如果需要停止虚拟环境，请使用<code>deactivate</code>命令来关闭虚拟环境</h5><hr><hr><h3 id="安装，新建Django项目"><a href="#安装，新建Django项目" class="headerlink" title="安装，新建Django项目"></a>安装，新建Django项目</h3><hr><p>####（1）创建并激活虚拟环境之后，我们就可以安装Django了安装命令为<code>pip install django</code></p><p>####（2）使用<code>django-admin.py startproject learning_log .</code>来新建项目（注意不要忽略.，如没有.则manage.py文件将不与ll_env文件夹在同一目录，会影响后期部署）<br><img src="http://img.blog.csdn.net/20180210210451199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><hr><p>####（1）使用命令<code>python manage.py migrate</code>来修改数据库，我们将这称为迁移数据库，首次执行将新建一个必要的数据表<br><img src="http://img.blog.csdn.net/20180210211321732?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="查看项目"><a href="#查看项目" class="headerlink" title="查看项目"></a>查看项目</h3><hr><p>####（1）使用<code>python manage.py runserver</code>来启动该项目，启动之后便可在<a href="http://127.0.0.1:8000/打开该网站，若8000端口被占用可使用`python" target="_blank" rel="noopener">http://127.0.0.1:8000/打开该网站，若8000端口被占用可使用`python</a> manage.py runserver 8001`使网站在8001端口打开，如仍被占用，请继续向后增加，直至成功，关闭请按ctrl+c<br><img src="http://img.blog.csdn.net/20180210211543833?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180210212037748?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h3><hr><p>####（1）使用<code>python manage.py startapp learning_logs</code>命令创建一个名为learning_logs的app,运行后文件夹中将出现learning_logs文件夹</p><hr><hr><h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><hr><p>####（1）打开models.py文件添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br></pre></td></tr></table></figure></p><h5 id="DateTimeField-auto-now-add-True-是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串"><a href="#DateTimeField-auto-now-add-True-是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串" class="headerlink" title="DateTimeField(auto_now_add=True)是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串"></a><code>DateTimeField(auto_now_add=True)</code>是指日期自动添加，<strong>str</strong>函数表示了该模型的简单显示，该模型的返回值等于text字符串</h5><hr><hr><p>###激活模型</p><hr><p>####（1）在settings.py文件中将learning_logs这个app添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#我的应用</span></span><br><span class="line">    <span class="string">'learning_logs'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>####（2）我们使用<code>python manage.py makemigrations</code>命令，makemigrations是Django确认数据库如何修改，输出表示django创建了一个0001_initial.py的迁移文件，之后使用<code>python manage.py migrate</code>这种迁移数据库来修改数据库<br><img src="http://img.blog.csdn.net/20180210213835645?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>#####注：管理数据的正常顺序为：修改models.py，对修改使用makemigrations，最后使用migrate来迁移数据</p><hr><hr><p>###Django管理网站</p><hr><p>####（1）创建超级用户，命令为<code>python manage.py createsuperuser</code></p><p>####（2）向管理网站注册模型，在admin.py文件中添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic,Entry</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br></pre></td></tr></table></figure></p><p>####之后登录<a href="http://127.0.0.1:8000/admin通过Django的后台来进行网站管理，在这个网站中寻在Topic模型，可以在这里添加Topic" target="_blank" rel="noopener">http://127.0.0.1:8000/admin通过Django的后台来进行网站管理，在这个网站中寻在Topic模型，可以在这里添加Topic</a></p><p>####（3）同理我们可以定义一个Entry模型，models.py文件中添加的代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    topic = models.ForeignKey(Topic)</span><br><span class="line">    text = models.TextField()</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name_plural = <span class="string">'entries'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text[:<span class="number">50</span>] + <span class="string">'...'</span></span><br></pre></td></tr></table></figure></p><h4 id="这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys"><a href="#这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys" class="headerlink" title="这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys"></a>这里的<strong>str</strong>指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys</h4><p>####（4）进行数据迁移</p><p>####（5）向管理网站注册entry，在admin.py中添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.site.register(Entry)</span><br></pre></td></tr></table></figure></p><hr><hr>]]></content>
    
    <summary type="html">
    
      本文总结了Django进行开发的常见前期追被工作
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>通过python的matplotlib包将Tensorflow数据进行可视化</title>
    <link href="http://yoursite.com/2017/11/08/%E9%80%9A%E8%BF%87python%E7%9A%84matplotlib%E5%8C%85%E5%B0%86Tensorflow%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2017/11/08/通过python的matplotlib包将Tensorflow数据进行可视化/</id>
    <published>2017-11-08T13:06:28.000Z</published>
    <updated>2018-04-19T15:02:50.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用matplotlib中的一些函数将tensorflow中的数据可视化，更加便于分析"><a href="#使用matplotlib中的一些函数将tensorflow中的数据可视化，更加便于分析" class="headerlink" title="使用matplotlib中的一些函数将tensorflow中的数据可视化，更加便于分析"></a>使用matplotlib中的一些函数将tensorflow中的数据可视化，更加便于分析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    Weights = tf.Variable(tf.random_normal([in_size, out_size]))</span><br><span class="line">    biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size]) + <span class="number">0.1</span>)</span><br><span class="line">    Wx_plus_b = tf.matmul(inputs, Weights) + biases</span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make up some real data</span></span><br><span class="line">x_data = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">300</span>)[:, np.newaxis]</span><br><span class="line">noise = np.random.normal(<span class="number">0</span>, <span class="number">0.05</span>, x_data.shape)</span><br><span class="line">y_data = np.square(x_data) - <span class="number">0.5</span> + noise</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># define placeholder for inputs to network</span></span><br><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># add hidden layer</span></span><br><span class="line">l1 = add_layer(xs, <span class="number">1</span>, <span class="number">10</span>, activation_function=tf.nn.relu)</span><br><span class="line"><span class="comment"># add output layer</span></span><br><span class="line">prediction = add_layer(l1, <span class="number">10</span>, <span class="number">1</span>, activation_function=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the error between prediction and real data</span></span><br><span class="line">loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction), reduction_indices=[<span class="number">1</span>]))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"><span class="comment"># important step</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#initialize_all_variables已被弃用,使用tf.global_variables_initializer代替。 </span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the real data</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">ax.scatter(x_data, y_data)</span><br><span class="line">plt.ion() <span class="comment">#使plt不会在show之后停止而是继续运行</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># training</span></span><br><span class="line">    sess.run(train_step, feed_dict=&#123;xs: x_data, ys: y_data&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># to visualize the result and improvement</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ax.lines.remove(lines[<span class="number">0</span>]) <span class="comment">#在每一次绘图之前先讲上一次绘图删除，使得画面更加清晰</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        prediction_value = sess.run(prediction, feed_dict=&#123;xs: x_data&#125;)</span><br><span class="line">        <span class="comment"># plot the prediction</span></span><br><span class="line">        lines = ax.plot(x_data, prediction_value, <span class="string">'r-'</span>, lw=<span class="number">5</span>) <span class="comment">#'r-'指绘制一个红色的线</span></span><br><span class="line">        plt.pause(<span class="number">1</span>) <span class="comment">#指等待一秒钟</span></span><br></pre></td></tr></table></figure><p>运行结果如下：（实际效果应该是动态的，应当使用ipython运行，使用jupyter运行则图片不是动态的）<br><img src="http://img.blog.csdn.net/20171108210514694?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>注意：initialize_all_variables已被弃用,使用tf.global_variables_initializer代替。 </p>]]></content>
    
    <summary type="html">
    
      本文使用python的matplotlib包将tensorflow对数据的处理过程进行可视化
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
      <category term="temsorflow" scheme="http://yoursite.com/tags/temsorflow/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow进行简单的神经网络的尝试（建造神经网络）</title>
    <link href="http://yoursite.com/2017/11/08/Tensorflow%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%B0%9D%E8%AF%95%EF%BC%88%E5%BB%BA%E9%80%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/08/Tensorflow进行简单的神经网络的尝试（建造神经网络）/</id>
    <published>2017-11-08T12:52:41.000Z</published>
    <updated>2018-04-19T14:59:02.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过对一个简单的函数的轨迹的预测来进行一个较为简单的神经网络的构建"><a href="#通过对一个简单的函数的轨迹的预测来进行一个较为简单的神经网络的构建" class="headerlink" title="通过对一个简单的函数的轨迹的预测来进行一个较为简单的神经网络的构建"></a>通过对一个简单的函数的轨迹的预测来进行一个较为简单的神经网络的构建</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入程序所需要的包</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#该函数用来进行添加神经网络的层数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    <span class="comment"># add one more layer and return the output of this layer</span></span><br><span class="line">    Weights = tf.Variable(tf.random_normal([in_size, out_size]))</span><br><span class="line">    biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size]) + <span class="number">0.1</span>)</span><br><span class="line">    Wx_plus_b = tf.matmul(inputs, Weights) + biases</span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make up some real data</span></span><br><span class="line">x_data = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">300</span>)[:, np.newaxis]</span><br><span class="line">noise = np.random.normal(<span class="number">0</span>, <span class="number">0.05</span>, x_data.shape)</span><br><span class="line">y_data = np.square(x_data) - <span class="number">0.5</span> + noise</span><br><span class="line"></span><br><span class="line"><span class="comment"># define placeholder for inputs to network</span></span><br><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># add hidden layer</span></span><br><span class="line">l1 = add_layer(xs, <span class="number">1</span>, <span class="number">10</span>, activation_function=tf.nn.relu)</span><br><span class="line"><span class="comment"># add output layer</span></span><br><span class="line">prediction = add_layer(l1, <span class="number">10</span>, <span class="number">1</span>, activation_function=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the error between prediction and real data</span></span><br><span class="line">loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),</span><br><span class="line">                     reduction_indices=[<span class="number">1</span>]))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># important step</span></span><br><span class="line"><span class="comment"># tf.initialize_all_variables() no long valid from</span></span><br><span class="line"><span class="comment"># 2017-03-02 if using tensorflow &gt;= 0.12</span></span><br><span class="line"><span class="keyword">if</span> int((tf.__version__).split(<span class="string">'.'</span>)[<span class="number">1</span>]) &lt; <span class="number">12</span>:</span><br><span class="line">    init = tf.initialize_all_variables()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># training</span></span><br><span class="line">    sess.run(train_step, feed_dict=&#123;xs: x_data, ys: y_data&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># to see the step improvement</span></span><br><span class="line">        print(sess.run(loss, feed_dict=&#123;xs: x_data, ys: y_data&#125;))</span><br></pre></td></tr></table></figure><p>运行的结果如下：<br><img src="http://img.blog.csdn.net/20171108205108651?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>主要的注意事项：了解tensorflow的Session会话，懂得各个神经网络层间的数据关系</p>]]></content>
    
    <summary type="html">
    
      本文尝试通过对一个简单的函数轨迹的预测来使用tensorflow进行一个较为简单的神经网络的构建
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
      <category term="神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>python matplotlib中常用函数</title>
    <link href="http://yoursite.com/2017/11/04/python-matplotlib%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/11/04/python-matplotlib中常用函数/</id>
    <published>2017-11-04T02:55:14.000Z</published>
    <updated>2018-04-19T13:38:55.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-matplotlib中常用函数"><a href="#python-matplotlib中常用函数" class="headerlink" title="python matplotlib中常用函数"></a>python matplotlib中常用函数</h1><ul><li><strong>绘图</strong></li><li><strong>常见设置</strong></li><li><strong>散点图</strong></li><li><strong>柱状图</strong></li><li><strong>等高线</strong></li><li><strong>matplotlib绘制3D图</strong></li><li><strong>子图像</strong></li><li><strong>动态图</strong></li></ul><hr><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt    <span class="comment">#倒入matplotlib库</span></span><br><span class="line">plt.plot(x,y)   <span class="comment">#绘制y关于x的函数</span></span><br><span class="line">plt.show()  <span class="comment">#将图形绘出</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104103640520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="常见设置"><a href="#常见设置" class="headerlink" title="常见设置"></a>常见设置</h2><h3 id="设置坐标轴"><a href="#设置坐标轴" class="headerlink" title="设置坐标轴"></a>设置坐标轴</h3><h4 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x轴和y轴的值域</span></span><br><span class="line">plt.xlim((<span class="number">-1</span>,<span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># color为线的颜色，linewidth为线宽度，linestyle为样式（-为实线，--为虚线）</span></span><br><span class="line">plt.plot(x,y,color=<span class="string">'red'</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">'—'</span>)</span><br><span class="line"></span><br><span class="line">plt.figure <span class="comment">#绘制一个新画布</span></span><br><span class="line">plt.figsize <span class="comment">#花布尺寸</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x和y轴</span></span><br><span class="line">plt.xtick()</span><br><span class="line">plt.ytick()</span><br><span class="line">例如：</span><br><span class="line">plt.xticks(new_ticks) <span class="comment">#new_ticks 为-2，2分成十一等份</span></span><br><span class="line">plt.yticks([<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">          [<span class="string">'level2'</span>,<span class="string">'level2'</span>,<span class="string">'level3'</span>,<span class="string">'level4'</span>,<span class="string">'level5'</span>])</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104104033057?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plt.gca <span class="comment">#获取当前的坐标轴</span></span><br><span class="line">spines[<span class="string">'right'</span>].set_color(<span class="string">'red’) #右边框为红色</span></span><br><span class="line"><span class="string"># 分别把x轴与y轴的刻度设置为bottom与left</span></span><br><span class="line"><span class="string">xaxis.set_ticks_position('</span>bottom<span class="string">')</span></span><br><span class="line"><span class="string">yaxis.set_ticks_position('</span>left’)</span><br><span class="line"><span class="comment"># 分别v把bottom和left类型设置为data，交点为（0，0）</span></span><br><span class="line">spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(‘red<span class="string">')</span></span><br><span class="line"><span class="string">ax.spines['</span>top<span class="string">'].set_color(‘red’)</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104104429257?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1, = plt.plot(x,y1,color=<span class="string">'red'</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">'—'</span>) <span class="comment">#设置两条线为l1,l2    注：应该在后面加上，</span></span><br><span class="line">l2, = plt.plot(x,y2,color=<span class="string">"blue"</span>,linewidth=<span class="number">5.0</span>,linestyle=<span class="string">"-"</span>)</span><br><span class="line">plt.legend(handles=[l1,l2],labels=[<span class="string">'test1'</span>,<span class="string">'test2'</span>],loc=<span class="string">'best’) #将l1，l2绘制于一张图中，其中名字分别是l1，l2，位置自动取在最佳位置</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104104606041?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="设置备注"><a href="#设置备注" class="headerlink" title="设置备注"></a>设置备注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x0 = <span class="number">0.5</span></span><br><span class="line">y0 = <span class="number">2</span>*x0 + <span class="number">1</span></span><br><span class="line"><span class="comment"># 画点</span></span><br><span class="line">plt.scatter(x0,y0,s=<span class="number">50</span>,color=<span class="string">'blue'</span>)</span><br><span class="line"><span class="comment"># 画虚线</span></span><br><span class="line">plt.plot([x0,x0],[y0,<span class="number">0</span>],<span class="string">'k--'</span>,lw=<span class="number">2</span>)<span class="comment">#[x0,x0],[y0,0]代表x0，y0点作虚线交于x0，0  k--代表颜色的虚线,lw代表宽度</span></span><br><span class="line">plt.annotate(<span class="string">r'$2x+1=%s$'</span> % y0,xy=(x0,y0),xytext=(+<span class="number">30</span>,<span class="number">-30</span>),textcoords=<span class="string">'offset points'</span>,fontsize=<span class="number">16</span>,arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>,connectionstyle=<span class="string">'arc3,rad=.2'</span>))</span><br><span class="line"><span class="comment">#xy=(x0,y0)指在x0，y0点，xytext=(+30,-30)指在点向右移动30，向下移动30,textcoords='offset points'指以点为起点</span></span><br><span class="line"><span class="comment">#arrowprops=dict(arrowstyle='-&gt;',connectionstyle='arc3,rad=.2')指弧度曲线，  .2指弧度</span></span><br><span class="line">plt.text(<span class="number">-2</span>,<span class="number">2</span>,<span class="string">r'$This\ is\ the\ text$'</span>,fontsize=<span class="number">16</span>,color=<span class="string">'red’) #-2,2指从-2，2开始写</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104104632825?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">500</span>)</span><br><span class="line">y = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">500</span>)</span><br><span class="line">plt.scatter(x,y,s=<span class="number">50</span>,color=<span class="string">'blue'</span>,alpha=<span class="number">0.5</span>) <span class="comment">#s指点大小，alpha指透明度</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104104726421?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">y = <span class="number">2</span>**x + <span class="number">10</span></span><br><span class="line">plt.bar(x,y,facecolor=<span class="string">'#9999ff'</span>,edgecolor=<span class="string">'white'</span>)<span class="comment">#柱颜色，柱边框颜色</span></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> zip(x,y):<span class="comment">#zip指把x，y结合为一个整体，一次可以读取一个x和一个y</span></span><br><span class="line">    plt.text(x,y,<span class="string">'%.2f'</span> % y,ha=<span class="string">'center'</span>,va=<span class="string">'bottom'</span>)<span class="comment">#指字体在中间和柱最顶的顶部</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104104942460?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="等高图"><a href="#等高图" class="headerlink" title="等高图"></a>等高图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="comment">#用来生成高度</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>-x/<span class="number">2</span>+x**<span class="number">5</span>+y**<span class="number">3</span>)*np.exp(-x**<span class="number">2</span>-y**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">100</span>)</span><br><span class="line">y = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">X,Y = np.meshgrid(x,y)<span class="comment">#将x，y指传入网格中</span></span><br><span class="line">plt.contourf(X,Y,f(X,Y),<span class="number">8</span>,alpha=<span class="number">0.75</span>,cmap=plt.cm.hot)<span class="comment">#8指图中的8+1根线，绘制等温线，其中cmap指颜色</span></span><br><span class="line"></span><br><span class="line">C = plt.contour(X,Y,f(X,Y),<span class="number">8</span>,colors=<span class="string">'black'</span>,linewidth=<span class="number">.5</span>)<span class="comment">#colors指等高线颜色</span></span><br><span class="line">plt.clabel(C,inline=<span class="keyword">True</span>,fontsize=<span class="number">10</span>)<span class="comment">#inline=True指字体在等高线中</span></span><br><span class="line"></span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.yticks(())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104104959658?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="matplotlib绘制3D图"><a href="#matplotlib绘制3D图" class="headerlink" title="matplotlib绘制3D图"></a>matplotlib绘制3D图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D<span class="comment">#动态图所需要的包</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-4</span>,<span class="number">4</span>,<span class="number">0.25</span>)<span class="comment">#0.25指-4至4间隔为0.25</span></span><br><span class="line">y = np.arange(<span class="number">-4</span>,<span class="number">4</span>,<span class="number">0.25</span>)</span><br><span class="line">X,Y = np.meshgrid(x,y)<span class="comment">#x，y放入网格</span></span><br><span class="line">R = np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>)</span><br><span class="line">Z = np.sin(R)</span><br><span class="line"></span><br><span class="line">ax.plot_surface(X,Y,Z,rstride=<span class="number">1</span>,cstride=<span class="number">1</span>,cmap=plt.get_cmap(<span class="string">'rainbow'</span>))<span class="comment">#rstride=1指x方向和y方向的色块大小</span></span><br><span class="line">ax.contourf(X,Y,Z,zdir=<span class="string">'z'</span>,offset=<span class="number">-2</span>,cmap=<span class="string">'rainbow'</span>)<span class="comment">#zdir指映射到z方向，-2代表映射到了z=-2</span></span><br><span class="line">ax.set_zlim(<span class="number">-2</span>,<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104105014196?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="子图像"><a href="#子图像" class="headerlink" title="子图像"></a>子图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)<span class="comment">#建立一个两行两列的画布，第一个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)<span class="comment">#第二个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">#第三个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)<span class="comment">#第四个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104105921054?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)<span class="comment">#建立一个两行两列的画布，第一个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)<span class="comment">#第二个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)<span class="comment">#第三个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>)<span class="comment">#第四个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104105947745?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation<span class="comment">#动态图所需要的包</span></span><br><span class="line">fig,ax = plt.subplots()<span class="comment">#子图像</span></span><br><span class="line">x = np.arange(<span class="number">0</span>,<span class="number">2</span>*np.pi,<span class="number">0.01</span>)</span><br><span class="line">line, = ax.plot(x,np.sin(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animate</span><span class="params">(i)</span>:</span></span><br><span class="line">    line.set_ydata(np.sin(x+i/<span class="number">10</span>))<span class="comment">#用来改变的y对应的值</span></span><br><span class="line">    <span class="keyword">return</span> line,</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    line.set_ydata(np.sin(x))<span class="comment">#动态图初始图像</span></span><br><span class="line">    <span class="keyword">return</span> line,</span><br><span class="line"></span><br><span class="line">ani = animation.FuncAnimation(fig=fig,func=animate,init_func=init,interval=<span class="number">20</span>)<span class="comment">#动态作图的方法，func动态图函数，init_func初始化函数，interval指图像改变的时间间隔</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171104105059995?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="注：若想看动态效果请在ipython中使用"><a href="#注：若想看动态效果请在ipython中使用" class="headerlink" title="注：若想看动态效果请在ipython中使用"></a>注：若想看动态效果请在ipython中使用</h4>]]></content>
    
    <summary type="html">
    
      本文总结了python的matplotlib中的一些常见函数的使用
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/03/hello-world/"/>
    <id>http://yoursite.com/2017/11/03/hello-world/</id>
    <published>2017-11-02T16:00:00.000Z</published>
    <updated>2018-04-19T13:33:13.390Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
