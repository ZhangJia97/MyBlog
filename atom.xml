<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随我的博客</title>
  
  <subtitle>记录学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-19T13:21:38.374Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>随我</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>链表的常见操作</title>
    <link href="http://yoursite.com/2018/04/19/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/19/链表的常见操作/</id>
    <published>2018-04-19T13:16:35.000Z</published>
    <updated>2018-04-19T13:21:38.374Z</updated>
    
    <content type="html"><![CDATA[<h6 id="这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下："><a href="#这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下：" class="headerlink" title="这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下："></a>这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125; Node,*PNode;</span><br><span class="line"><span class="function">PNode <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//创建链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNode)</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_empty</span><span class="params">(PNode)</span></span>;<span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNode)</span></span>;<span class="comment">//判断链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_list</span><span class="params">(PNode,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;<span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(PNode,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;<span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNode)</span></span>;<span class="comment">//对链表进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PNode pHead = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    pHead = create_list();</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表的长度为%d\n"</span>,len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要插入的位置以及数值:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;pos,&amp;val);</span><br><span class="line">    insert_list(pHead, pos, &amp;val);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要删除的位置!\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos);</span><br><span class="line">    delete_list(pHead, pos, &amp;val);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    sort_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"排序后的链表数据如下:"</span>);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PNode <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    </span><br><span class="line">    PNode pHead = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(pHead == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PNode pTail = pHead;<span class="comment">//这里是创建一个指向尾节点的变量</span></span><br><span class="line">    pTail-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要生成的链表的节点数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个节点的值:\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</span><br><span class="line">        </span><br><span class="line">        PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pNew-&gt;data = val;</span><br><span class="line">        pTail-&gt;pNext = pNew;</span><br><span class="line">        pNew-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">        pTail = pNew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pHead;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    PNode p = pHead-&gt;pNext;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表中的数据为:"</span>);</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_empty</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pHead-&gt;pNext == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该链表为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该链表不为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    PNode p = pHead-&gt;pNext;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_list</span><span class="params">(PNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span>* val)</span></span>&#123;</span><br><span class="line">    PNode p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; i&lt;pos<span class="number">-1</span>) &#123;<span class="comment">//使指针最后指向需要插入的节点的前一个节点</span></span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;pos<span class="number">-1</span> || p==<span class="literal">NULL</span>)&#123;<span class="comment">//当该节点为空，则说明该节点为尾节点的下一个节点，即输入不合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入不正确!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"动态分配内存失败!\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pNew-&gt;data = *val;</span><br><span class="line">            pNew-&gt; pNext = p-&gt;pNext;</span><br><span class="line">            p-&gt;pNext = pNew;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(PNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span>* val)</span></span>&#123;</span><br><span class="line">    PNode p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;pNext != <span class="literal">NULL</span> &amp;&amp; i&lt;pos<span class="number">-1</span>) &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;pos<span class="number">-1</span> || p-&gt;pNext == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入不正确!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode q = p-&gt;pNext;</span><br><span class="line">        *val = p-&gt;pNext-&gt;data;</span><br><span class="line">        p-&gt;pNext = p-&gt;pNext-&gt;pNext;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;<span class="comment">//将q中的野指针赋值为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除成功，删除的节点值为%d"</span>,*val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNode pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    PNode p, q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>,p=pHead-&gt;pNext; i&lt;len<span class="number">-1</span>; i++,p=p-&gt;pNext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>,q=p-&gt;pNext; j&lt;len; j++,q=q-&gt;pNext)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)  <span class="comment">//类似于数组中的:  a[i] &gt; a[j]</span></span><br><span class="line">            &#123;</span><br><span class="line">                t = p-&gt;data;<span class="comment">//类似于数组中的:  t = a[i];</span></span><br><span class="line">                p-&gt;data = q-&gt;data; <span class="comment">//类似于数组中的:  a[i] = a[j];</span></span><br><span class="line">                q-&gt;data = t; <span class="comment">//类似于数组中的:  a[j] = t;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。"><a href="#注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。" class="headerlink" title="注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。"></a>注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。</h6>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后对链表常见操作的代码的总结
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何使用github+hexo搭建一个博客</title>
    <link href="http://yoursite.com/2018/04/12/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/04/12/如何使用github+hexo搭建一个博客/</id>
    <published>2018-04-12T12:14:06.000Z</published>
    <updated>2018-04-16T13:08:51.205Z</updated>
    
    <content type="html"><![CDATA[<p>本文章是查阅了一下两个博客文章后所做的总结：<br><a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a><br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p><h3 id="一、配置环境以及准备"><a href="#一、配置环境以及准备" class="headerlink" title="一、配置环境以及准备"></a>一、配置环境以及准备</h3><h4 id="1-安装并配置node-js以及git"><a href="#1-安装并配置node-js以及git" class="headerlink" title="1.安装并配置node.js以及git"></a>1.安装并配置node.js以及git</h4><h4 id="2-在github中新建一个项目（记得点击添加README，项目命最好是“github用户名-github-io”）"><a href="#2-在github中新建一个项目（记得点击添加README，项目命最好是“github用户名-github-io”）" class="headerlink" title="2.在github中新建一个项目（记得点击添加README，项目命最好是“github用户名.github.io”）"></a>2.在github中新建一个项目（记得点击添加README，项目命最好是“github用户名.github.io”）</h4><h4 id="3-在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。"><a href="#3-在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。" class="headerlink" title="3.在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。"></a>3.在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。</h4><h4 id="4-在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo"><a href="#4-在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo" class="headerlink" title="4.在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo"></a>4.在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><h4 id="5-使用下面的命令查看是否安装成功"><a href="#5-使用下面的命令查看是否安装成功" class="headerlink" title="5.使用下面的命令查看是否安装成功"></a>5.使用下面的命令查看是否安装成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h4 id="6-输入下面的命令初始化文件夹"><a href="#6-输入下面的命令初始化文件夹" class="headerlink" title="6.输入下面的命令初始化文件夹"></a>6.输入下面的命令初始化文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4 id="7-输入下面的命令安装所需要的组件"><a href="#7-输入下面的命令安装所需要的组件" class="headerlink" title="7.输入下面的命令安装所需要的组件"></a>7.输入下面的命令安装所需要的组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="8-输入下面的命令首次体验hexo"><a href="#8-输入下面的命令首次体验hexo" class="headerlink" title="8.输入下面的命令首次体验hexo"></a>8.输入下面的命令首次体验hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="9-输入下面的命令开启服务器（若端口被占用则使用-hexo-server-p-端口号-）来改变端口号"><a href="#9-输入下面的命令开启服务器（若端口被占用则使用-hexo-server-p-端口号-）来改变端口号" class="headerlink" title="9.输入下面的命令开启服务器（若端口被占用则使用 hexo server -p 端口号 ）来改变端口号"></a>9.输入下面的命令开启服务器（若端口被占用则使用 <code>hexo server -p 端口号</code> ）来改变端口号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180413134226239?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="出现该页面则说明成功了"><a href="#出现该页面则说明成功了" class="headerlink" title="出现该页面则说明成功了"></a>出现该页面则说明成功了</h5><h4 id="10-将Hexo与github-page联系起来"><a href="#10-将Hexo与github-page联系起来" class="headerlink" title="10.将Hexo与github page联系起来"></a>10.将Hexo与github page联系起来</h4><h5 id="（1）配置Git个人信息-如果你之前已经配置好git个人信息，请跳过这一个步骤"><a href="#（1）配置Git个人信息-如果你之前已经配置好git个人信息，请跳过这一个步骤" class="headerlink" title="（1）配置Git个人信息(如果你之前已经配置好git个人信息，请跳过这一个步骤)"></a>（1）配置Git个人信息(如果你之前已经配置好git个人信息，请跳过这一个步骤)</h5><h5 id="a-设置Git的user-name和email：-如果是第一次的话）"><a href="#a-设置Git的user-name和email：-如果是第一次的话）" class="headerlink" title="a.设置Git的user name和email：(如果是第一次的话）"></a>a.设置Git的user name和email：(如果是第一次的话）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your_name&quot;</span><br><span class="line">git config --global user.email &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h6 id="b-生成密钥"><a href="#b-生成密钥" class="headerlink" title="b.生成密钥"></a>b.生成密钥</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h4 id="11-配置Deployment"><a href="#11-配置Deployment" class="headerlink" title="11.配置Deployment"></a>11.配置Deployment</h4><h5 id="在-config-yml文件中，找到Deployment，然后按照如下修改："><a href="#在-config-yml文件中，找到Deployment，然后按照如下修改：" class="headerlink" title="在_config.yml文件中，找到Deployment，然后按照如下修改："></a>在_config.yml文件中，找到Deployment，然后按照如下修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="二、写博客，发布文章"><a href="#二、写博客，发布文章" class="headerlink" title="二、写博客，发布文章"></a>二、写博客，发布文章</h3><h4 id="1-使用下面的命令新建一个博文（新建后在hexo-source-posts中将会看到你新建的-md后缀的文件）"><a href="#1-使用下面的命令新建一个博文（新建后在hexo-source-posts中将会看到你新建的-md后缀的文件）" class="headerlink" title="1.使用下面的命令新建一个博文（新建后在hexo\source\ _posts中将会看到你新建的.md后缀的文件）"></a>1.使用下面的命令新建一个博文（新建后在hexo\source\ _posts中将会看到你新建的.md后缀的文件）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;article title&quot;</span><br></pre></td></tr></table></figure><h4 id="2-使用markdown编辑器打开并进行编辑文章"><a href="#2-使用markdown编辑器打开并进行编辑文章" class="headerlink" title="2.使用markdown编辑器打开并进行编辑文章"></a>2.使用markdown编辑器打开并进行编辑文章</h4><h4 id="3-使用下面的命令进行生成和部署，成功后便可在https-yourName-github-io访问您的博文"><a href="#3-使用下面的命令进行生成和部署，成功后便可在https-yourName-github-io访问您的博文" class="headerlink" title="3.使用下面的命令进行生成和部署，成功后便可在https://yourName.github.io访问您的博文"></a>3.使用下面的命令进行生成和部署，成功后便可在<a href="https://yourName.github.io访问您的博文" target="_blank" rel="noopener">https://yourName.github.io访问您的博文</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   // 生成</span><br><span class="line">hexo d   // 部署</span><br></pre></td></tr></table></figure><h5 id="注：若提示-deloyer-not-found-git-则说明缺少一个扩展，运行-npm-install-save-hexo-deployer-git-命令即可解决"><a href="#注：若提示-deloyer-not-found-git-则说明缺少一个扩展，运行-npm-install-save-hexo-deployer-git-命令即可解决" class="headerlink" title="注：若提示 deloyer not found:git 则说明缺少一个扩展，运行 npm install --save hexo-deployer-git 命令即可解决"></a>注：若提示 <code>deloyer not found:git</code> 则说明缺少一个扩展，运行 <code>npm install --save hexo-deployer-git</code> 命令即可解决</h5><h3 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h3><p>hexo提供了许许多多的主题，我们可以轻松的修改一个自己喜欢的主题，具体方法如下：</p><h4 id="1-在-Hexo-中有两份主要的配置文件，其名称都是-config-yml。-其中，一份位于站点根目录下，主要包含-Hexo-本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。-为了描述方便，在以下说明中，将前者称为-站点配置文件，-后者称为-主题配置文件。在文件夹的themes中使用-git-clone-命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用"><a href="#1-在-Hexo-中有两份主要的配置文件，其名称都是-config-yml。-其中，一份位于站点根目录下，主要包含-Hexo-本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。-为了描述方便，在以下说明中，将前者称为-站点配置文件，-后者称为-主题配置文件。在文件夹的themes中使用-git-clone-命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用" class="headerlink" title="1.在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。在文件夹的themes中使用 git clone 命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用"></a>1.在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 <em>站点配置文件</em>， 后者称为 <em>主题配置文件</em>。在文件夹的themes中使用 <code>git clone</code> 命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h4 id="2-启用主题-与所有-Hexo-主题启用的模式一样。-当-克隆-下载-完成后，打开-站点配置文件，-找到-theme-字段，并将其值更改为-next。-启用-NexT-主题"><a href="#2-启用主题-与所有-Hexo-主题启用的模式一样。-当-克隆-下载-完成后，打开-站点配置文件，-找到-theme-字段，并将其值更改为-next。-启用-NexT-主题" class="headerlink" title="2.启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题"></a>2.启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，检查站点是否正确运行。 当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。选择 Scheme Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line">Mist - Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">Pisces - 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面</span><br></pre></td></tr></table></figure></p><p>注释 # 即可。 选择 Pisce Scheme<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure></p><p>5）<strong>设置语言</strong> 编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">语言</th><th style="text-align:center">代码</th><th style="text-align:center">设定实例</th></tr></thead><tbody><tr><td style="text-align:center">English</td><td style="text-align:center">en</td><td style="text-align:center">language: en</td></tr><tr><td style="text-align:center">简体中文</td><td style="text-align:center">zh-Hans</td><td style="text-align:center">language:zh-Hans</td></tr><tr><td style="text-align:center">Français</td><td style="text-align:center">fr-FR</td><td style="text-align:center">language:fr-FR</td></tr><tr><td style="text-align:center">Português</td><td style="text-align:center">pt</td><td style="text-align:center">language:pt</td></tr><tr><td style="text-align:center">繁體中文</td><td style="text-align:center">zh-hk或者zh-tw</td><td style="text-align:center">language:zh-hk</td></tr><tr><td style="text-align:center">Русский язык</td><td style="text-align:center">ru</td><td style="text-align:center">language:ru</td></tr><tr><td style="text-align:center">Deutsch</td><td style="text-align:center">de</td><td style="text-align:center">language:de</td></tr><tr><td style="text-align:center">日本語</td><td style="text-align:center">ja</td><td style="text-align:center">language:ja</td></tr><tr><td style="text-align:center">Indonesian</td><td style="text-align:center">id</td><td style="text-align:center">language:id</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      本文是我在网上查找了部分搭建博客的教程，以及使用github+hexo搭建博客时的流程以及遇到的一些问题的总结
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>flask连接sqlite3数据库</title>
    <link href="http://yoursite.com/2018/02/12/flask%E8%BF%9E%E6%8E%A5sqlite3%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/02/12/flask连接sqlite3数据库/</id>
    <published>2018-02-12T08:00:56.000Z</published>
    <updated>2018-04-19T16:04:26.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-在flask文件夹中新建一个models-py文件用来定义模型，内部代码如下"><a href="#1-在flask文件夹中新建一个models-py文件用来定义模型，内部代码如下" class="headerlink" title="1.在flask文件夹中新建一个models.py文件用来定义模型，内部代码如下"></a>1.在flask文件夹中新建一个models.py文件用来定义模型，内部代码如下</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3 <span class="comment">#导入sqlite3包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#定义该函数用来连接数据库</span></span><br><span class="line">    <span class="keyword">return</span> sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,id,name)</span>:</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        sql = <span class="string">"insert into user VALUES (?,?)"</span><span class="comment">#sql语句</span></span><br><span class="line">        conn = get_conn()<span class="comment">#连接数据库</span></span><br><span class="line">        cursor = conn.cursor()<span class="comment">#定义一个游标</span></span><br><span class="line">        cursor.execute(sql,(self.id,self.name))<span class="comment">#执行sql语句</span></span><br><span class="line">        conn.commit()<span class="comment">#提交数据库改动</span></span><br><span class="line">        cursor.close()<span class="comment">#关闭游标</span></span><br><span class="line">        conn.close()<span class="comment">#关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    staticmethod相当于一个定义在类里面的函数，所以如果一个方法既不跟实例</span></span><br><span class="line"><span class="string">    相关也不跟特定的类相关，推荐将其定义为一个staticmethod，这样不仅使代</span></span><br><span class="line"><span class="string">    码一目了然，而且似的利于维护代码。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">()</span>:</span></span><br><span class="line">        sql = <span class="string">"select * from user"</span></span><br><span class="line">        conn = get_conn()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        rows = cursor.execute(sql)</span><br><span class="line">        users = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            user = User(row[<span class="number">0</span>],row[<span class="number">1</span>])</span><br><span class="line">            users.append(user)</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> users</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'id:&#123;&#125;--name:&#123;&#125;'</span>.format(self.id,self.name)<span class="comment">#注此处的是点不是逗号</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="2-在flask文件夹中新建一个manage-py文件"><a href="#2-在flask文件夹中新建一个manage-py文件" class="headerlink" title="2.在flask文件夹中新建一个manage.py文件"></a>2.在flask文件夹中新建一个manage.py文件</h1><hr><p>###（1）导入flask_script包，导入sqlite3包，导入models.py中定义的模型，导入flask中的应用，所以最终头部代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br></pre></td></tr></table></figure></p><hr><p>###（2）创建数据库，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    sql = <span class="string">"create table user (id INT,name TEXT)"</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure></p><hr><p>###（3）保存数据，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'csdn'</span>)</span><br><span class="line">    user.save()</span><br></pre></td></tr></table></figure></p><hr><p>###（4）查询数据，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br></pre></td></tr></table></figure></p><hr><h3 id="整体代码如下"><a href="#整体代码如下" class="headerlink" title="整体代码如下"></a>整体代码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    sql = <span class="string">"create table user (id INT,name TEXT)"</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'zhangjia'</span>)</span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><hr><hr><h1 id="3-在终端中使用命令即可运行数据库的创建，添加以及查询"><a href="#3-在终端中使用命令即可运行数据库的创建，添加以及查询" class="headerlink" title="3.在终端中使用命令即可运行数据库的创建，添加以及查询"></a>3.在终端中使用命令即可运行数据库的创建，添加以及查询</h1>]]></content>
    
    <summary type="html">
    
      本文是flask连接sqlite3数据库的总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>flask路由，消息提醒，以及异常处理</title>
    <link href="http://yoursite.com/2018/02/11/flask%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%B6%88%E6%81%AF%E6%8F%90%E9%86%92%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/02/11/flask路由，消息提醒，以及异常处理/</id>
    <published>2018-02-11T13:37:46.000Z</published>
    <updated>2018-04-19T16:02:21.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建一个小的flask应用"><a href="#1-创建一个小的flask应用" class="headerlink" title="1.创建一个小的flask应用"></a>1.创建一个小的flask应用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">（文件名为app.py）</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>上述代码便是一个最简单的flask应用，使用<code>python app.py</code>即可运行，命令行运行情况如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python app.py</span><br><span class="line"> * Running on http://127.0.0.1:5000/</span><br></pre></td></tr></table></figure></p><hr><hr><h1 id="2-flask的路由"><a href="#2-flask的路由" class="headerlink" title="2.flask的路由"></a>2.flask的路由</h1><hr><p>###（1）下面的代码表示在<a href="http://127.0.0.1:5000/hello路径下可以在网页中看到返回值`hello`" target="_blank" rel="noopener">http://127.0.0.1:5000/hello路径下可以在网页中看到返回值`hello`</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure></p><hr><p>###（2）下面的代码表示可以在获取路由中的值，如在路径中输入路径<a href="http://127.0.0.1:5000/hello/123，页面中将会显示返回值`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello/123，页面中将会显示返回值`hello</a> 123`<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello/&lt;id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+id)</span><br></pre></td></tr></table></figure></p><hr><p>###（3）下面的代码同样可以获取路由中的值，如在路径中输入<a href="http://127.0.0.1:5000/hello?id=123，页面将会显示返回值`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello?id=123，页面将会显示返回值`hello</a> 123`<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    id = request.args.get(<span class="string">'id'</span>)</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+id)</span><br></pre></td></tr></table></figure></p><hr><hr><h1 id="3-flask反向路由"><a href="#3-flask反向路由" class="headerlink" title="3.flask反向路由"></a>3.flask反向路由</h1><hr><h4 id="第二个函数将会通过url-for函数来获取函数名为hello的函数的路由，即在路径中输入http-127-0-0-1-5000-hello-url，网页将会显示-hello-hello"><a href="#第二个函数将会通过url-for函数来获取函数名为hello的函数的路由，即在路径中输入http-127-0-0-1-5000-hello-url，网页将会显示-hello-hello" class="headerlink" title="第二个函数将会通过url_for函数来获取函数名为hello的函数的路由，即在路径中输入http://127.0.0.1:5000/hello_url，网页将会显示`hello /hello`"></a>第二个函数将会通过url_for函数来获取函数名为hello的函数的路由，即在路径中输入<a href="http://127.0.0.1:5000/hello_url，网页将会显示`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello_url，网页将会显示`hello</a> /hello`</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#反向路由</span></span><br><span class="line"><span class="meta">@app.route('/hello_url')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+url_for(<span class="string">'hello'</span>))</span><br></pre></td></tr></table></figure><hr><hr><h1 id="4-前后端数据传输"><a href="#4-前后端数据传输" class="headerlink" title="4.前后端数据传输"></a>4.前后端数据传输</h1><hr><p>###（1）后端向前端传输数据</p><h4 id="下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可看到页面返回了"><a href="#下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可看到页面返回了" class="headerlink" title="下面的代码最后在在路径中输入http://127.0.0.1:5000/hello即可看到页面返回了"></a>下面的代码最后在在路径中输入<a href="http://127.0.0.1:5000/hello即可看到页面返回了" target="_blank" rel="noopener">http://127.0.0.1:5000/hello即可看到页面返回了</a></h4><p><code>hello csdn</code><br><code>hello 1</code></p><h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">"csdn"</span>)</span><br><span class="line">    context = &#123;<span class="string">"user"</span>:user&#125;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>,context=context)</span><br><span class="line">    <span class="comment">#注意，此处的传参数方式与Django中的不同，前一个context指传到前端的参数名</span></span><br></pre></td></tr></table></figure><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>user_index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; context.user.user_name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; context.user.user_id &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>###（2）前端向后端提交数据</p><h4 id="下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可返回一个表单，-if-request-method-‘GET’-用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理"><a href="#下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可返回一个表单，-if-request-method-‘GET’-用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理" class="headerlink" title="下面的代码最后在在路径中输入http://127.0.0.1:5000/hello即可返回一个表单，`if request.method == ‘GET’:`用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理"></a>下面的代码最后在在路径中输入<a href="http://127.0.0.1:5000/hello即可返回一个表单，`if" target="_blank" rel="noopener">http://127.0.0.1:5000/hello即可返回一个表单，`if</a> request.method == ‘GET’:`用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理</h4><h4 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request,flash</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/hello",methods=['POST','GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = request.form</span><br><span class="line">        user_name = form.get(<span class="string">"user_name"</span>)</span><br><span class="line">        password = form.get(<span class="string">"password"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_name:</span><br><span class="line">            flash(<span class="string">"Please input username"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> password:</span><br><span class="line">            flash(<span class="string">"Please input password"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user_name == <span class="string">"csdn"</span> <span class="keyword">and</span> password == <span class="string">"12345678"</span>:</span><br><span class="line">            flash(<span class="string">"Login succeed"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">"username or password is wrong"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br></pre></td></tr></table></figure><h4 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; get_flashed_messages()[0] &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="5-消息提醒"><a href="#5-消息提醒" class="headerlink" title="5.消息提醒"></a>5.消息提醒</h1><hr><p>####（1）使用消息提示是需要配置secret_key</p><p>####（2）flash获得的为一个列表，所以前端使用<code>get_flashed_messages()[0]</code>来获得消息提醒</p><h4 id="后端代码-2"><a href="#后端代码-2" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,render_template,flash</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = &apos;123&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/hello&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    flash(&quot;csdn&quot;)</span><br><span class="line">    return render_template(&quot;hello.html&quot;)</span><br></pre></td></tr></table></figure><h4 id="前端代码-2"><a href="#前端代码-2" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; get_flashed_messages()[0] &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6.异常处理"></a>6.异常处理</h1><hr><p>###（1）404错误</p><h4 id="当路由中输入错误路径，将会返回404页面"><a href="#当路由中输入错误路径，将会返回404页面" class="headerlink" title="当路由中输入错误路径，将会返回404页面"></a>当路由中输入错误路径，将会返回404页面</h4><h4 id="后端代码-3"><a href="#后端代码-3" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"404.html"</span>)</span><br></pre></td></tr></table></figure><h4 id="前端代码-3"><a href="#前端代码-3" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（文件名为404.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>抱歉您找的页面不存在<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>###（2）有条件的跳转到404页面</p><h4 id="当在路由中输入http-127-0-0-1-5000-error-login-1是返回登录成功页面，反之返回404页面"><a href="#当在路由中输入http-127-0-0-1-5000-error-login-1是返回登录成功页面，反之返回404页面" class="headerlink" title="当在路由中输入http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面"></a>当在路由中输入<a href="http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面" target="_blank" rel="noopener">http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面</a></h4><p>####后端代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,abort</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/hello/&lt;id&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> int(id) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br></pre></td></tr></table></figure></p><h4 id="前端代码-4"><a href="#前端代码-4" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>您已登录成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      flask路由，消息提醒，以及异常处理是flask中很重要的部分，本文对此进行了总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Django网站部署前期准备</title>
    <link href="http://yoursite.com/2018/02/10/Django%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2018/02/10/Django网站部署前期准备/</id>
    <published>2018-02-10T13:52:08.000Z</published>
    <updated>2018-04-19T13:30:50.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="建立虚拟环境"><a href="#建立虚拟环境" class="headerlink" title="建立虚拟环境"></a>建立虚拟环境</h3><hr><p>####（1）创建一个空文件夹，并命名为learning_log</p><p>####（2）在终端中切换到该文件夹中使用<code>virtualenv ll_env</code>创建一个虚拟环境，如创建失败请使用<code>pip install virtualenv</code>命令来安装virtualenv包</p><p>####（3）完成上述命令后learning_log文件加如下所示<br><img src="http://img.blog.csdn.net/20180210205316970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180210205350743?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><hr><p>####（1）使用<code>source ll_env/bin/activate</code>命令激活虚拟环境，激活后终端前将出现（ll_env）<br><img src="http://img.blog.csdn.net/20180210205632917?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h5 id="注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境"><a href="#注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境" class="headerlink" title="注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境"></a>注：如果需要停止虚拟环境，请使用<code>deactivate</code>命令来关闭虚拟环境</h5><hr><hr><h3 id="安装，新建Django项目"><a href="#安装，新建Django项目" class="headerlink" title="安装，新建Django项目"></a>安装，新建Django项目</h3><hr><p>####（1）创建并激活虚拟环境之后，我们就可以安装Django了安装命令为<code>pip install django</code></p><p>####（2）使用<code>django-admin.py startproject learning_log .</code>来新建项目（注意不要忽略.，如没有.则manage.py文件将不与ll_env文件夹在同一目录，会影响后期部署）<br><img src="http://img.blog.csdn.net/20180210210451199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><hr><p>####（1）使用命令<code>python manage.py migrate</code>来修改数据库，我们将这称为迁移数据库，首次执行将新建一个必要的数据表<br><img src="http://img.blog.csdn.net/20180210211321732?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="查看项目"><a href="#查看项目" class="headerlink" title="查看项目"></a>查看项目</h3><hr><p>####（1）使用<code>python manage.py runserver</code>来启动该项目，启动之后便可在<a href="http://127.0.0.1:8000/打开该网站，若8000端口被占用可使用`python" target="_blank" rel="noopener">http://127.0.0.1:8000/打开该网站，若8000端口被占用可使用`python</a> manage.py runserver 8001`使网站在8001端口打开，如仍被占用，请继续向后增加，直至成功，关闭请按ctrl+c<br><img src="http://img.blog.csdn.net/20180210211543833?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180210212037748?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h3><hr><p>####（1）使用<code>python manage.py startapp learning_logs</code>命令创建一个名为learning_logs的app,运行后文件夹中将出现learning_logs文件夹</p><hr><hr><h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><hr><p>####（1）打开models.py文件添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br></pre></td></tr></table></figure></p><h5 id="DateTimeField-auto-now-add-True-是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串"><a href="#DateTimeField-auto-now-add-True-是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串" class="headerlink" title="DateTimeField(auto_now_add=True)是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串"></a><code>DateTimeField(auto_now_add=True)</code>是指日期自动添加，<strong>str</strong>函数表示了该模型的简单显示，该模型的返回值等于text字符串</h5><hr><hr><p>###激活模型</p><hr><p>####（1）在settings.py文件中将learning_logs这个app添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#我的应用</span></span><br><span class="line">    <span class="string">'learning_logs'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>####（2）我们使用<code>python manage.py makemigrations</code>命令，makemigrations是Django确认数据库如何修改，输出表示django创建了一个0001_initial.py的迁移文件，之后使用<code>python manage.py migrate</code>这种迁移数据库来修改数据库<br><img src="http://img.blog.csdn.net/20180210213835645?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>#####注：管理数据的正常顺序为：修改models.py，对修改使用makemigrations，最后使用migrate来迁移数据</p><hr><hr><p>###Django管理网站</p><hr><p>####（1）创建超级用户，命令为<code>python manage.py createsuperuser</code></p><p>####（2）向管理网站注册模型，在admin.py文件中添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic,Entry</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br></pre></td></tr></table></figure></p><p>####之后登录<a href="http://127.0.0.1:8000/admin通过Django的后台来进行网站管理，在这个网站中寻在Topic模型，可以在这里添加Topic" target="_blank" rel="noopener">http://127.0.0.1:8000/admin通过Django的后台来进行网站管理，在这个网站中寻在Topic模型，可以在这里添加Topic</a></p><p>####（3）同理我们可以定义一个Entry模型，models.py文件中添加的代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    topic = models.ForeignKey(Topic)</span><br><span class="line">    text = models.TextField()</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name_plural = <span class="string">'entries'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text[:<span class="number">50</span>] + <span class="string">'...'</span></span><br></pre></td></tr></table></figure></p><h4 id="这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys"><a href="#这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys" class="headerlink" title="这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys"></a>这里的<strong>str</strong>指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys</h4><p>####（4）进行数据迁移</p><p>####（5）向管理网站注册entry，在admin.py中添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.site.register(Entry)</span><br></pre></td></tr></table></figure></p><hr><hr>]]></content>
    
    <summary type="html">
    
      本文总结了Django进行开发的常见前期追被工作
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow由于未初始化变量所导致的错误</title>
    <link href="http://yoursite.com/2017/12/07/tensorflow%E7%94%B1%E4%BA%8E%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%98%E9%87%8F%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2017/12/07/tensorflow由于未初始化变量所导致的错误/</id>
    <published>2017-12-07T07:51:52.000Z</published>
    <updated>2018-04-19T15:58:47.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">train_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'train'</span>)</span><br><span class="line">train_input_data = np.array(train_input_data).ravel()</span><br><span class="line">train_input_data = list(train_input_data)</span><br><span class="line">train_input_data = tf.constant(train_input_data,dtype=tf.float32)</span><br><span class="line">train_output_data = train_input_data</span><br><span class="line"></span><br><span class="line">test_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'test'</span>)</span><br><span class="line">test_input_data = np.array(test_input_data).ravel()</span><br><span class="line">test_input_data = list(test_input_data)</span><br><span class="line">test_input_data = tf.constant(test_input_data,shape=[<span class="number">270</span>,<span class="number">1</span>],dtype=tf.float32)</span><br><span class="line">test_output_data = test_input_data</span><br><span class="line"></span><br><span class="line">print(type(train_input_data))</span><br><span class="line"></span><br><span class="line">fc_mean, fc_var = tf.nn.moments(train_input_data,axes=[<span class="number">0</span>])</span><br><span class="line">scale = tf.Variable(tf.ones([<span class="number">1</span>]))</span><br><span class="line">shift = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">epslion = <span class="number">0.001</span></span><br><span class="line">train_input_data = tf.nn.batch_normalization(train_input_data,fc_mean,fc_var,shift,scale,epslion)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(train_input_data)</span><br></pre></td></tr></table></figure><h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1327</span>, <span class="keyword">in</span> _do_call</span><br><span class="line">    <span class="keyword">return</span> fn(*args)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1306</span>, <span class="keyword">in</span> _run_fn</span><br><span class="line">    status, run_metadata)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/contextlib.py"</span>, line <span class="number">89</span>, <span class="keyword">in</span> __exit__</span><br><span class="line">    next(self.gen)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py"</span>, line <span class="number">466</span>, <span class="keyword">in</span> raise_exception_on_not_ok_status</span><br><span class="line">    pywrap_tensorflow.TF_GetCode(status))</span><br><span class="line">tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized value Variable_1</span><br><span class="line"> [[Node: Variable_1/read = Identity[T=DT_FLOAT, _class=[<span class="string">"loc:@Variable_1"</span>], _device=<span class="string">"/job:localhost/replica:0/task:0/cpu:0"</span>](Variable_1)]]</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/zhangjia/PycharmProjects/太阳能预测/test.py"</span>, line <span class="number">30</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a = sess.run(train_input_data)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">895</span>, <span class="keyword">in</span> run</span><br><span class="line">    run_metadata_ptr)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1124</span>, <span class="keyword">in</span> _run</span><br><span class="line">    feed_dict_tensor, options, run_metadata)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1321</span>, <span class="keyword">in</span> _do_run</span><br><span class="line">    options, run_metadata)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1340</span>, <span class="keyword">in</span> _do_call</span><br><span class="line">    <span class="keyword">raise</span> type(e)(node_def, op, message)</span><br><span class="line">tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized value Variable_1</span><br><span class="line"> [[Node: Variable_1/read = Identity[T=DT_FLOAT, _class=[<span class="string">"loc:@Variable_1"</span>], _device=<span class="string">"/job:localhost/replica:0/task:0/cpu:0"</span>](Variable_1)]]</span><br><span class="line"></span><br><span class="line">Caused by op <span class="string">'Variable_1/read'</span>, defined at:</span><br><span class="line">  File <span class="string">"/Users/zhangjia/PycharmProjects/太阳能预测/test.py"</span>, line <span class="number">21</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    shift = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/ops/variables.py"</span>, line <span class="number">199</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    expected_shape=expected_shape)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/ops/variables.py"</span>, line <span class="number">330</span>, <span class="keyword">in</span> _init_from_args</span><br><span class="line">    self._snapshot = array_ops.identity(self._variable, name=<span class="string">"read"</span>)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py"</span>, line <span class="number">1400</span>, <span class="keyword">in</span> identity</span><br><span class="line">    result = _op_def_lib.apply_op(<span class="string">"Identity"</span>, input=input, name=name)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py"</span>, line <span class="number">767</span>, <span class="keyword">in</span> apply_op</span><br><span class="line">    op_def=op_def)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/ops.py"</span>, line <span class="number">2630</span>, <span class="keyword">in</span> create_op</span><br><span class="line">    original_op=self._default_original_op, op_def=op_def)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/ops.py"</span>, line <span class="number">1204</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    self._traceback = self._graph._extract_stack()  <span class="comment"># pylint: disable=protected-access</span></span><br><span class="line"></span><br><span class="line">FailedPreconditionError (see above <span class="keyword">for</span> traceback): Attempting to use uninitialized value Variable_1</span><br><span class="line"> [[Node: Variable_1/read = Identity[T=DT_FLOAT, _class=[<span class="string">"loc:@Variable_1"</span>], _device=<span class="string">"/job:localhost/replica:0/task:0/cpu:0"</span>](Variable_1)]]</span><br></pre></td></tr></table></figure><h2 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h2><h4 id="在初始的代码中，由于没有使用tf-global-variables-initializer-函数来对变量初始化，导致代码出现错误"><a href="#在初始的代码中，由于没有使用tf-global-variables-initializer-函数来对变量初始化，导致代码出现错误" class="headerlink" title="在初始的代码中，由于没有使用tf.global_variables_initializer()函数来对变量初始化，导致代码出现错误"></a>在初始的代码中，由于没有使用<code>tf.global_variables_initializer()</code>函数来对变量初始化，导致代码出现错误</h4><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><h4 id="在代码中加入tf-global-variables-initializer-函数来对数据进行初始化之后便可解决"><a href="#在代码中加入tf-global-variables-initializer-函数来对数据进行初始化之后便可解决" class="headerlink" title="在代码中加入tf.global_variables_initializer()函数来对数据进行初始化之后便可解决"></a>在代码中加入<code>tf.global_variables_initializer()</code>函数来对数据进行初始化之后便可解决</h4><h2 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">train_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'train'</span>)</span><br><span class="line">train_input_data = np.array(train_input_data).ravel()</span><br><span class="line">train_input_data = list(train_input_data)</span><br><span class="line">train_input_data = tf.constant(train_input_data,dtype=tf.float32)</span><br><span class="line">train_output_data = train_input_data</span><br><span class="line"></span><br><span class="line">test_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'test'</span>)</span><br><span class="line">test_input_data = np.array(test_input_data).ravel()</span><br><span class="line">test_input_data = list(test_input_data)</span><br><span class="line">test_input_data = tf.constant(test_input_data,shape=[<span class="number">270</span>,<span class="number">1</span>],dtype=tf.float32)</span><br><span class="line">test_output_data = test_input_data</span><br><span class="line"></span><br><span class="line">fc_mean, fc_var = tf.nn.moments(train_input_data,axes=[<span class="number">0</span>])</span><br><span class="line">scale = tf.Variable(tf.ones([<span class="number">1</span>]))</span><br><span class="line">shift = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">epslion = <span class="number">0.001</span></span><br><span class="line">train_input_data = tf.nn.batch_normalization(train_input_data,fc_mean,fc_var,shift,scale,epslion)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用tensorflow由于没有初始化会遇到各种各样的问题，本文对此进行了总结
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>使用Tensorflow实现CNN进行MNIST数字识别</title>
    <link href="http://yoursite.com/2017/11/18/%E4%BD%BF%E7%94%A8Tensorflow%E5%AE%9E%E7%8E%B0CNN%E8%BF%9B%E8%A1%8CMNIST%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>http://yoursite.com/2017/11/18/使用Tensorflow实现CNN进行MNIST数字识别/</id>
    <published>2017-11-18T12:07:57.000Z</published>
    <updated>2018-04-19T15:56:31.498Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="comment"># number 1 to 10 data</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_accuracy</span><span class="params">(v_xs, v_ys)</span>:</span><span class="comment">#返回准确度</span></span><br><span class="line">    <span class="keyword">global</span> prediction</span><br><span class="line">    y_pre = sess.run(prediction, feed_dict=&#123;xs: v_xs, keep_prob: <span class="number">1</span>&#125;)</span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(y_pre,<span class="number">1</span>), tf.argmax(v_ys,<span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">    result = sess.run(accuracy, feed_dict=&#123;xs: v_xs, ys: v_ys, keep_prob: <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span><span class="comment">#定义weight</span></span><br><span class="line">    initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span><span class="comment">#定义bias</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span><span class="comment">#定义卷积层</span></span><br><span class="line">    <span class="comment"># stride [1, x_movement, y_movement, 1]</span></span><br><span class="line">    <span class="comment"># Must have strides[0] = strides[3] = 1</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span><span class="comment">#定义池化层</span></span><br><span class="line">    <span class="comment"># stride [1, x_movement, y_movement, 1]</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define placeholder for inputs to network</span></span><br><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])/<span class="number">255.</span>   <span class="comment"># 28x28</span></span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line">x_image = tf.reshape(xs, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])<span class="comment">#-1指将所有图片的例子维度不管他，之后再加上所有的维度，然后将xs图片信息转变成28x28的矩阵，1指只有一个通道，即黑白的图片</span></span><br><span class="line"><span class="comment"># print(x_image.shape)  # [n_samples, 28,28,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## conv1 layer ##</span></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>,<span class="number">5</span>, <span class="number">1</span>,<span class="number">32</span>]) <span class="comment"># 指筛选器 5x5, 步数 1, 深度 32</span></span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1) <span class="comment"># output size 28x28x32</span></span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)                                         <span class="comment"># output size 14x14x32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## conv2 layer ##</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>,<span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>]) <span class="comment"># patch 5x5, in size 32, out size 64</span></span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2) <span class="comment"># output size 14x14x64，激活去线性化</span></span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)                                         <span class="comment"># output size 7x7x64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## fc1 layer ##</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>, <span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="number">1024</span>])</span><br><span class="line"><span class="comment"># [n_samples, 7, 7, 64] -&gt;&gt; [n_samples, 7*7*64]</span></span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment">## fc2 layer ##</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line">prediction = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the error between prediction and real data</span></span><br><span class="line">cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),</span><br><span class="line">                                              reduction_indices=[<span class="number">1</span>]))       <span class="comment"># loss</span></span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># important step</span></span><br><span class="line"><span class="comment"># tf.initialize_all_variables() no long valid from</span></span><br><span class="line"><span class="comment"># 2017-03-02 if using tensorflow &gt;= 0.12</span></span><br><span class="line"><span class="keyword">if</span> int((tf.__version__).split(<span class="string">'.'</span>)[<span class="number">1</span>]) &lt; <span class="number">12</span> <span class="keyword">and</span> int((tf.__version__).split(<span class="string">'.'</span>)[<span class="number">0</span>]) &lt; <span class="number">1</span>:</span><br><span class="line">    init = tf.initialize_all_variables()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;xs: batch_xs, ys: batch_ys, keep_prob: <span class="number">0.5</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        print(compute_accuracy(</span><br><span class="line">            mnist.test.images[:<span class="number">1000</span>], mnist.test.labels[:<span class="number">1000</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文使用tensorflow实现CNN进行MNIST数字识别
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Python常用的程序调试方法</title>
    <link href="http://yoursite.com/2017/11/17/Python%E5%B8%B8%E7%94%A8%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/17/Python常用的程序调试方法/</id>
    <published>2017-11-17T08:01:01.000Z</published>
    <updated>2018-04-19T15:55:04.081Z</updated>
    
    <content type="html"><![CDATA[<h4 id="程序能一次写完并正常运行的概率很小，基本不超过1-，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法"><a href="#程序能一次写完并正常运行的概率很小，基本不超过1-，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法" class="headerlink" title="程序能一次写完并正常运行的概率很小，基本不超过1%，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法"></a>程序能一次写完并正常运行的概率很小，基本不超过1%，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法</h4><hr><h2 id="1-断点打印法"><a href="#1-断点打印法" class="headerlink" title="1. 断点打印法"></a>1. 断点打印法</h2><h4 id="第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看："><a href="#第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看：" class="headerlink" title="第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看："></a>第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看：</h4><h4 id="err-py"><a href="#err-py" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">n = int(s)</span><br><span class="line">print &apos;&gt;&gt;&gt; n = %d&apos; % n</span><br><span class="line">return 10 / n</span><br><span class="line">def main():</span><br><span class="line">foo(&apos;0&apos;)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h4 id="执行后在输出中查找打印的变量值："><a href="#执行后在输出中查找打印的变量值：" class="headerlink" title="执行后在输出中查找打印的变量值："></a>执行后在输出中查找打印的变量值：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">&gt;&gt;&gt; n = 0</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。"><a href="#用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。" class="headerlink" title="用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。"></a>用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。</h4><hr><h2 id="2-断言"><a href="#2-断言" class="headerlink" title="2. 断言"></a>2. 断言</h2><p>####凡是用print来辅助查看的地方，都可以用断言（assert）来替代：</p><h4 id="err-py-1"><a href="#err-py-1" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">n = int(s)</span><br><span class="line">assert n != 0, &apos;n is zero!&apos;</span><br><span class="line">return 10 / n</span><br><span class="line">def main():</span><br><span class="line">foo(&apos;0&apos;)</span><br></pre></td></tr></table></figure><h4 id="assert的意思是，表达式n-0应该是True，否则，后面的代码就会出错。"><a href="#assert的意思是，表达式n-0应该是True，否则，后面的代码就会出错。" class="headerlink" title="assert的意思是，表达式n != 0应该是True，否则，后面的代码就会出错。"></a>assert的意思是，表达式n != 0应该是True，否则，后面的代码就会出错。</h4><h4 id="如果断言失败，assert语句本身就会抛出AssertionError："><a href="#如果断言失败，assert语句本身就会抛出AssertionError：" class="headerlink" title="如果断言失败，assert语句本身就会抛出AssertionError："></a>如果断言失败，assert语句本身就会抛出AssertionError：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">AssertionError: n is zero!</span><br></pre></td></tr></table></figure><h4 id="程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert："><a href="#程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert：" class="headerlink" title="程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert："></a>程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python -O err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="关闭后，你可以把所有的assert语句当成pass来看。"><a href="#关闭后，你可以把所有的assert语句当成pass来看。" class="headerlink" title="关闭后，你可以把所有的assert语句当成pass来看。"></a>关闭后，你可以把所有的assert语句当成pass来看。</h4><hr><h2 id="3-logging日志"><a href="#3-logging日志" class="headerlink" title="3. logging日志"></a>3. logging日志</h2><h4 id="把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件："><a href="#把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件：" class="headerlink" title="把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件："></a>把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件：</h4><p>####err.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">s = &apos;0&apos;</span><br><span class="line">n = int(s)</span><br><span class="line">logging.info(&apos;n = %d&apos; % n)</span><br><span class="line">print 10 / n</span><br></pre></td></tr></table></figure></p><h4 id="logging-info-就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？"><a href="#logging-info-就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？" class="headerlink" title="logging.info()就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？"></a>logging.info()就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？</h4><h4 id="别急，在import-logging之后添加一行配置再试试："><a href="#别急，在import-logging之后添加一行配置再试试：" class="headerlink" title="别急，在import logging之后添加一行配置再试试："></a>别急，在import logging之后添加一行配置再试试：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br></pre></td></tr></table></figure><h4 id="看到输出了："><a href="#看到输出了：" class="headerlink" title="看到输出了："></a>看到输出了：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">INFO:root:n = 0</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File &quot;err.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">  print 10 / n</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level-INFO时，logging-debug就不起作用了。同理，指定level-WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。"><a href="#这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level-INFO时，logging-debug就不起作用了。同理，指定level-WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。" class="headerlink" title="这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。"></a>这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。</h4><h4 id="logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。"><a href="#logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。" class="headerlink" title="logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。"></a>logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。</h4><hr><h2 id="4-pdb调试"><a href="#4-pdb调试" class="headerlink" title="4. pdb调试"></a>4. pdb调试</h2><h4 id="第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序："><a href="#第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：" class="headerlink" title="第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序："></a>第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：</h4><h4 id="err-py-2"><a href="#err-py-2" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;0&apos;</span><br><span class="line">n = int(s)</span><br><span class="line">print 10 / n</span><br></pre></td></tr></table></figure><h4 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pdb err.py</span><br><span class="line">&gt; /Users/PythonTab/Github/sicp/err.py(2)&lt;module&gt;()</span><br><span class="line">-&gt; s = &apos;0&apos;</span><br></pre></td></tr></table></figure><h4 id="以参数-m-pdb启动后，pdb定位到下一步要执行的代码-gt-s-‘0’。输入命令l来查看代码："><a href="#以参数-m-pdb启动后，pdb定位到下一步要执行的代码-gt-s-‘0’。输入命令l来查看代码：" class="headerlink" title="以参数-m pdb启动后，pdb定位到下一步要执行的代码-&gt; s = ‘0’。输入命令l来查看代码："></a>以参数-m pdb启动后，pdb定位到下一步要执行的代码-&gt; s = ‘0’。输入命令l来查看代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) l</span><br><span class="line"> 1   # err.py</span><br><span class="line"> 2 -&gt; s = &apos;0&apos;</span><br><span class="line"> 3   n = int(s)</span><br><span class="line"> 4   print 10 / n</span><br><span class="line">[EOF]</span><br></pre></td></tr></table></figure><h4 id="输入命令n可以单步执行代码："><a href="#输入命令n可以单步执行代码：" class="headerlink" title="输入命令n可以单步执行代码："></a>输入命令n可以单步执行代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) n</span><br><span class="line">/Users/PythonTab/Github/sicp/err.py(3)&lt;module&gt;()</span><br><span class="line">-&gt; n = int(s)</span><br><span class="line">(Pdb) n</span><br><span class="line">/Users/PythonTab/Github/sicp/err.py(4)&lt;module&gt;()</span><br><span class="line">-&gt; print 10 / n</span><br></pre></td></tr></table></figure><h4 id="任何时候都可以输入命令p-变量名来查看变量："><a href="#任何时候都可以输入命令p-变量名来查看变量：" class="headerlink" title="任何时候都可以输入命令p 变量名来查看变量："></a>任何时候都可以输入命令p 变量名来查看变量：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p s</span><br><span class="line">&apos;0&apos;</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="输入命令q结束调试，退出程序："><a href="#输入命令q结束调试，退出程序：" class="headerlink" title="输入命令q结束调试，退出程序："></a>输入命令q结束调试，退出程序：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) n</span><br><span class="line">ZeroDivisionError: &apos;integer division or modulo by zero&apos;</span><br><span class="line">&gt; /Users/PythonTab/Github/sicp/err.py(4)&lt;module&gt;()</span><br><span class="line">-&gt; print 10 / n</span><br><span class="line">(Pdb) q</span><br></pre></td></tr></table></figure><h4 id="这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。"><a href="#这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。" class="headerlink" title="这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。"></a>这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。</h4><h4 id="pdb-set-trace"><a href="#pdb-set-trace" class="headerlink" title="pdb.set_trace()"></a><code>pdb.set_trace()</code></h4><h4 id="这个方法也是用pdb，但是不需要单步执行，我们只需要import-pdb，然后，在可能出错的地方放一个pdb-set-trace-，就可以设置一个断点："><a href="#这个方法也是用pdb，但是不需要单步执行，我们只需要import-pdb，然后，在可能出错的地方放一个pdb-set-trace-，就可以设置一个断点：" class="headerlink" title="这个方法也是用pdb，但是不需要单步执行，我们只需要import pdb，然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点："></a>这个方法也是用pdb，但是不需要单步执行，我们只需要import pdb，然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点：</h4><h4 id="err-py-3"><a href="#err-py-3" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pdb</span><br><span class="line">s = &apos;0&apos;</span><br><span class="line">n = int(s)</span><br><span class="line">pdb.set_trace() # 运行到这里会自动暂停</span><br><span class="line">print 10 / n</span><br></pre></td></tr></table></figure><h4 id="运行代码，程序会自动在pdb-set-trace-暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行："><a href="#运行代码，程序会自动在pdb-set-trace-暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行：" class="headerlink" title="运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行："></a>运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py </span><br><span class="line">&gt; /Users/PythonTab/Github/sicp/err.py(7)&lt;module&gt;()</span><br><span class="line">-&gt; print 10 / n</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br><span class="line">(Pdb) c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File &quot;err.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">  print 10 / n</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。"><a href="#这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。" class="headerlink" title="这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。"></a>这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。</h4><h2 id="5-IDE调试"><a href="#5-IDE调试" class="headerlink" title="5. IDE调试"></a>5. IDE调试</h2><h4 id="如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python-IDE有PyCharm，"><a href="#如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python-IDE有PyCharm，" class="headerlink" title="如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python IDE有PyCharm，"></a>如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python IDE有PyCharm，</h4><h4 id="另外，Eclipse加上pydev插件也可以调试Python程序。"><a href="#另外，Eclipse加上pydev插件也可以调试Python程序。" class="headerlink" title="另外，Eclipse加上pydev插件也可以调试Python程序。"></a>另外，Eclipse加上pydev插件也可以调试Python程序。</h4><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h4 id="写程序花费的时间往往要小于调试的时间，这个是基本规律。"><a href="#写程序花费的时间往往要小于调试的时间，这个是基本规律。" class="headerlink" title="写程序花费的时间往往要小于调试的时间，这个是基本规律。"></a>写程序花费的时间往往要小于调试的时间，这个是基本规律。</h4><h2 id="虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！"><a href="#虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！" class="headerlink" title="####虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！"></a>####虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！</h2><h6 id="本文章为转载，原文章链接：http-www-pythontab-com-html-2017-pythonhexinbiancheng-1115-1182-html-ref-myread"><a href="#本文章为转载，原文章链接：http-www-pythontab-com-html-2017-pythonhexinbiancheng-1115-1182-html-ref-myread" class="headerlink" title="本文章为转载，原文章链接：http://www.pythontab.com/html/2017/pythonhexinbiancheng_1115/1182.html?ref=myread"></a>本文章为转载，原文章链接：<a href="http://www.pythontab.com/html/2017/pythonhexinbiancheng_1115/1182.html?ref=myread" target="_blank" rel="noopener">http://www.pythontab.com/html/2017/pythonhexinbiancheng_1115/1182.html?ref=myread</a></h6>]]></content>
    
    <summary type="html">
    
      程序能一次写完并正常运行的概率很小，基本不超过1%，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow卷积神经网络常用结构</title>
    <link href="http://yoursite.com/2017/11/17/Tensorflow%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B8%B8%E7%94%A8%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/11/17/Tensorflow卷积神经网络常用结构/</id>
    <published>2017-11-17T07:36:51.000Z</published>
    <updated>2018-04-19T15:52:08.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-卷积层"><a href="#1-卷积层" class="headerlink" title="1.卷积层"></a>1.卷积层</h2><h3 id="Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。"><a href="#Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。" class="headerlink" title="Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。"></a>Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">filter_weight = tf.get_variable(</span><br><span class="line"></span><br><span class="line"><span class="comment">#前两个维度代表过滤器的尺寸，第三个维度表示当前层的深度，</span></span><br><span class="line"><span class="comment">#第四个表示过滤器的深度。</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'weight'</span>,[<span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">16</span>],</span><br><span class="line">initializer=tf.truncated_normal_initializer(stddev=<span class="number">0.1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">biases = tf.get_variable(</span><br><span class="line"><span class="comment">#由于当前过滤器的深度为16，所以偏置相为16，也是神经网络中下一层节点矩阵深度</span></span><br><span class="line">    <span class="string">'biases'</span>,[<span class="number">16</span>],initializer=tf.constant_initializer(<span class="number">0.1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">conv = tf.nn.conv2d(</span><br><span class="line">input,filter_weight,strides=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">bias = tf.nn.bias_add(conv,biases)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过ReLU函数激活，去线性化</span></span><br><span class="line">actived_conv = tf.nn.relu(bias)</span><br></pre></td></tr></table></figure><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><h4 id="1-tf-nn-conv2d提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input-0-指输入第一张图片，input-1-指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。"><a href="#1-tf-nn-conv2d提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input-0-指输入第一张图片，input-1-指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。" class="headerlink" title="1.tf.nn.conv2d提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input[0,:,:,:]指输入第一张图片，input[1,:,:,:]指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。"></a>1.<code>tf.nn.conv2d</code>提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input[0,:,:,:]指输入第一张图片，input[1,:,:,:]指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。</h4><h4 id="2-tf-nn-bias-add提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。"><a href="#2-tf-nn-bias-add提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。" class="headerlink" title="2.tf.nn.bias_add提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。"></a>2.<code>tf.nn.bias_add</code>提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。</h4><h2 id="2-池化层"><a href="#2-池化层" class="headerlink" title="2.池化层"></a>2.池化层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pool = tf.nn.max_pool(actived_conv,ksize=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br></pre></td></tr></table></figure><h4 id="tf-nn-max-pool实现了最大池化层的前向传播，他的参数和tf-nn-conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。"><a href="#tf-nn-max-pool实现了最大池化层的前向传播，他的参数和tf-nn-conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。" class="headerlink" title="tf.nn.max_pool实现了最大池化层的前向传播，他的参数和tf.nn.conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。"></a>tf.nn.max_pool实现了最大池化层的前向传播，他的参数和tf.nn.conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。</h4>]]></content>
    
    <summary type="html">
    
      Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow持久化原理及数据格式</title>
    <link href="http://yoursite.com/2017/11/16/Tensorflow%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/11/16/Tensorflow持久化原理及数据格式/</id>
    <published>2017-11-16T11:23:24.000Z</published>
    <updated>2018-04-19T15:50:15.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tensorflow持久化原理及数据格式"><a href="#Tensorflow持久化原理及数据格式" class="headerlink" title="Tensorflow持久化原理及数据格式"></a>Tensorflow持久化原理及数据格式</h1><hr><h4 id="Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义"><a href="#Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义" class="headerlink" title="Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义"></a>Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message MetaGraphDef&#123;</span><br><span class="line">MeatInfoDef meta_info_def = <span class="number">1</span>;</span><br><span class="line">GraphDef graph_def = <span class="number">2</span>;</span><br><span class="line">SaverDef saver_def = <span class="number">3</span>;</span><br><span class="line">map&lt;string,CollectionDef&gt; collection_def = <span class="number">4</span>;</span><br><span class="line">map&lt;string,SignatureDef&gt; signature_def = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="保存MetaGraphDef信息的文件默认以-meta为后缀名，在之前的例子中文件test-ckpt-meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export-meta-graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码"><a href="#保存MetaGraphDef信息的文件默认以-meta为后缀名，在之前的例子中文件test-ckpt-meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export-meta-graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码" class="headerlink" title="保存MetaGraphDef信息的文件默认以.meta为后缀名，在之前的例子中文件test.ckpt.meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export_meta_graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码"></a>保存MetaGraphDef信息的文件默认以.meta为后缀名，在之前的例子中文件test.ckpt.meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export_meta_graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">1.0</span>, shape=[<span class="number">1</span>]), name =<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(tf.constant(<span class="number">2.0</span>, shape=[<span class="number">1</span>]), name =<span class="string">"v2"</span>)</span><br><span class="line">result1 = v1 + v2</span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"><span class="comment">#通过export_meta_graph函数导出Tensorflow的计算图的元图，并保存为json格式</span></span><br><span class="line">saver.export_meta_graph(<span class="string">"test/test.ckpt.json"</span>, as_text=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="meta-info-def-属性"><a href="#meta-info-def-属性" class="headerlink" title="meta_info_def 属性"></a>meta_info_def 属性</h2><h4 id="meta-info-def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义"><a href="#meta-info-def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义" class="headerlink" title="meta_info_def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义"></a>meta_info_def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message MetaInfoDef&#123;</span><br><span class="line"><span class="comment">#saver没有特殊指定，默认属性都为空。meta_info_def属性里只有stripped_op_list属性不能为空。</span></span><br><span class="line">string meta_graph_version = <span class="number">1</span>;<span class="comment">#该属性不能为空</span></span><br><span class="line">OpList stripped_op_list = <span class="number">2</span>;<span class="comment">#该属性记录了计算图中使用到的所有运算方法的信息，该函数只记录运算信息，不记录计算的次数</span></span><br><span class="line">google.protobuf.Any any_info = <span class="number">3</span>;</span><br><span class="line">repeated string tags = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="元数据包括计算图的版本号（meta-graph-version属性）以及用户指定的一些标签（tags属性）。"><a href="#元数据包括计算图的版本号（meta-graph-version属性）以及用户指定的一些标签（tags属性）。" class="headerlink" title="元数据包括计算图的版本号（meta_graph_version属性）以及用户指定的一些标签（tags属性）。"></a>元数据包括计算图的版本号（meta_graph_version属性）以及用户指定的一些标签（tags属性）。</h4><hr><h4 id="OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义："><a href="#OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义：" class="headerlink" title="OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义："></a>OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">message opDef&#123;</span><br><span class="line">string name = <span class="number">1</span>;<span class="comment">#定义了运算的名称</span></span><br><span class="line">repeated ArgDef input_arg = <span class="number">2</span>; <span class="comment">#定义了输入，属性是列表</span></span><br><span class="line">repeated ArgDef output_arg =<span class="number">3</span>; <span class="comment">#定义了输出，属性是列表</span></span><br><span class="line">repeated AttrDef attr = <span class="number">4</span>;<span class="comment">#给出了其他运算的参数信息</span></span><br><span class="line">string summary = <span class="number">5</span>;</span><br><span class="line">string description = <span class="number">6</span>;</span><br><span class="line">OpDeprecation deprecation = <span class="number">8</span>;</span><br><span class="line">bool is_commutative = <span class="number">18</span>;</span><br><span class="line">bool is_aggregate = <span class="number">16</span></span><br><span class="line">bool is_stateful = <span class="number">17</span>;</span><br><span class="line">bool allows_uninitialized_input = <span class="number">19</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。"><a href="#下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。" class="headerlink" title="下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。"></a>下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">op &#123;</span><br><span class="line">name: <span class="string">"Add"</span></span><br><span class="line">input_arg&#123;</span><br><span class="line">name: <span class="string">"x"</span></span><br><span class="line">type_attr:<span class="string">"T"</span></span><br><span class="line">&#125;</span><br><span class="line">input_arg&#123;</span><br><span class="line">name: <span class="string">"y"</span></span><br><span class="line">type_attr:<span class="string">"T"</span></span><br><span class="line">&#125;</span><br><span class="line">output_arg&#123;</span><br><span class="line">name: <span class="string">"z"</span></span><br><span class="line">type_attr:<span class="string">"T"</span></span><br><span class="line">&#125;</span><br><span class="line">attr&#123;</span><br><span class="line">name:<span class="string">"T"</span></span><br><span class="line">type:<span class="string">"type"</span></span><br><span class="line">allow_values&#123;</span><br><span class="line">list&#123;</span><br><span class="line">type:DT_HALF</span><br><span class="line">type:DT_FLOAT</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面给出的是名称为Add的运算。这个运算的输入有两个，输出有一个，输入输出属性均指定了属性typr_attr，并且这个属性的值为T。在OpDef的attr的属性中。必须要出现名称（name）为T的属性。以上样例中，这个属性指定了运算输入输出允许的参数类型 （allowed_values）。</p><hr><h2 id="graph-def属性"><a href="#graph-def属性" class="headerlink" title="graph_def属性"></a>graph_def属性</h2><h4 id="graph-def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta-info-def中已经包含所有运算的具体信息，所以graph-def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息："><a href="#graph-def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta-info-def中已经包含所有运算的具体信息，所以graph-def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息：" class="headerlink" title="graph_def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta_info_def中已经包含所有运算的具体信息，所以graph_def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息："></a>graph_def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta_info_def中已经包含所有运算的具体信息，所以graph_def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">message GraphDef&#123;</span><br><span class="line"><span class="comment">#GraphDef的主要信息存储在node属性中，他记录了Tensorflow计算图上所有的节点信息。</span></span><br><span class="line">repeated NodeDef node = <span class="number">1</span>;</span><br><span class="line">VersionDef versions = <span class="number">4</span>; <span class="comment">#主要储存了Tensorflow的版本号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message NodeDef&#123;</span><br><span class="line"><span class="comment">#NodeDef类型中有一个名称属性name，他是一个节点的唯一标识符，在程序中，通过节点的名称来获得相应的节点。</span></span><br><span class="line">string name = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">op属性给出了该节点使用的Tensorflow运算方法的名称。</span></span><br><span class="line"><span class="string">通过这个名称可以在TensorFlow计算图元图的meta_info_def属性中找到该运算的具体信息。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">string op = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">input属性是一个字符串列表，他定义了运算的输入。每个字符串饿的取值格式为弄的：src_output</span></span><br><span class="line"><span class="string">node部分给出节点名称，src_output表明了这个输入是指定节点的第几个输出。</span></span><br><span class="line"><span class="string">src_output=0时可以省略src_output部分</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">repeated string input = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#制定了处理这个运算的设备，可以是本地或者远程的CPU or GPU。属性为空时自动选择</span></span><br><span class="line">string device = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#制定了和当前运算有关的配置信息</span></span><br><span class="line">map&lt;string, AttrValue&gt; attr = <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="下面列举test-ckpt-meta-json具体介绍graph-def属性"><a href="#下面列举test-ckpt-meta-json具体介绍graph-def属性" class="headerlink" title="下面列举test.ckpt.meta.json具体介绍graph_def属性"></a>下面列举test.ckpt.meta.json具体介绍graph_def属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">graph def &#123;</span><br><span class="line">node &#123;</span><br><span class="line">name: <span class="string">"v1"</span></span><br><span class="line">op: <span class="string">"Variable"</span></span><br><span class="line">attr &#123;</span><br><span class="line">key:<span class="string">"_output_shapes"</span></span><br><span class="line">value &#123;</span><br><span class="line">list&#123; shape &#123; dim &#123; size: <span class="number">1</span> &#125; &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">attr &#123; </span><br><span class="line">key :<span class="string">"dtype"</span></span><br><span class="line">value &#123;</span><br><span class="line">type: DT_FLOAT</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">node &#123;</span><br><span class="line">name :<span class="string">"add"</span></span><br><span class="line">op :<span class="string">"Add"</span></span><br><span class="line">input :<span class="string">"v1/read"</span> <span class="comment">#read指读取变量v1的值</span></span><br><span class="line">input: <span class="string">"v2/read"</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">node &#123;</span><br><span class="line">name: <span class="string">"save/control_dependency"</span> <span class="comment">#指系统在完成tensorflow模型持久化过程中自动生成一个运算。</span></span><br><span class="line">op:<span class="string">"Identity"</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">versions &#123;</span><br><span class="line">producer :<span class="number">9</span> <span class="comment">#给出了文件使用时的Tensorflow版本号。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="saver-def属性"><a href="#saver-def属性" class="headerlink" title="saver_def属性"></a>saver_def属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">message SaverDef &#123;</span><br><span class="line">string filename_tensor_name = <span class="number">1</span>;</span><br><span class="line">string save_tensor_name = <span class="number">2</span>;</span><br><span class="line">string restore_op_name = <span class="number">3</span>;</span><br><span class="line">int32 max_to_keep = <span class="number">4</span>;</span><br><span class="line">bool sharded = <span class="number">5</span>;</span><br><span class="line">float keep_checkpoint_every_n_hours = <span class="number">6</span>;</span><br><span class="line">enum CheckpointFormatVersion &#123;</span><br><span class="line">LEGACY = <span class="number">0</span>;</span><br><span class="line">V1 = <span class="number">1</span>;</span><br><span class="line">V2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">CheckpointFormatVersion version = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下面给出test-ckpt-meta-json文件中saver-def属性的内容。"><a href="#下面给出test-ckpt-meta-json文件中saver-def属性的内容。" class="headerlink" title="下面给出test.ckpt.meta.json文件中saver_def属性的内容。"></a>下面给出test.ckpt.meta.json文件中saver_def属性的内容。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">saver_def &#123;</span><br><span class="line">filename_tensor_name :<span class="string">"save/Const:0”</span></span><br><span class="line"><span class="string">#给出了保存文件的张量名，这个张量就是节点save/Const的第一个输出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">save_tensor_name :"</span>save/control_dependency: <span class="number">0</span>”</span><br><span class="line"><span class="comment">#给出了持久化模型运算所对应的节点名称</span></span><br><span class="line"></span><br><span class="line">restore_op_name: <span class="string">"save/restore_all"</span></span><br><span class="line"><span class="comment">#和持久性模型运算对应的是加载模型的运算的名称</span></span><br><span class="line"></span><br><span class="line">max_to_keep:<span class="number">5</span></span><br><span class="line">keep_checkpoint_every_n_hours :<span class="number">10000.0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">上面两个属性设定了tf.train.Saver类清理之前保存的模型的策略。比如当max_to_keep为5时，第六次调用</span></span><br><span class="line"><span class="string">saver.save时，第一次保存的模型就会被自动删除，通过设置keep_checkpoint_every_n_hours，每n小</span></span><br><span class="line"><span class="string">时可以在max_to_keep的基础上保存一个模型</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h2 id="collection-def属性"><a href="#collection-def属性" class="headerlink" title="collection_def属性"></a>collection_def属性</h2><h4 id="collection-def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef-Protocol-Buffer。以下代码给出CollectionDef类型的定义"><a href="#collection-def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef-Protocol-Buffer。以下代码给出CollectionDef类型的定义" class="headerlink" title="collection_def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef Protocol Buffer。以下代码给出CollectionDef类型的定义"></a>collection_def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef Protocol Buffer。以下代码给出CollectionDef类型的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">message CollectionDef &#123;</span><br><span class="line">message Nodelist &#123;</span><br><span class="line"><span class="comment">#用于维护计算图上的节点集合</span></span><br><span class="line">repeated string value = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message BytesList &#123;</span><br><span class="line"><span class="comment">#维护字符串或者系列化之后的Procotol Buffer的集合。例如张量是通过Protocol Buffer表示的，而张量的集合是通过BytesList维护的。</span></span><br><span class="line">repeated bytes value = <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Int64List &#123;</span><br><span class="line">repeated int64 value = <span class="number">1</span>[packed = true];</span><br><span class="line">&#125;</span><br><span class="line">message FloatList &#123;</span><br><span class="line">repeated float value = <span class="number">1</span>[packed = true] ;</span><br><span class="line">&#125;</span><br><span class="line">message AnyList &#123;</span><br><span class="line">repeated google.protobuf.Any value= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">oneof kind &#123;</span><br><span class="line">NodeList node_list = <span class="number">1</span>;</span><br><span class="line">BytesList bytes_lista = <span class="number">2</span>;</span><br><span class="line">Int64List int64_list = <span class="number">3</span>;</span><br><span class="line">Floatlist float_list = <span class="number">4</span>;</span><br><span class="line">AnyList any_list = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下面给出了test-ckpt-meta-json文件中的collection-def属性的内容"><a href="#下面给出了test-ckpt-meta-json文件中的collection-def属性的内容" class="headerlink" title="下面给出了test.ckpt.meta.json文件中的collection_def属性的内容"></a>下面给出了test.ckpt.meta.json文件中的collection_def属性的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">collection_def &#123;</span><br><span class="line"><span class="comment">#可训练变量的集合</span></span><br><span class="line">key: <span class="string">"trainable_variables"</span></span><br><span class="line">value &#123;</span><br><span class="line">bytes_list &#123;</span><br><span class="line">value; <span class="string">"\n\004v1:0\022\tv1/Assign\032\tv1/read:0"</span></span><br><span class="line">value: <span class="string">"\n\004v2:0\022\tv2/Assign\032\cv2/read:0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">collection_def &#123;</span><br><span class="line"><span class="comment">#所有变量的集合</span></span><br><span class="line">key: <span class="string">"variables"</span></span><br><span class="line">value &#123;</span><br><span class="line">bytes_list &#123;</span><br><span class="line">value:<span class="string">"\n\004v1:0\022\tv1/Assign\032\tv1/read:0"</span></span><br><span class="line">value:<span class="string">"\n\004v2:0\022\tv2/Assign\032\tv2/read:0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow模型持久化的代码实现</title>
    <link href="http://yoursite.com/2017/11/16/Tensorflow%E6%A8%A1%E5%9E%8B%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/11/16/Tensorflow模型持久化的代码实现/</id>
    <published>2017-11-16T06:01:19.000Z</published>
    <updated>2018-04-19T15:47:54.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-存储模型"><a href="#1-存储模型" class="headerlink" title="1.存储模型"></a>1.存储模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">1.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(tf.constant(<span class="number">2.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v2"</span>)</span><br><span class="line">result = v1 + v2</span><br><span class="line"></span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line">saver = tf.train.Saver()<span class="comment">#声明tf.train.Saver()类用于保存模型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">sess.run(init_op)</span><br><span class="line">saver.save(sess, <span class="string">"test/test.ckpt"</span>)<span class="comment">#将模型保存于test文件夹中</span></span><br></pre></td></tr></table></figure><h3 id="运行该程序后，将在test文件中出现以下的文件"><a href="#运行该程序后，将在test文件中出现以下的文件" class="headerlink" title="运行该程序后，将在test文件中出现以下的文件"></a>运行该程序后，将在test文件中出现以下的文件</h3><p><img src="http://img.blog.csdn.net/20171116133008913?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h1 id="2-加载模型"><a href="#2-加载模型" class="headerlink" title="2.加载模型"></a>2.加载模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">1.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(tf.constant(<span class="number">4.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v2"</span>)</span><br><span class="line">result = v1 + v2</span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">saver.restore(sess, <span class="string">"test/test.ckpt"</span>)<span class="comment">#加载已经保存的模型，并通过已经保存的模型中的变量的值来计算加法</span></span><br><span class="line">print(sess.run(result))</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算输出结果为[3.]不是[5.]是因为该程序加载了之前保存的模型，所以计算的变量也是保存的模型中的变量</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171116133553267?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="如果不希望重复定义变量以及运算，可以直接加载已经持久化的图"><a href="#如果不希望重复定义变量以及运算，可以直接加载已经持久化的图" class="headerlink" title="如果不希望重复定义变量以及运算，可以直接加载已经持久化的图"></a>如果不希望重复定义变量以及运算，可以直接加载已经持久化的图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">saver = tf.train.import_meta_graph(<span class="string">"test/test.ckpt.meta"</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">saver.restore(sess, <span class="string">"test/test.ckpt"</span>)</span><br><span class="line"><span class="comment">#通过张量的名称来获取张量</span></span><br><span class="line">print(sess.run(tf.get_default_graph().get_tensor_by_name(<span class="string">"add:0"</span>)))</span><br><span class="line"><span class="comment">#输出[3.]</span></span><br></pre></td></tr></table></figure><p>该程序默认保存和加载了Tensorflow计算图中定义的全部变量。</p><hr><h1 id="3-加载或者保存部分变量"><a href="#3-加载或者保存部分变量" class="headerlink" title="3.加载或者保存部分变量"></a>3.加载或者保存部分变量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">saver = tf.train.Saver([v1])<span class="comment">#该命令只用来加载变量v1</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-加载或者保存时对变量重命名"><a href="#4-加载或者保存时对变量重命名" class="headerlink" title="4.加载或者保存时对变量重命名"></a>4.加载或者保存时对变量重命名</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里声明的变量名称和已经保存的模型中变量的名称不同</span></span><br><span class="line">V1=tf.Variable(tf.constant(<span class="number">1.0</span>,shape=[<span class="number">1</span>]),name=<span class="string">"other-v1"</span>)</span><br><span class="line">V2=tf.variable(tf.constant (<span class="number">2.0</span>，shape=[<span class="number">1</span>]),name=<span class="string">"other-v2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果直接使用tf.train.Saver () 来加载模型会报变量找不到的错误。下面显示了报错信息:</span></span><br><span class="line"><span class="comment"># tensorflow.python.framewotk.erors.NotFoundError: Tensor name "other-v2"</span></span><br><span class="line"><span class="comment"># not found in checkpoint files /test/test.ckpt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一个字典(aictionary) 来重命名变量可以就可以加载原来的模型了。这个字典指定了</span></span><br><span class="line"><span class="comment"># 原来名称为v1的变量现在加载到变量v1中(名称为other-v1),名称为v2的变量</span></span><br><span class="line"><span class="comment"># 加载到变量v2 中(名称为other-v2)。</span></span><br><span class="line">saver=tf.train.Saver(&#123;<span class="string">"v1"</span>=v1,<span class="string">"v2"</span>:v2&#125;)</span><br></pre></td></tr></table></figure><h4 id="如果直接通过saver-tf-train-Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。"><a href="#如果直接通过saver-tf-train-Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。" class="headerlink" title="如果直接通过saver=tf.train.Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。"></a>如果直接通过saver=tf.train.Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。</h4>]]></content>
    
    <summary type="html">
    
      tensorflow模型持久化在实际使用中用处极大，本文对此进行了总结
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow的变量管理</title>
    <link href="http://yoursite.com/2017/11/10/Tensorflow%E7%9A%84%E5%8F%98%E9%87%8F%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2017/11/10/Tensorflow的变量管理/</id>
    <published>2017-11-10T14:55:10.000Z</published>
    <updated>2018-04-19T15:45:49.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tensorflow中常见的变量初始化函数"><a href="#Tensorflow中常见的变量初始化函数" class="headerlink" title="Tensorflow中常见的变量初始化函数"></a>Tensorflow中常见的变量初始化函数</h2><table><thead><tr><th>初始化函数</th><th>功能</th><th>主要参数</th></tr></thead><tbody><tr><td>tf.constant_initializer</td><td>将变量初始化为给定的常量</td><td>常量的取值</td></tr><tr><td>tf.random_normal_initializer</td><td>将变量初始化为满足正态分布的随机值</td><td>正态分布的均值和标准差</td></tr><tr><td>tf.truncated_normal_initializer</td><td>将变量初始化为满足正态分布的随机值，但如果随机出来的值偏离平均值超过2个标准差，那么这个数将会被重新随机</td><td>正态分布的均值和标准差</td></tr><tr><td>tf.random_uniform_initializer</td><td>将变量初始化为满足平均分布的随机值</td><td>最大，最小值</td></tr><tr><td>tf.uniform_unit_scaling_initializer</td><td>将变量初始化为满足平均分布但不影响输出量级的随机值</td><td>factor(产生随机值时乘以的系数)</td></tr><tr><td>tf.zero_initializer</td><td>将变量设置为0</td><td>变量维度</td></tr><tr><td>tf.ones_initializer</td><td>将变量设置为1</td><td>变量维度</td></tr></tbody></table><hr><h2 id="使用tf-variable-scope函数来控制tf-get-variable函数获取已经创建的函数"><a href="#使用tf-variable-scope函数来控制tf-get-variable函数获取已经创建的函数" class="headerlink" title="使用tf.variable_scope函数来控制tf.get_variable函数获取已经创建的函数"></a>使用tf.variable_scope函数来控制tf.get_variable函数获取已经创建的函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在名字为foo的命名空间内创建名字为v的变量</span></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>):</span><br><span class="line">    v = tf.get_variable(<span class="string">"v"</span>, [<span class="number">1</span>], initializer=tf.constant_initializer(<span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">命名空间foo中已经存在变量v，所以下面的代码将会报错:Variable foo/v already exitst,disallowed.Did you mean to set reuse=True in VarScope?</span></span><br><span class="line"><span class="string">'''</span>              </span><br><span class="line"><span class="comment">#with tf.variable_scope("foo"):</span></span><br><span class="line">   <span class="comment"># v = tf.get_variable("v", [1])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在生成上下文管理器时，将参数reuse 设置为True.这样tf.get_variable 函数将直接获取已经声明的变量    </span></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>, reuse=<span class="keyword">True</span>):</span><br><span class="line">    v1 = tf.get_variable(<span class="string">"v"</span>, [<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> v == v1   <span class="comment">#输出为True,代表v,v1代表的是相同的TensorFlow 中变量。</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">将参数reuse 设置为True 时，tf.variable_scope 将只能获取已经创建过的变量。因为在命名空间bar 中还没有创建变量v，所以下面的代码将会报错:Variable foo/v not exitst,disallowed.Did you mean to set reuse=None in VarScope?</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#with tf.variable_scope("bar", reuse=True):</span></span><br><span class="line">   <span class="comment"># v = tf.get_variable("v", [1])</span></span><br></pre></td></tr></table></figure><h4 id="上面的样例简单地说明了通过tf-variable-scope-函数可以控制tf-get-variable函数的语义。当tf-variable-scope-函数使用参数reuse-True-生成上下文管理器时，这个上下文管理器内所有的tf-get-variable-函数会直接获取已经创建的变量。如果变量不存在，则tf-get-variable函数将报错-相反，如果tf-variabe-scope-函数使用参数reuse-None-或者reuse-False-创建上下文管理器，tf-get-variable-操作将创建新的变量。如果同名的变量已经存在，则tf-get-variable函数将报错。TensorFlow-中tf-variable-scope函数是可以嵌套的。下面的程序说明了当tf-variable-scope函数嵌套时，reuse参数的取值是如何确定的。"><a href="#上面的样例简单地说明了通过tf-variable-scope-函数可以控制tf-get-variable函数的语义。当tf-variable-scope-函数使用参数reuse-True-生成上下文管理器时，这个上下文管理器内所有的tf-get-variable-函数会直接获取已经创建的变量。如果变量不存在，则tf-get-variable函数将报错-相反，如果tf-variabe-scope-函数使用参数reuse-None-或者reuse-False-创建上下文管理器，tf-get-variable-操作将创建新的变量。如果同名的变量已经存在，则tf-get-variable函数将报错。TensorFlow-中tf-variable-scope函数是可以嵌套的。下面的程序说明了当tf-variable-scope函数嵌套时，reuse参数的取值是如何确定的。" class="headerlink" title="上面的样例简单地说明了通过tf.variable_scope 函数可以控制tf.get_variable函数的语义。当tf.variable_scope 函数使用参数reuse=True 生成上下文管理器时，这个上下文管理器内所有的tf.get_variable 函数会直接获取已经创建的变量。如果变量不存在，则tf.get_variable函数将报错; 相反，如果tf.variabe_scope 函数使用参数reuse=None 或者reuse=False 创建上下文管理器，tf.get_variable 操作将创建新的变量。如果同名的变量已经存在，则tf.get_variable函数将报错。TensorFlow 中tf.variable_scope函数是可以嵌套的。下面的程序说明了当tf.variable_scope函数嵌套时，reuse参数的取值是如何确定的。"></a><em>上面的样例简单地说明了通过tf.variable_scope 函数可以控制tf.get_variable函数的语义。当tf.variable_scope 函数使用参数reuse=True 生成上下文管理器时，这个上下文管理器内所有的tf.get_variable 函数会直接获取已经创建的变量。如果变量不存在，则tf.get_variable函数将报错; 相反，如果tf.variabe_scope 函数使用参数reuse=None 或者reuse=False 创建上下文管理器，tf.get_variable 操作将创建新的变量。如果同名的变量已经存在，则tf.get_variable函数将报错。TensorFlow 中tf.variable_scope函数是可以嵌套的。下面的程序说明了当tf.variable_scope函数嵌套时，reuse参数的取值是如何确定的。</em></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"root"</span>):</span><br><span class="line"><span class="comment">#可以通过tf.variable_scope()函数来获取当前上下文管理器中reuse参数的取值</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">print</span> tf.get_variable_scope().reuse<span class="comment">#输出False，即最外层reuse为False。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新建一个嵌套的上下文管理器，并指定reuse 为True。</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>, reuse=<span class="keyword">True</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> tf.get_variable_scope().reuse</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#新建一个嵌套的上下文管理器但不指定reuse,这时reuse的取值会和外面一层保持一致。    </span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">"bar"</span>):</span><br><span class="line">            <span class="keyword">print</span> tf.get_variable_scope().reuse<span class="comment">#输出True。</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">print</span> tf.get_variable_scope().reuse</span><br><span class="line">    <span class="comment">#输出False。退出reuse 设置为True 的上下文之后的值又回到了False。</span></span><br></pre></td></tr></table></figure><h4 id="tf-variable-scope函数生成的上下文管理器也会创建个TensorFlow中的命名空间，在命名空间内创建的变量名称都会带上这个命名空间名作为前级缀。所以，tf-variable-scope函数除了可以控制tf-get-variable执行的功能之外，这个函数也提供了一个管理变量命名空间的方式。以下代码显示了如何通过tf-variable-scope来管理变量的名称。"><a href="#tf-variable-scope函数生成的上下文管理器也会创建个TensorFlow中的命名空间，在命名空间内创建的变量名称都会带上这个命名空间名作为前级缀。所以，tf-variable-scope函数除了可以控制tf-get-variable执行的功能之外，这个函数也提供了一个管理变量命名空间的方式。以下代码显示了如何通过tf-variable-scope来管理变量的名称。" class="headerlink" title="tf.variable_scope函数生成的上下文管理器也会创建个TensorFlow中的命名空间，在命名空间内创建的变量名称都会带上这个命名空间名作为前级缀。所以，tf.variable_scope函数除了可以控制tf.get_variable执行的功能之外，这个函数也提供了一个管理变量命名空间的方式。以下代码显示了如何通过tf.variable_scope来管理变量的名称。"></a><em>tf.variable_scope函数生成的上下文管理器也会创建个TensorFlow中的命名空间，在命名空间内创建的变量名称都会带上这个命名空间名作为前级缀。所以，tf.variable_scope函数除了可以控制tf.get_variable执行的功能之外，这个函数也提供了一个管理变量命名空间的方式。以下代码显示了如何通过tf.variable_scope来管理变量的名称。</em></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">v1 = tf.get_variable(<span class="string">"v"</span>, [<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> v1.name<span class="comment">#输出v:0"v" 为变量的名称，“:0”表示这个变量是生成变量这个运算的第一个结果。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>,reuse=<span class="keyword">True</span>):</span><br><span class="line">    v2 = tf.get_variable(<span class="string">"v"</span>, [<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> v2.name<span class="comment">#输出foo/v:O.在tf.variabie_scope中创建的变量，名称前面会加入命名空间的名称，并通过/来分隔命名空间的名称和变量的名称。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"bar"</span>):</span><br><span class="line">        v3 = tf.get_variable(<span class="string">"v"</span>, [<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">print</span> v3.name<span class="comment">#输出foo/bar 'v :0。命名空间可以嵌套，同时变量的名称也会加入所有命名空间的名称作为前缀。</span></span><br><span class="line">        </span><br><span class="line">v4 = tf.get_variable(<span class="string">"v1"</span>, [<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> v4.name<span class="comment">#输出foo/v1:0。当命名空间退出之后，变量名称也就不会再被加入其前缀了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个名称为空的命名空间，并设置为reuse=True</span></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">""</span>,reuse=<span class="keyword">True</span>):</span><br><span class="line">    v5 = tf.get_variable(<span class="string">"foo/bar/v"</span>, [<span class="number">1</span>])</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    可以直接通过带命名空间名称的变量名来获取其他命名空   间下的变量。比如这里通过指定名称foo/bar/v来获取在命名空间foo/bar/中创建的变量。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> v5 == v3   <span class="comment">#输出True。</span></span><br><span class="line">    v6 = tf.get_variable(<span class="string">"v1"</span>, [<span class="number">1</span>])     </span><br><span class="line">    <span class="keyword">print</span> v6 == v4   <span class="comment">#输出True.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      tensorflow中许多常见的变量初始化函数，本文对此进行了总结
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>selenium中的常见报错</title>
    <link href="http://yoursite.com/2017/11/09/selenium%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2017/11/09/selenium中的常见报错/</id>
    <published>2017-11-09T15:33:28.000Z</published>
    <updated>2018-04-19T15:43:31.396Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: cannot import name ‘webdriver&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selenium.common.exceptions.WebDriverException: Message: &apos;chromedriver&apos; executable needs to be in PATH</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selenium.common.exceptions.WebDriverException: Message: &apos;chromedriver.exe&apos; executable needs to be in PATH.</span><br></pre></td></tr></table></figure><h4 id="Please-see-https-sites-google-com-a-chromium-org-chromedriver-home原因是由于没有将chromedriver-exe放在-usr-bin-目录里"><a href="#Please-see-https-sites-google-com-a-chromium-org-chromedriver-home原因是由于没有将chromedriver-exe放在-usr-bin-目录里" class="headerlink" title="Please see https://sites.google.com/a/chromium.org/chromedriver/home原因是由于没有将chromedriver.exe放在/usr/bin/目录里"></a>Please see <a href="https://sites.google.com/a/chromium.org/chromedriver/home原因是由于没有将chromedriver.exe放在/usr/bin/目录里" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/home原因是由于没有将chromedriver.exe放在/usr/bin/目录里</a></h4><h4 id="在导入是要注意："><a href="#在导入是要注意：" class="headerlink" title="在导入是要注意："></a>在导入是要注意：</h4><p><img src="http://img.blog.csdn.net/20171109233709927?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h5 id="第四行"><a href="#第四行" class="headerlink" title="第四行"></a>第四行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(r&quot;/usr/bin/chromedriver”) </span><br><span class="line">``` </span><br><span class="line">##### 中应该是chromedrive.exe的路径</span><br><span class="line">---</span><br><span class="line">### 2.</span><br><span class="line">```python</span><br><span class="line">======================================================================</span><br><span class="line">ERROR: test_search_in_python_org (__main__.mytest)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;mystyle.py&quot;, line 12, in test_search_in_python_org</span><br><span class="line">    driver.get(&quot;www.baidu.com&quot;)</span><br><span class="line">  File &quot;/Users/zhangjia/anaconda/lib/python3.6/site-packages/selenium/webdriver/remote/webdriver.py&quot;, line 309, in get</span><br><span class="line">    self.execute(Command.GET, &#123;&apos;url&apos;: url&#125;)</span><br><span class="line">  File &quot;/Users/zhangjia/anaconda/lib/python3.6/site-packages/selenium/webdriver/remote/webdriver.py&quot;, line 297, in execute</span><br><span class="line">    self.error_handler.check_response(response)</span><br><span class="line">  File &quot;/Users/zhangjia/anaconda/lib/python3.6/site-packages/selenium/webdriver/remote/errorhandler.py&quot;, line 194, in check_response</span><br><span class="line">    raise exception_class(message, screen, stacktrace)</span><br><span class="line">selenium.common.exceptions.WebDriverException: Message: unknown error: unhandled inspector error: &#123;&quot;code&quot;:-32000,&quot;message&quot;:&quot;Cannot navigate to invalid URL&quot;&#125;</span><br><span class="line">  (Session info: chrome=61.0.3163.100)</span><br><span class="line">  (Driver info: chromedriver=2.32.498537 (cb2f855cbc7b82e20387eaf9a43f6b99b6105061),platform=Mac OS X 10.12.6 x86_64)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 1.896s</span><br><span class="line">FAILED (errors=1)</span><br></pre></td></tr></table></figure><h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p><img src="http://img.blog.csdn.net/20171109233835312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="第十二行应该是http-www-baidu-com不是www-baidu-com"><a href="#第十二行应该是http-www-baidu-com不是www-baidu-com" class="headerlink" title="第十二行应该是http://www.baidu.com不是www.baidu.com"></a>第十二行应该是<a href="http://www.baidu.com不是www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com不是www.baidu.com</a></h4>]]></content>
    
    <summary type="html">
    
      在使用selenium进行自动化测试的过程中遇到了许多错误，本文对这些常见错误进行总结
    
    </summary>
    
      <category term="selenium" scheme="http://yoursite.com/categories/selenium/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="selenium" scheme="http://yoursite.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>selenium下载文件</title>
    <link href="http://yoursite.com/2017/11/09/selenium%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/11/09/selenium下载文件/</id>
    <published>2017-11-09T15:33:28.000Z</published>
    <updated>2018-04-19T15:40:42.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Firefox文件下载"><a href="#一、Firefox文件下载" class="headerlink" title="一、Firefox文件下载"></a>一、Firefox文件下载</h2><hr><h3 id="Web容许我们设置默认的文件下载路劲，文件会自动下载并且存放在指定的目录下。"><a href="#Web容许我们设置默认的文件下载路劲，文件会自动下载并且存放在指定的目录下。" class="headerlink" title="Web容许我们设置默认的文件下载路劲，文件会自动下载并且存放在指定的目录下。"></a>Web容许我们设置默认的文件下载路劲，文件会自动下载并且存放在指定的目录下。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">fp = webdriver.FirefoxProfile()</span><br><span class="line">fp.set_preference(<span class="string">"browser.download.folderList"</span>,<span class="number">0</span>)</span><br><span class="line">fp.set_preference(<span class="string">"browser.download.manager.showhenStarting"</span>,<span class="keyword">True</span>)</span><br><span class="line">fp.set_preference(<span class="string">"browser.download.dir"</span>,os.getcwd())</span><br><span class="line">fp.set_preference(<span class="string">"browser.helperApps.neverAsk.saveToDisk"</span>,<span class="string">"applaction/octet-stream"</span>)<span class="comment">#下载文件类型</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox(firefox_profile = fp)</span><br><span class="line">driver.get(<span class="string">"http://pypi.Python.org/pypi/selenium"</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id='download-button']/a"</span>).click()</span><br><span class="line"> </span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id='content']/div[3]/table/tbody/tr[3]/td[1]/span/a[1]"</span>).click()</span><br></pre></td></tr></table></figure><h4 id="为了让Firefox浏览器能实现文件下载，需要通过FirefoxProfile（）对其做一些设置。"><a href="#为了让Firefox浏览器能实现文件下载，需要通过FirefoxProfile（）对其做一些设置。" class="headerlink" title="为了让Firefox浏览器能实现文件下载，需要通过FirefoxProfile（）对其做一些设置。"></a>为了让Firefox浏览器能实现文件下载，需要通过FirefoxProfile（）对其做一些设置。</h4><h4 id="browser-download-foladerList-设置成0代表下载到浏览器默认下载路径，设置成2则可以保存到指定的目录。"><a href="#browser-download-foladerList-设置成0代表下载到浏览器默认下载路径，设置成2则可以保存到指定的目录。" class="headerlink" title="browser.download.foladerList :设置成0代表下载到浏览器默认下载路径，设置成2则可以保存到指定的目录。"></a>browser.download.foladerList :设置成0代表下载到浏览器默认下载路径，设置成2则可以保存到指定的目录。</h4><h4 id="browser-download-manager-showWhenStarting-是否显示开始：True为显示开始，Flase为不显示开始。"><a href="#browser-download-manager-showWhenStarting-是否显示开始：True为显示开始，Flase为不显示开始。" class="headerlink" title="browser.download.manager.showWhenStarting  :是否显示开始：True为显示开始，Flase为不显示开始。"></a>browser.download.manager.showWhenStarting  :是否显示开始：True为显示开始，Flase为不显示开始。</h4><h4 id="browser-download-dir-用于指定所下载文件的目录。"><a href="#browser-download-dir-用于指定所下载文件的目录。" class="headerlink" title="browser.download.dir :用于指定所下载文件的目录。"></a>browser.download.dir :用于指定所下载文件的目录。</h4><h4 id="os-getcwd（）函数不需要传递参数。用于返回当前的目录。"><a href="#os-getcwd（）函数不需要传递参数。用于返回当前的目录。" class="headerlink" title="os.getcwd（）函数不需要传递参数。用于返回当前的目录。"></a>os.getcwd（）函数不需要传递参数。用于返回当前的目录。</h4><h4 id="browser-helperApps-neverAsk-saveToDisk-对所给文件类型不再弹出框进行询问。"><a href="#browser-helperApps-neverAsk-saveToDisk-对所给文件类型不再弹出框进行询问。" class="headerlink" title="browser.helperApps.neverAsk.saveToDisk  :对所给文件类型不再弹出框进行询问。"></a>browser.helperApps.neverAsk.saveToDisk  :对所给文件类型不再弹出框进行询问。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">profile = webdriver.FirefoxProfile()</span><br><span class="line">profile.set_preference(<span class="string">'browser.download.dir'</span>, <span class="string">'d:\\'</span>)  <span class="comment">#现在文件存放的目录</span></span><br><span class="line">profile.set_preference(<span class="string">'browser.download.folderList'</span>, <span class="number">2</span>)</span><br><span class="line">profile.set_preference(<span class="string">'browser.download.manager.showWhenStarting'</span>, <span class="keyword">False</span>)</span><br><span class="line">profile.set_preference(<span class="string">'browser.helperApps.neverAsk.saveToDisk'</span>, <span class="string">'application/zip'</span>)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox(firefox_profile=profile)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'http://sahitest.com/demo/saveAs.htm'</span>)</span><br><span class="line"><span class="comment">#driver.find_element_by_xpath('//a[text()="testsaveas.zip"]').click()</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">'/html/body/a[1]'</span>).click()</span><br><span class="line">sleep(<span class="number">20</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><hr><h2 id="二、Chrome文件下载"><a href="#二、Chrome文件下载" class="headerlink" title="二、Chrome文件下载"></a>二、Chrome文件下载</h2><hr><h3 id="download-default-directory-设置下载路径"><a href="#download-default-directory-设置下载路径" class="headerlink" title="download.default_directory:设置下载路径"></a>download.default_directory:设置下载路径</h3><h3 id="profile-default-content-settings-popups-设置为0禁止弹出窗口"><a href="#profile-default-content-settings-popups-设置为0禁止弹出窗口" class="headerlink" title="profile.default_content_settings.popups:设置为0禁止弹出窗口"></a>profile.default_content_settings.popups:设置为0禁止弹出窗口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">options = webdriver.ChromeOptions() </span><br><span class="line">prefs = &#123;<span class="string">'profile.default_content_settings.popups'</span>: <span class="number">0</span>, <span class="string">'download.default_directory'</span>: <span class="string">'d:\\'</span>&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">'prefs'</span>, prefs) </span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">'D:\\chromedriver.exe'</span>, chrome_options=options) </span><br><span class="line">driver.get(<span class="string">'http://sahitest.com/demo/saveAs.htm'</span>) </span><br><span class="line">driver.find_element_by_xpath(<span class="string">'//a[text()="testsaveas.zip"]'</span>).click() </span><br><span class="line">sleep(<span class="number">3</span>) </span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171109233257250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      本文总结了在chrome以及firefox两个浏览器的情况下如何使用selenium进行文件下载
    
    </summary>
    
      <category term="selenium" scheme="http://yoursite.com/categories/selenium/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="selenium" scheme="http://yoursite.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>selenium中如何定位伪元素</title>
    <link href="http://yoursite.com/2017/11/09/selenium%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2017/11/09/selenium中如何定位伪元素/</id>
    <published>2017-11-09T15:28:51.000Z</published>
    <updated>2018-04-19T15:36:53.413Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20171109232830291?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>定位方法：<br>driver.find_element_by_css_selector(‘div.panel-body&gt;div’)</p>]]></content>
    
    <summary type="html">
    
      使用selenium进行自动化测试时，定义html的微元素总是失败，解决办法如下
    
    </summary>
    
      <category term="selenium" scheme="http://yoursite.com/categories/selenium/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="selenium" scheme="http://yoursite.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>python字符串前缀 u和r的区别</title>
    <link href="http://yoursite.com/2017/11/09/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E7%BC%80-u%E5%92%8Cr%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/11/09/python字符串前缀-u和r的区别/</id>
    <published>2017-11-09T15:25:46.000Z</published>
    <updated>2018-04-19T15:34:32.471Z</updated>
    
    <content type="html"><![CDATA[<p>在python2里面，u表示unicode string，类型是unicode, 没有u表示byte string，类型是 str。在python3里面，所有字符串都是unicode string, u前缀没有特殊含义了。r都表示raw string. 与特殊字符的escape规则有关，一般用在正则表达式里面。r和u可以搭配使用，例如ur”abc”。</p>]]></content>
    
    <summary type="html">
    
      平时在使用python时经常会看到python字符串前有u和r，本文解释这两个有何区别
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python3格式化输出</title>
    <link href="http://yoursite.com/2017/11/09/python3%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
    <id>http://yoursite.com/2017/11/09/python3格式化输出/</id>
    <published>2017-11-09T15:21:22.000Z</published>
    <updated>2018-04-19T15:37:27.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python格式化字符串有-和-两种-字符串格式控制符"><a href="#python格式化字符串有-和-两种-字符串格式控制符" class="headerlink" title="python格式化字符串有%和{}两种 字符串格式控制符."></a>python格式化字符串有%和{}两种 字符串格式控制符.</h2><hr><h3 id="字符串输入数据格式类型-格式操作符号"><a href="#字符串输入数据格式类型-格式操作符号" class="headerlink" title="字符串输入数据格式类型(%格式操作符号)"></a>字符串输入数据格式类型(%格式操作符号)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%%百分号标记</span><br><span class="line">%c字符及其ASCII码</span><br><span class="line">%s字符串</span><br><span class="line">%d有符号整数(十进制)</span><br><span class="line">%u无符号整数(十进制)</span><br><span class="line">%o无符号整数(八进制)</span><br><span class="line">%x无符号整数(十六进制)</span><br><span class="line">%X无符号整数(十六进制大写字符)</span><br><span class="line">%e浮点数字(科学计数法)</span><br><span class="line">%E浮点数字(科学计数法，用E代替e)</span><br><span class="line">%f浮点数字(用小数点符号)</span><br><span class="line">%g浮点数字(根据值的大小采用%e或%f)</span><br><span class="line">%G浮点数字(类似于%g)</span><br><span class="line">%p指针(用十六进制打印值的内存地址)</span><br><span class="line">%n存储输出字符的数量放进参数列表的下一个变量中</span><br></pre></td></tr></table></figure><hr><h3 id="字符串格式控制-name-flag-width-precision-type"><a href="#字符串格式控制-name-flag-width-precision-type" class="headerlink" title="字符串格式控制%[(name)][flag][width][.][precision]type"></a>字符串格式控制%[(name)][flag][width][.][precision]type</h3><h4 id="name-可为空，数字-占位-命名-传递参数名-不能以数字开头-以字典格式映射格式化，其为键名"><a href="#name-可为空，数字-占位-命名-传递参数名-不能以数字开头-以字典格式映射格式化，其为键名" class="headerlink" title="name:可为空，数字(占位),命名(传递参数名,不能以数字开头)以字典格式映射格式化，其为键名"></a>name:可为空，数字(占位),命名(传递参数名,不能以数字开头)以字典格式映射格式化，其为键名</h4><h4 id="flag-标记格式限定符号-包含-和0-表示右对齐-会显示正负号-左对齐-前面默认为填充空格-即默认右对齐-，0表示填充0，-表示八进制时前面补充0-16进制数填充0x-二进制填充0b"><a href="#flag-标记格式限定符号-包含-和0-表示右对齐-会显示正负号-左对齐-前面默认为填充空格-即默认右对齐-，0表示填充0，-表示八进制时前面补充0-16进制数填充0x-二进制填充0b" class="headerlink" title="flag:标记格式限定符号,包含+-#和0,+表示右对齐(会显示正负号),-左对齐,前面默认为填充空格(即默认右对齐)，0表示填充0，#表示八进制时前面补充0,16进制数填充0x,二进制填充0b"></a>flag:标记格式限定符号,包含+-#和0,+表示右对齐(会显示正负号),-左对齐,前面默认为填充空格(即默认右对齐)，0表示填充0，#表示八进制时前面补充0,16进制数填充0x,二进制填充0b</h4><h4 id="width-宽度-最短长度-包含小数点-小于width时会填充"><a href="#width-宽度-最短长度-包含小数点-小于width时会填充" class="headerlink" title="width:宽度(最短长度,包含小数点,小于width时会填充)"></a>width:宽度(最短长度,包含小数点,小于width时会填充)</h4><h4 id="precision-小数点后的位数-与C相同"><a href="#precision-小数点后的位数-与C相同" class="headerlink" title="precision:小数点后的位数,与C相同"></a>precision:小数点后的位数,与C相同</h4><h4 id="type-输入格式类型，请看上面"><a href="#type-输入格式类型，请看上面" class="headerlink" title="type:输入格式类型，请看上面"></a>type:输入格式类型，请看上面</h4><h4 id="还有一种format-spec格式"><a href="#还有一种format-spec格式" class="headerlink" title="还有一种format_spec格式"></a>还有一种format_spec格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;[name][:][[fill]align][sign][#][0][width][,][.precision][type]&#125;</span><br><span class="line">用&#123;&#125;包裹name命名传递给format以命名=值 写法,非字典映射,其他和上面相同</span><br><span class="line"></span><br><span class="line">fill =  &lt;any character&gt;　　#fill是表示可以填写任何</span><br><span class="line">align =  &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot;　　#align是对齐方式，&lt;是左对齐， &gt;是右对齐，^是居中对齐。</span><br><span class="line">sign  =  &quot;+&quot; | &quot;-&quot; | &quot; &quot;　　#sign是符号， +表示正号， -表示负号</span><br><span class="line">width =  integer　　#width是数字宽度，表示总共输出多少位数字</span><br><span class="line">precision =  integer　　#precision是小数保留位数</span><br><span class="line">type =  &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;　　#type是输出数字值是的表示方式</span><br><span class="line">比如b是二进制表示；比如E是指数表示；比如X是十六进制表示例子</span><br></pre></td></tr></table></figure><hr><p>###例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"&#123;:,&#125;"</span>.format(<span class="number">123456</span>))<span class="comment">#输出1234,56</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;a:w^8&#125;"</span>.format(a=<span class="string">"8"</span>))<span class="comment">#输出www8wwww,填充w</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%.5f"</span> %<span class="number">5</span>)<span class="comment">#输出5.000000</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%-7s3"</span> %(<span class="string">"python"</span>))<span class="comment">#输出python 3</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%.3e"</span> %<span class="number">2016</span>)<span class="comment">#输出2.016e+03,也可以写大E</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%d %s"</span> %(<span class="number">123456</span>,<span class="string">"myblog"</span>))<span class="comment">#输出123456 myblog</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%(what)s is %(year)d"</span> % &#123;<span class="string">"what"</span>:<span class="string">"this year"</span>,<span class="string">"year"</span>:<span class="number">2016</span>&#125;)<span class="comment">#输出this year is 2016</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"&#123;0&#125;&#123;1&#125;"</span>.format(<span class="string">"hello"</span>,<span class="string">"fun"</span>))<span class="comment">#输出hellofun,这与CSharp的格式化字符(占位符)相似</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;&#125;&#123;&#125;&#123;&#125;"</span>.format(<span class="string">"spkk"</span>,<span class="string">"."</span>,<span class="string">"cn"</span>))<span class="comment">#输出spkk.cn</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;a[0]&#125;&#123;a[1]&#125;&#123;a[2]&#125;"</span>.format(a=[<span class="string">"spkk"</span>,<span class="string">"."</span>,<span class="string">"cn"</span>]))<span class="comment">#输出spkk.cn</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;dict[host]&#125;&#123;dict[dot]&#125;&#123;dict[domain]&#125;"</span>.format(dict=&#123;<span class="string">"host"</span>:<span class="string">"www"</span>,<span class="string">"domain"</span>:<span class="string">"spkk.cn"</span>,<span class="string">"dot"</span>:<span class="string">"."</span>&#125;))<span class="comment">#输出www.spkk.cn</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;a&#125;&#123;b&#125;"</span>.format(a=<span class="string">"python"</span>,b=<span class="string">"3"</span>))<span class="comment">#输出python3</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"&#123;who&#125; &#123;doing&#125; &#123;0&#125;"</span>.format(<span class="string">"python"</span>,doing=<span class="string">"like"</span>,who=<span class="string">"I"</span>))<span class="comment">#输出I like python</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      本文总结了常见的字符串输入数据格式类型以及字符串格式控制
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow中一些常见的函数</title>
    <link href="http://yoursite.com/2017/11/09/Tensorflow%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/11/09/Tensorflow中一些常见的函数/</id>
    <published>2017-11-09T15:02:05.000Z</published>
    <updated>2018-04-19T15:29:48.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tensorflow中一些常见的函数"><a href="#Tensorflow中一些常见的函数" class="headerlink" title="Tensorflow中一些常见的函数"></a>Tensorflow中一些常见的函数</h2><hr><h3 id="1-tf-constant-value-dtype-None-shape-None-name-39-Const-39"><a href="#1-tf-constant-value-dtype-None-shape-None-name-39-Const-39" class="headerlink" title="1.tf.constant(value,dtype=None,shape=None,name=&#39;Const&#39;)"></a>1.<code>tf.constant(value,dtype=None,shape=None,name=&#39;Const&#39;)</code></h3><h4 id="创建一个常量tensor，按照给出value来赋值，可以用shape来指定其形状。value可以是一个数，也可以是一个list。-如果是一个数，那么这个常亮中所有值的按该数来赋值。-如果是list-那么len-value-一定要小于等于shape展开后的长度。赋值时，先将value中的值逐个存入。不够的部分，则全部存入value的最后一个值。"><a href="#创建一个常量tensor，按照给出value来赋值，可以用shape来指定其形状。value可以是一个数，也可以是一个list。-如果是一个数，那么这个常亮中所有值的按该数来赋值。-如果是list-那么len-value-一定要小于等于shape展开后的长度。赋值时，先将value中的值逐个存入。不够的部分，则全部存入value的最后一个值。" class="headerlink" title="创建一个常量tensor，按照给出value来赋值，可以用shape来指定其形状。value可以是一个数，也可以是一个list。 如果是一个数，那么这个常亮中所有值的按该数来赋值。 如果是list,那么len(value)一定要小于等于shape展开后的长度。赋值时，先将value中的值逐个存入。不够的部分，则全部存入value的最后一个值。"></a>创建一个常量tensor，按照给出value来赋值，可以用shape来指定其形状。value可以是一个数，也可以是一个list。 如果是一个数，那么这个常亮中所有值的按该数来赋值。 如果是list,那么len(value)一定要小于等于shape展开后的长度。赋值时，先将value中的值逐个存入。不够的部分，则全部存入value的最后一个值。</h4><p><img src="http://img.blog.csdn.net/20171109215524866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h3 id="2-tf-nn-relu"><a href="#2-tf-nn-relu" class="headerlink" title="2.tf.nn.relu"></a>2.<code>tf.nn.relu</code></h3><h2 id="使用激活函数relu进行计算-类似的还有-tf-sigmoid-tf-tanh"><a href="#使用激活函数relu进行计算-类似的还有-tf-sigmoid-tf-tanh" class="headerlink" title="####使用激活函数relu进行计算 类似的还有 tf.sigmoid , tf.tanh"></a>####使用激活函数relu进行计算 类似的还有 <code>tf.sigmoid</code> , <code>tf.tanh</code></h2><h3 id="3-tf-matmul"><a href="#3-tf-matmul" class="headerlink" title="3.tf.matmul"></a>3.<code>tf.matmul</code></h3><h4 id="进行矩阵相乘"><a href="#进行矩阵相乘" class="headerlink" title="进行矩阵相乘"></a>进行矩阵相乘</h4><hr><h3 id="4-tf-placeholder"><a href="#4-tf-placeholder" class="headerlink" title="4.tf.placeholder"></a>4.<code>tf.placeholder</code></h3><h4 id="运行时传入参数-placeholder（type-strucuct…-它的第一个参数是你要保存的数据的数据类型，大多数是tensorflow中的float32数据类型，后面的参数就是要保存数据的结构，比如要保存一个1×2的矩阵，则struct-1-2-。"><a href="#运行时传入参数-placeholder（type-strucuct…-它的第一个参数是你要保存的数据的数据类型，大多数是tensorflow中的float32数据类型，后面的参数就是要保存数据的结构，比如要保存一个1×2的矩阵，则struct-1-2-。" class="headerlink" title="运行时传入参数,placeholder（type,strucuct…)它的第一个参数是你要保存的数据的数据类型，大多数是tensorflow中的float32数据类型，后面的参数就是要保存数据的结构，比如要保存一个1×2的矩阵，则struct=[1 2]。"></a>运行时传入参数,placeholder（type,strucuct…)它的第一个参数是你要保存的数据的数据类型，大多数是tensorflow中的float32数据类型，后面的参数就是要保存数据的结构，比如要保存一个1×2的矩阵，则struct=[1 2]。</h4><hr><h3 id="5-tf-Variable（initializer，-name"><a href="#5-tf-Variable（initializer，-name" class="headerlink" title="5.tf.Variable（initializer， name)"></a>5.<code>tf.Variable（initializer， name)</code></h3><h4 id="initializer是初始化参数，可以为tf-random-normal，tf-constant，tf-constant等，name就是变量的名字，用法如下："><a href="#initializer是初始化参数，可以为tf-random-normal，tf-constant，tf-constant等，name就是变量的名字，用法如下：" class="headerlink" title="initializer是初始化参数，可以为tf.random_normal，tf.constant，tf.constant等，name就是变量的名字，用法如下："></a>initializer是初始化参数，可以为tf.random_normal，tf.constant，tf.constant等，name就是变量的名字，用法如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf;</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np;    </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt;    </span><br><span class="line">    </span><br><span class="line">a1 = tf.Variable(tf.random_normal(shape=[<span class="number">2</span>,<span class="number">3</span>], mean=<span class="number">0</span>, stddev=<span class="number">1</span>), name=<span class="string">'a1'</span>)  </span><br><span class="line">a2 = tf.Variable(tf.constant(<span class="number">1</span>), name=<span class="string">'a2'</span>)  </span><br><span class="line">a3 = tf.Variable(tf.ones(shape=[<span class="number">2</span>,<span class="number">3</span>]), name=<span class="string">'a3'</span>)  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:  </span><br><span class="line">     sess.run(tf.initialize_all_variables())  </span><br><span class="line">     <span class="keyword">print</span> sess.run(a1)  </span><br><span class="line">     <span class="keyword">print</span> sess.run(a2)  </span><br><span class="line">     <span class="keyword">print</span> sess.run(a3)</span><br></pre></td></tr></table></figure><h4 id="输出的结果如下："><a href="#输出的结果如下：" class="headerlink" title="输出的结果如下："></a>输出的结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">[[ 0.76599932  0.99722123 -0.89361787]</span><br><span class="line"> [ 0.19991693 -0.16539733  2.16605783]]</span><br><span class="line">1</span><br><span class="line">[[ 1.  1.  1.]</span><br><span class="line"> [ 1.  1.  1.]]</span><br></pre></td></tr></table></figure><hr><h3 id="6-tf-truncated-normal-shape-mean-stddev"><a href="#6-tf-truncated-normal-shape-mean-stddev" class="headerlink" title="6.tf.truncated_normal(shape, mean, stddev)"></a>6.<code>tf.truncated_normal(shape, mean, stddev)</code></h3><h4 id="shape表示生成张量的维度，mean是均值，stddev是标准差。这个函数产生正太分布，均值和标准差自己设定。这是一个截断的产生正太分布的函数，就是说产生正太分布的值如果与均值的差值大于两倍的标准差，那就重新生成。和一般的正太分布的产生随机数据比起来，这个函数产生的随机数与均值的差距不会超过两倍的标准差，但是一般的别的函数是可能的。"><a href="#shape表示生成张量的维度，mean是均值，stddev是标准差。这个函数产生正太分布，均值和标准差自己设定。这是一个截断的产生正太分布的函数，就是说产生正太分布的值如果与均值的差值大于两倍的标准差，那就重新生成。和一般的正太分布的产生随机数据比起来，这个函数产生的随机数与均值的差距不会超过两倍的标准差，但是一般的别的函数是可能的。" class="headerlink" title="shape表示生成张量的维度，mean是均值，stddev是标准差。这个函数产生正太分布，均值和标准差自己设定。这是一个截断的产生正太分布的函数，就是说产生正太分布的值如果与均值的差值大于两倍的标准差，那就重新生成。和一般的正太分布的产生随机数据比起来，这个函数产生的随机数与均值的差距不会超过两倍的标准差，但是一般的别的函数是可能的。"></a>shape表示生成张量的维度，mean是均值，stddev是标准差。这个函数产生正太分布，均值和标准差自己设定。这是一个截断的产生正太分布的函数，就是说产生正太分布的值如果与均值的差值大于两倍的标准差，那就重新生成。和一般的正太分布的产生随机数据比起来，这个函数产生的随机数与均值的差距不会超过两倍的标准差，但是一般的别的函数是可能的。</h4><p>###示例代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf;  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np;  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt;  </span><br><span class="line">  </span><br><span class="line">c = tf.truncated_normal(shape=[<span class="number">10</span>,<span class="number">10</span>], mean=<span class="number">0</span>, stddev=<span class="number">1</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:  </span><br><span class="line">    <span class="keyword">print</span> sess.run(c)</span><br></pre></td></tr></table></figure></p><h4 id="输出结果如下："><a href="#输出结果如下：" class="headerlink" title="输出结果如下："></a>输出结果如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">[[ <span class="number">1.95758033</span> <span class="number">-0.68666345</span> <span class="number">-1.83860338</span>  <span class="number">0.78213859</span> <span class="number">-1.08119416</span> <span class="number">-1.44530308</span></span><br><span class="line">   <span class="number">0.38035342</span>  <span class="number">0.57904619</span> <span class="number">-0.57145643</span> <span class="number">-1.22899497</span>]</span><br><span class="line"> [<span class="number">-0.75853795</span>  <span class="number">0.48202974</span>  <span class="number">1.03464043</span>  <span class="number">1.19210851</span> <span class="number">-0.15739718</span>  <span class="number">0.8506189</span></span><br><span class="line">   <span class="number">1.18259966</span> <span class="number">-0.99061841</span> <span class="number">-0.51968449</span>  <span class="number">1.38996458</span>]</span><br><span class="line"> [ <span class="number">1.05636907</span> <span class="number">-0.02668529</span>  <span class="number">0.64182931</span>  <span class="number">0.4110294</span>  <span class="number">-0.4978295</span>  <span class="number">-0.64912242</span></span><br><span class="line">   <span class="number">1.27779591</span> <span class="number">-0.01533993</span>  <span class="number">0.47417602</span> <span class="number">-1.28639436</span>]</span><br><span class="line"> [<span class="number">-1.65927458</span> <span class="number">-0.364887</span>   <span class="number">-0.45535028</span>  <span class="number">0.078814</span>   <span class="number">-0.30295736</span>  <span class="number">1.91779387</span></span><br><span class="line">  <span class="number">-0.66928798</span> <span class="number">-0.14847915</span>  <span class="number">0.91875714</span>  <span class="number">0.61889237</span>]</span><br><span class="line"> [<span class="number">-0.01308221</span> <span class="number">-0.38468206</span>  <span class="number">1.34700036</span>  <span class="number">0.64531708</span>  <span class="number">1.15899456</span>  <span class="number">1.09932268</span></span><br><span class="line">   <span class="number">1.22457981</span> <span class="number">-1.1610316</span>   <span class="number">0.59036094</span> <span class="number">-1.97302651</span>]</span><br><span class="line"> [<span class="number">-0.24886213</span>  <span class="number">0.82857937</span>  <span class="number">0.09046989</span>  <span class="number">0.39251322</span>  <span class="number">0.21155456</span> <span class="number">-0.27749416</span></span><br><span class="line">   <span class="number">0.18883201</span>  <span class="number">0.08812679</span> <span class="number">-0.32917103</span>  <span class="number">0.20547724</span>]</span><br><span class="line"> [ <span class="number">0.05388507</span>  <span class="number">0.45474565</span>  <span class="number">0.23398806</span>  <span class="number">1.32670367</span> <span class="number">-0.01957406</span>  <span class="number">0.52013856</span></span><br><span class="line">  <span class="number">-1.13907862</span> <span class="number">-1.71957874</span>  <span class="number">0.75772947</span> <span class="number">-1.01719368</span>]</span><br><span class="line"> [ <span class="number">0.27155915</span>  <span class="number">0.05900437</span>  <span class="number">0.81448066</span> <span class="number">-0.37997526</span> <span class="number">-0.62020499</span> <span class="number">-0.88820189</span></span><br><span class="line">   <span class="number">1.53407145</span> <span class="number">-0.01600445</span> <span class="number">-0.4236775</span>  <span class="number">-1.68852305</span>]</span><br><span class="line"> [ <span class="number">0.78942037</span> <span class="number">-1.32458341</span> <span class="number">-0.91667277</span> <span class="number">-0.00963761</span>  <span class="number">0.76824385</span> <span class="number">-0.5405798</span></span><br><span class="line">  <span class="number">-0.73307443</span> <span class="number">-1.19854116</span> <span class="number">-0.66179073</span>  <span class="number">0.26329204</span>]</span><br><span class="line"> [ <span class="number">0.59473759</span> <span class="number">-0.37507254</span> <span class="number">-1.21623695</span> <span class="number">-1.30528259</span>  <span class="number">1.18013096</span> <span class="number">-1.32077384</span></span><br><span class="line">  <span class="number">-0.59241474</span> <span class="number">-0.28063133</span>  <span class="number">0.12341146</span>  <span class="number">0.48480138</span>]]</span><br></pre></td></tr></table></figure><hr><h3 id="7-tf-train-ExponentialMovingAverage"><a href="#7-tf-train-ExponentialMovingAverage" class="headerlink" title="7.tf.train.ExponentialMovingAverage"></a>7.<code>tf.train.ExponentialMovingAverage</code></h3><h4 id="这个函数用于更新参数，就是采用滑动平均的方法更新参数。这个函数初始化需要提供一个衰减速率（decay），用于控制模型的更新速度。这个函数还会维护一个影子变量（也就是更新参数后的参数值），这个影子变量的初始值就是这个变量的初始值，影子变量值的更新方式如下："><a href="#这个函数用于更新参数，就是采用滑动平均的方法更新参数。这个函数初始化需要提供一个衰减速率（decay），用于控制模型的更新速度。这个函数还会维护一个影子变量（也就是更新参数后的参数值），这个影子变量的初始值就是这个变量的初始值，影子变量值的更新方式如下：" class="headerlink" title="这个函数用于更新参数，就是采用滑动平均的方法更新参数。这个函数初始化需要提供一个衰减速率（decay），用于控制模型的更新速度。这个函数还会维护一个影子变量（也就是更新参数后的参数值），这个影子变量的初始值就是这个变量的初始值，影子变量值的更新方式如下："></a>这个函数用于更新参数，就是采用滑动平均的方法更新参数。这个函数初始化需要提供一个衰减速率（decay），用于控制模型的更新速度。这个函数还会维护一个影子变量（也就是更新参数后的参数值），这个影子变量的初始值就是这个变量的初始值，影子变量值的更新方式如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shadow_variable = decay * shadow_variable + (1-decay) * variable</span><br></pre></td></tr></table></figure><h4 id="shadow-variable是影子变量，variable表示待更新的变量，也就是变量被赋予的值，decay为衰减速率。decay一般设为接近于1的数（0-99-0-999）。decay越大模型越稳定，因为decay越大，参数更新的速度就越慢，趋于稳定。"><a href="#shadow-variable是影子变量，variable表示待更新的变量，也就是变量被赋予的值，decay为衰减速率。decay一般设为接近于1的数（0-99-0-999）。decay越大模型越稳定，因为decay越大，参数更新的速度就越慢，趋于稳定。" class="headerlink" title="shadow_variable是影子变量，variable表示待更新的变量，也就是变量被赋予的值，decay为衰减速率。decay一般设为接近于1的数（0.99,0.999）。decay越大模型越稳定，因为decay越大，参数更新的速度就越慢，趋于稳定。"></a>shadow_variable是影子变量，variable表示待更新的变量，也就是变量被赋予的值，decay为衰减速率。decay一般设为接近于1的数（0.99,0.999）。decay越大模型越稳定，因为decay越大，参数更新的速度就越慢，趋于稳定。</h4><h4 id="tf-train-ExponentialMovingAverage这个函数还提供了自己动更新decay的计算方式：decay-min（decay，（1-steps）-（10-steps））其中steps是迭代的次数，可以自己设定。"><a href="#tf-train-ExponentialMovingAverage这个函数还提供了自己动更新decay的计算方式：decay-min（decay，（1-steps）-（10-steps））其中steps是迭代的次数，可以自己设定。" class="headerlink" title="tf.train.ExponentialMovingAverage这个函数还提供了自己动更新decay的计算方式：decay= min（decay，（1+steps）/（10+steps））其中steps是迭代的次数，可以自己设定。"></a>tf.train.ExponentialMovingAverage这个函数还提供了自己动更新decay的计算方式：<code>decay= min（decay，（1+steps）/（10+steps））</code>其中steps是迭代的次数，可以自己设定。</h4><h3 id="示例代码如下："><a href="#示例代码如下：" class="headerlink" title="示例代码如下："></a>示例代码如下：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf;  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np;  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt;  </span><br><span class="line">  </span><br><span class="line">v1 = tf.Variable(<span class="number">0</span>, dtype=tf.float32)  </span><br><span class="line">step = tf.Variable(tf.constant(<span class="number">0</span>))  </span><br><span class="line">  </span><br><span class="line">ema = tf.train.ExponentialMovingAverage(<span class="number">0.99</span>, step)  </span><br><span class="line">maintain_average = ema.apply([v1])  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:  </span><br><span class="line">    init = tf.initialize_all_variables()  </span><br><span class="line">    sess.run(init)  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">print</span> sess.run([v1, ema.average(v1)]) <span class="comment">#初始的值都为0  </span></span><br><span class="line">  </span><br><span class="line">    sess.run(tf.assign(v1, <span class="number">5</span>)) <span class="comment">#把v1变为5  </span></span><br><span class="line">    sess.run(maintain_average)  </span><br><span class="line">    <span class="keyword">print</span> sess.run([v1, ema.average(v1)]) <span class="comment"># decay=min(0.99, 1/10)=0.1, v1=0.1*0+0.9*5=4.5  </span></span><br><span class="line"> </span><br><span class="line">    sess.run(tf.assign(step, <span class="number">10000</span>)) <span class="comment"># steps=10000  </span></span><br><span class="line">    sess.run(tf.assign(v1, <span class="number">10</span>)) <span class="comment"># v1=10  </span></span><br><span class="line">    sess.run(maintain_average)  </span><br><span class="line">    <span class="keyword">print</span> sess.run([v1, ema.average(v1)]) <span class="comment"># decay=min(0.99,(1+10000)/(10+10000))=0.99, v1=0.99*4.5+0.01*10=4.555  </span></span><br><span class="line">  </span><br><span class="line">    sess.run(maintain_average)  </span><br><span class="line">    <span class="keyword">print</span> sess.run([v1, ema.average(v1)]) <span class="comment">#decay=min(0.99,&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;(1+10000)/(10+10000)&lt;/span&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;)=0.99, v1=0.99*4.555+0.01*10=4.6&lt;/span&gt;</span></span><br></pre></td></tr></table></figure><h4 id="输出结果如下：-1"><a href="#输出结果如下：-1" class="headerlink" title="输出结果如下："></a>输出结果如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">[<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">[<span class="number">5.0</span>, <span class="number">4.5</span>]</span><br><span class="line">[<span class="number">10.0</span>, <span class="number">4.5549998</span>]</span><br><span class="line">[<span class="number">10.0</span>, <span class="number">4.6094499</span>]</span><br></pre></td></tr></table></figure><h4 id="解释：每次更新完以后，影子变量的值更新，varible的值就是你设定的值。如果在下一次运行这个函数的时候你不在指定新的值，那就不变，影子变量更新。如果指定，那就variable改变，影子变量也改变"><a href="#解释：每次更新完以后，影子变量的值更新，varible的值就是你设定的值。如果在下一次运行这个函数的时候你不在指定新的值，那就不变，影子变量更新。如果指定，那就variable改变，影子变量也改变" class="headerlink" title="解释：每次更新完以后，影子变量的值更新，varible的值就是你设定的值。如果在下一次运行这个函数的时候你不在指定新的值，那就不变，影子变量更新。如果指定，那就variable改变，影子变量也改变"></a>解释：每次更新完以后，影子变量的值更新，varible的值就是你设定的值。如果在下一次运行这个函数的时候你不在指定新的值，那就不变，影子变量更新。如果指定，那就variable改变，影子变量也改变</h4><hr><h3 id="8-tf-clip-by-value"><a href="#8-tf-clip-by-value" class="headerlink" title="8.tf.clip_by_value"></a>8.<code>tf.clip_by_value</code></h3><h4 id="将张量中的一个值限制在一个范围之内"><a href="#将张量中的一个值限制在一个范围之内" class="headerlink" title="将张量中的一个值限制在一个范围之内"></a>将张量中的一个值限制在一个范围之内</h4><p>如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>],[<span class="number">4.0</span>,<span class="number">5.0</span>,<span class="number">6.0</span>]])</span><br><span class="line">print(tf.clip_by_value(a,<span class="number">2.5</span>,<span class="number">4.5</span>).eval())</span><br></pre></td></tr></table></figure></p><h4 id="输出-2-5-2-5-3-4-4-5-4-5-由此可见小于2-5的换成了2-5，大于4-5的都换成了4-5"><a href="#输出-2-5-2-5-3-4-4-5-4-5-由此可见小于2-5的换成了2-5，大于4-5的都换成了4-5" class="headerlink" title="输出[[2.5,2.5,3],[4,4.5,4.5]]由此可见小于2.5的换成了2.5，大于4.5的都换成了4.5"></a>输出[[2.5,2.5,3],[4,4.5,4.5]]由此可见小于2.5的换成了2.5，大于4.5的都换成了4.5</h4><p><code>Tensor.eval()</code> 和 <code>Operation.run()</code> 方法代替 <code>Session.run()</code>。</p><h3 id="9-tf-reduce-mean"><a href="#9-tf-reduce-mean" class="headerlink" title="9.tf.reduce_mean"></a>9.<code>tf.reduce_mean</code></h3><h4 id="指求平均值"><a href="#指求平均值" class="headerlink" title="指求平均值"></a>指求平均值</h4><h4 id="如：tf-reduce-mean-1-2-3-4-5-6"><a href="#如：tf-reduce-mean-1-2-3-4-5-6" class="headerlink" title="如：tf.reduce_mean(([1,2,3],[4,5,6]))"></a>如：<code>tf.reduce_mean(([1,2,3],[4,5,6]))</code></h4><h4 id="等于：（1-2-3-4-5-6）／6-3-5"><a href="#等于：（1-2-3-4-5-6）／6-3-5" class="headerlink" title="等于：（1+2+3+4+5+6）／6 = 3.5"></a>等于：<code>（1+2+3+4+5+6）／6 = 3.5</code></h4><hr><h3 id="10-p-tf-log-q"><a href="#10-p-tf-log-q" class="headerlink" title="10.p * tf.log(q)"></a>10.<code>p * tf.log(q)</code></h3><h4 id="交叉熵损失函数-H-p-q-求和符-p-x-log-q-x-可以直接用Tensorflow交叉熵函数来计算-p-tf-log-q"><a href="#交叉熵损失函数-H-p-q-求和符-p-x-log-q-x-可以直接用Tensorflow交叉熵函数来计算-p-tf-log-q" class="headerlink" title="交叉熵损失函数  H(p,q) = -求和符(p(x)log(q(x)))可以直接用Tensorflow交叉熵函数来计算 p * tf.log(q)"></a>交叉熵损失函数  <code>H(p,q) = -求和符(p(x)log(q(x)))</code>可以直接用Tensorflow交叉熵函数来计算 <code>p * tf.log(q)</code></h4><hr><h3 id="11-tf-nn-softmax-cross-entropy-with-logits-y，y"><a href="#11-tf-nn-softmax-cross-entropy-with-logits-y，y" class="headerlink" title="11.tf.nn.softmax_cross_entropy_with_logits(y，y_)"></a>11.<code>tf.nn.softmax_cross_entropy_with_logits(y，y_)</code></h3><hr><h4 id="直接通过这个公式来实现softmax回归之后的交叉熵损失函数（y指原是神经网络的输出结果，y-指标准答案）"><a href="#直接通过这个公式来实现softmax回归之后的交叉熵损失函数（y指原是神经网络的输出结果，y-指标准答案）" class="headerlink" title="直接通过这个公式来实现softmax回归之后的交叉熵损失函数（y指原是神经网络的输出结果，y_指标准答案）"></a>直接通过这个公式来实现softmax回归之后的交叉熵损失函数（y指原是神经网络的输出结果，y_指标准答案）</h4><h3 id="12-tf-reduce-sum"><a href="#12-tf-reduce-sum" class="headerlink" title="12.tf.reduce_sum"></a>12.<code>tf.reduce_sum</code></h3><h4 id="该函数用来求和"><a href="#该函数用来求和" class="headerlink" title="该函数用来求和"></a>该函数用来求和</h4><hr><h3 id="13-tf-greater"><a href="#13-tf-greater" class="headerlink" title="13.tf.greater"></a>13.<code>tf.greater</code></h3><h4 id="输入两个张量并比较大小，当维度不同时，进行类似于numpy广播的处理，当第一个参数大于第二个是为True反之为False"><a href="#输入两个张量并比较大小，当维度不同时，进行类似于numpy广播的处理，当第一个参数大于第二个是为True反之为False" class="headerlink" title="输入两个张量并比较大小，当维度不同时，进行类似于numpy广播的处理，当第一个参数大于第二个是为True反之为False"></a>输入两个张量并比较大小，当维度不同时，进行类似于numpy广播的处理，当第一个参数大于第二个是为True反之为False</h4><hr><h3 id="14-tf-select"><a href="#14-tf-select" class="headerlink" title="14.tf.select"></a>14.<code>tf.select</code></h3><h2 id="（目前已经更新为tf-where）第一个参数为选择条件，当满足时使用第二个参数，不满足时返回第三个参数"><a href="#（目前已经更新为tf-where）第一个参数为选择条件，当满足时使用第二个参数，不满足时返回第三个参数" class="headerlink" title="####（目前已经更新为tf.where）第一个参数为选择条件，当满足时使用第二个参数，不满足时返回第三个参数"></a>####（目前已经更新为tf.where）第一个参数为选择条件，当满足时使用第二个参数，不满足时返回第三个参数</h2><h3 id="15-tf-train-AdamOptimizer"><a href="#15-tf-train-AdamOptimizer" class="headerlink" title="15.tf.train.AdamOptimizer"></a>15.<code>tf.train.AdamOptimizer</code></h3><h4 id="该函数来控制学习速度。AdamOptimizer-通过使用动量（参数的移动平均数）来改善传统梯度下降，促进超参数动态调整。"><a href="#该函数来控制学习速度。AdamOptimizer-通过使用动量（参数的移动平均数）来改善传统梯度下降，促进超参数动态调整。" class="headerlink" title="该函数来控制学习速度。AdamOptimizer 通过使用动量（参数的移动平均数）来改善传统梯度下降，促进超参数动态调整。"></a>该函数来控制学习速度。AdamOptimizer 通过使用动量（参数的移动平均数）来改善传统梯度下降，促进超参数动态调整。</h4><hr><h3 id="16-tf-contrib-layers-l1-regularize"><a href="#16-tf-contrib-layers-l1-regularize" class="headerlink" title="16.tf.contrib.layers.l1_regularize"></a>16.<code>tf.contrib.layers.l1_regularize</code></h3><h4 id="可以计算解决过拟合化问题的l1正则化项的值-lambda表示正则化的权重"><a href="#可以计算解决过拟合化问题的l1正则化项的值-lambda表示正则化的权重" class="headerlink" title="可以计算解决过拟合化问题的l1正则化项的值   #lambda表示正则化的权重"></a>可以计算解决过拟合化问题的l1正则化项的值   #lambda表示正则化的权重</h4><hr><h3 id="17-tf-contrib-layers-l2-regularize"><a href="#17-tf-contrib-layers-l2-regularize" class="headerlink" title="17.tf.contrib.layers.l2_regularize"></a>17.<code>tf.contrib.layers.l2_regularize</code></h3><h4 id="可以计算解决过拟合化问题的l2正则化项的值"><a href="#可以计算解决过拟合化问题的l2正则化项的值" class="headerlink" title="可以计算解决过拟合化问题的l2正则化项的值"></a>可以计算解决过拟合化问题的l2正则化项的值</h4><hr><h3 id="18-tf-add-to-collection"><a href="#18-tf-add-to-collection" class="headerlink" title="18.tf.add_to_collection"></a>18.<code>tf.add_to_collection</code></h3><h4 id="把变量放入一个集合，把很多变量变成一个列表"><a href="#把变量放入一个集合，把很多变量变成一个列表" class="headerlink" title="把变量放入一个集合，把很多变量变成一个列表"></a>把变量放入一个集合，把很多变量变成一个列表</h4><hr><h3 id="19-tf-train-ExpontialMovingAverage"><a href="#19-tf-train-ExpontialMovingAverage" class="headerlink" title="19.tf.train.ExpontialMovingAverage"></a>19.<code>tf.train.ExpontialMovingAverage</code></h3><h4 id="实现滑动平均模型"><a href="#实现滑动平均模型" class="headerlink" title="实现滑动平均模型"></a>实现滑动平均模型</h4><hr><h3 id="20-tf-assign-x-y"><a href="#20-tf-assign-x-y" class="headerlink" title="20.tf.assign(x,y)"></a>20.<code>tf.assign(x,y)</code></h3><h4 id="将y的值赋值给x-nbsp"><a href="#将y的值赋值给x-nbsp" class="headerlink" title="将y的值赋值给x&nbsp;"></a>将y的值赋值给x&nbsp;</h4><hr><h3 id="30"><a href="#30" class="headerlink" title="30."></a>30.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mnist = input_data.resd_data_sets(<span class="string">"文件路径”)  </span></span><br><span class="line"><span class="string">mnist.train.next_batch(batch_size)  #input_data.resd_data_sets</span></span><br></pre></td></tr></table></figure><h4 id="函数生成的类还提供了mnist-train-next-batch函数，他将从所有的训练数据中读取一小部分作为训练数据batch"><a href="#函数生成的类还提供了mnist-train-next-batch函数，他将从所有的训练数据中读取一小部分作为训练数据batch" class="headerlink" title="函数生成的类还提供了mnist.train.next_batch函数，他将从所有的训练数据中读取一小部分作为训练数据batch"></a>函数生成的类还提供了mnist.train.next_batch函数，他将从所有的训练数据中读取一小部分作为训练数据batch</h4><hr><h3 id="31"><a href="#31" class="headerlink" title="31."></a>31.</h3><h4 id="tf-trainable-variables"><a href="#tf-trainable-variables" class="headerlink" title="tf.trainable_variables"></a><code>tf.trainable_variables</code></h4><h4 id="返回的是需要训练的变量列表"><a href="#返回的是需要训练的变量列表" class="headerlink" title="返回的是需要训练的变量列表"></a>返回的是需要训练的变量列表</h4><h4 id="tf-all-variables"><a href="#tf-all-variables" class="headerlink" title="tf.all_variables"></a><code>tf.all_variables</code></h4><h4 id="返回的是所有变量的列表"><a href="#返回的是所有变量的列表" class="headerlink" title="返回的是所有变量的列表"></a>返回的是所有变量的列表</h4><p>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf;    </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np;    </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt;    </span><br><span class="line">  </span><br><span class="line">v = tf.Variable(tf.constant(<span class="number">0.0</span>, shape=[<span class="number">1</span>], dtype=tf.float32), name=<span class="string">'v'</span>)  </span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">5</span>, shape=[<span class="number">1</span>], dtype=tf.float32), name=<span class="string">'v1'</span>)  </span><br><span class="line">   </span><br><span class="line">global_step = tf.Variable(tf.constant(<span class="number">5</span>, shape=[<span class="number">1</span>], dtype=tf.float32), name=<span class="string">'global_step'</span>, trainable=<span class="keyword">False</span>)  </span><br><span class="line">ema = tf.train.ExponentialMovingAverage(<span class="number">0.99</span>, global_step)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> ele1 <span class="keyword">in</span> tf.trainable_variables():  </span><br><span class="line">    <span class="keyword">print</span> ele1.name  </span><br><span class="line"><span class="keyword">for</span> ele2 <span class="keyword">in</span> tf.all_variables():  </span><br><span class="line">    <span class="keyword">print</span> ele2.name</span><br></pre></td></tr></table></figure></p><h4 id="输出结果如下：-2"><a href="#输出结果如下：-2" class="headerlink" title="输出结果如下："></a>输出结果如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">v:<span class="number">0</span></span><br><span class="line">v1:<span class="number">0</span></span><br><span class="line">v:<span class="number">0</span></span><br><span class="line">v1:<span class="number">0</span></span><br><span class="line">global_step:<span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><h5 id="上面得到两个变量，后面的一个得到上三个变量，因为global-step在声明的时候说明不是训练变量，用来关键字trainable-False。"><a href="#上面得到两个变量，后面的一个得到上三个变量，因为global-step在声明的时候说明不是训练变量，用来关键字trainable-False。" class="headerlink" title="上面得到两个变量，后面的一个得到上三个变量，因为global_step在声明的时候说明不是训练变量，用来关键字trainable=False。"></a>上面得到两个变量，后面的一个得到上三个变量，因为global_step在声明的时候说明不是训练变量，用来关键字trainable=False。</h5>]]></content>
    
    <summary type="html">
    
      本文对tensorflow中一些常用函数的意义以及用法进行了总结
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow不同版本引起的错误</title>
    <link href="http://yoursite.com/2017/11/08/TensorFlow%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%BC%95%E8%B5%B7%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2017/11/08/TensorFlow不同版本引起的错误/</id>
    <published>2017-11-08T13:55:50.000Z</published>
    <updated>2018-04-19T15:23:28.191Z</updated>
    
    <content type="html"><![CDATA[<p>前4个是 V0.11 的API 用在 V1.0 的错误</p><ol><li><p>AttributeError: ‘module’ object has no attribute ‘merge_all_summaries’</p><blockquote><p>tf.merge_all_summaries() 改为：summary_op = tf.summary.merge_all()</p></blockquote></li><li><p>AttributeError: ‘module’ object has no attribute ‘SummaryWriter’</p><blockquote><p>tf.train.SummaryWriter 改为：tf.summary.FileWriter</p></blockquote></li><li><p>AttributeError: ‘module’ object has no attribute ‘scalar_summary’</p><blockquote><p>tf.scalar_summary 改为：tf.summary.scalar</p></blockquote></li><li><p>AttributeError: ‘module’ object has no attribute ‘histogram_summary’</p><blockquote><p>histogram_summary 改为：tf.summary.histogram</p></blockquote></li></ol><p>下边这个是 V1.0 的API 用在 V0.11 的错误<br>File “dis-alexnet_benchmark.py”, line 110, in alexnet_v2<br>    biases_initializer=tf.zeros_initializer(),<br>TypeError: zeros_initializer() takes at least 1 argument (0 given)</p><blockquote><p>将 biases_initializer=tf.zeros_initializer() 改为：biases_initializer=tf.zeros_initializer</p></blockquote><p>本文章为转载原文章链接为：<a href="http://blog.csdn.net/s_sunnyy/article/details/70999462" target="_blank" rel="noopener">http://blog.csdn.net/s_sunnyy/article/details/70999462</a></p>]]></content>
    
    <summary type="html">
    
      本文总结了tensorflow由于版本不同所导致的一些报错
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>使用TensorBoard进行数据可视化</title>
    <link href="http://yoursite.com/2017/11/08/%E4%BD%BF%E7%94%A8TensorBoard%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2017/11/08/使用TensorBoard进行数据可视化/</id>
    <published>2017-11-08T13:52:19.000Z</published>
    <updated>2018-04-19T15:08:48.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用TensorBoard进行数据可视化"><a href="#使用TensorBoard进行数据可视化" class="headerlink" title="使用TensorBoard进行数据可视化"></a>使用TensorBoard进行数据可视化</h1><hr><hr><h3 id="除了python的matplotlib这个数据图像化的包，我们还可以使用Tensorflow自带的TensorBoard来将数据进行可视化，实现的代码如下"><a href="#除了python的matplotlib这个数据图像化的包，我们还可以使用Tensorflow自带的TensorBoard来将数据进行可视化，实现的代码如下" class="headerlink" title="除了python的matplotlib这个数据图像化的包，我们还可以使用Tensorflow自带的TensorBoard来将数据进行可视化，实现的代码如下"></a>除了python的matplotlib这个数据图像化的包，我们还可以使用Tensorflow自带的TensorBoard来将数据进行可视化，实现的代码如下</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, n_layer, activation_function=None)</span>:</span></span><br><span class="line">    layer_name = <span class="string">'layer%s'</span> % n_layer</span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">"layer"</span>): </span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"weight"</span>):</span><br><span class="line">            Weights = tf.Variable(tf.random_normal([in_size,out_size]),name=<span class="string">"W"</span>)</span><br><span class="line">            tf.summary.histogram(layer_name+<span class="string">'/Weights'</span>,Weights)</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"biases"</span>):</span><br><span class="line">            biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size])+<span class="number">0.1</span>,name=<span class="string">"b"</span>)</span><br><span class="line">            tf.summary.histogram(layer_name+<span class="string">'/biases'</span>,biases)</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"Wx_plus_b"</span>):</span><br><span class="line">            Wx_plus_b = tf.matmul(inputs, Weights)+biases</span><br><span class="line">        <span class="keyword">if</span> activation_function == <span class="keyword">None</span>:</span><br><span class="line">            outputs = Wx_plus_b</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            outputs = activation_function(Wx_plus_b)</span><br><span class="line">            tf.summary.histogram(layer_name+<span class="string">'/outputs'</span>,outputs)</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line">x_data = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">300</span>)[:,np.newaxis]</span><br><span class="line">noise = np.random.normal(<span class="number">0</span>,<span class="number">0.05</span>,x_data.shape)</span><br><span class="line">y_data = np.square(x_data) - <span class="number">0.5</span> + noise</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"inputs"</span>):</span><br><span class="line">    xs = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>],name=<span class="string">"x_input"</span>)</span><br><span class="line">    ys = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>],name=<span class="string">"y_input"</span>)</span><br><span class="line">    </span><br><span class="line">l1 = add_layer(xs, <span class="number">1</span>, <span class="number">10</span>, n_layer=<span class="number">1</span>, activation_function=tf.nn.relu)</span><br><span class="line">prediction = add_layer(l1, <span class="number">10</span>, <span class="number">1</span>, n_layer=<span class="number">2</span>, activation_function=<span class="keyword">None</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"loss"</span>):</span><br><span class="line">    loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction),reduction_indices=[<span class="number">1</span>]),name=<span class="string">"loss"</span>)</span><br><span class="line">    tf.summary.scalar(<span class="string">'loss'</span>,loss)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"train"</span>):</span><br><span class="line">    train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">merged = tf.summary.merge_all()</span><br><span class="line">writer = tf.summary.FileWriter(<span class="string">"logs/"</span>,sess.graph)</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    sess.run(train_step,feed_dict=&#123;xs:x_data,ys:y_data&#125;)</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">50</span>==<span class="number">0</span>:</span><br><span class="line">        result = sess.run(merged,feed_dict=&#123;xs:x_data,ys:y_data&#125;)</span><br><span class="line">        writer.add_summary(result,i)</span><br></pre></td></tr></table></figure><hr><h3 id="代码进行保存以及运行之后，将会在指定文件夹中看到保存的文件，这是我们需要在终端中运行下面的命令，然后将网址复制到浏览器即可打开"><a href="#代码进行保存以及运行之后，将会在指定文件夹中看到保存的文件，这是我们需要在终端中运行下面的命令，然后将网址复制到浏览器即可打开" class="headerlink" title="代码进行保存以及运行之后，将会在指定文件夹中看到保存的文件，这是我们需要在终端中运行下面的命令，然后将网址复制到浏览器即可打开"></a>代码进行保存以及运行之后，将会在指定文件夹中看到保存的文件，这是我们需要在终端中运行下面的命令，然后将网址复制到浏览器即可打开</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tensorboard --logdir=&apos;logs/&apos; #&apos;logs&apos;是指保存的文件所在的文件夹</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171108215024830?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><hr><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.name_scope(<span class="string">"name"</span>)</span><br></pre></td></tr></table></figure><h3 id="该函数中的name是指GRAPHS中的"><a href="#该函数中的name是指GRAPHS中的" class="headerlink" title="该函数中的name是指GRAPHS中的"></a>该函数中的name是指GRAPHS中的</h3><p><img src="http://img.blog.csdn.net/20171108213200198?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="以及每个神经网络的节点打开后里面的各种量的名字"><a href="#以及每个神经网络的节点打开后里面的各种量的名字" class="headerlink" title="以及每个神经网络的节点打开后里面的各种量的名字"></a>以及每个神经网络的节点打开后里面的各种量的名字</h3><h3 id="这是部分节点点开后的样子"><a href="#这是部分节点点开后的样子" class="headerlink" title="这是部分节点点开后的样子"></a>这是部分节点点开后的样子</h3><p><img src="http://img.blog.csdn.net/20171108212407145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="这是所有节点点开后的样子"><a href="#这是所有节点点开后的样子" class="headerlink" title="这是所有节点点开后的样子"></a>这是所有节点点开后的样子</h3><p><img src="http://img.blog.csdn.net/20171108212246092?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.summary.histogram(layer_name+<span class="string">'name'</span>,name)</span><br></pre></td></tr></table></figure><h3 id="该函数是用来绘制histogram中图可视化绘图"><a href="#该函数是用来绘制histogram中图可视化绘图" class="headerlink" title="该函数是用来绘制histogram中图可视化绘图"></a>该函数是用来绘制histogram中图可视化绘图</h3><p><img src="http://img.blog.csdn.net/20171108213042333?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.summary.scalar(<span class="string">'name'</span>,name)</span><br></pre></td></tr></table></figure><h3 id="该函数主要适用于损失函数在scalar的可视化绘图"><a href="#该函数主要适用于损失函数在scalar的可视化绘图" class="headerlink" title="该函数主要适用于损失函数在scalar的可视化绘图"></a>该函数主要适用于损失函数在scalar的可视化绘图</h3><p><img src="http://img.blog.csdn.net/20171108212950903?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.summary.FileWriter(<span class="string">"logs/"</span>,sess.graph)</span><br></pre></td></tr></table></figure><h3 id="该函数是将TensorBoard文件保存到指定路径，例如”logs-“即是指路径，正常运行后将会在logs文件夹下产生一个文件"><a href="#该函数是将TensorBoard文件保存到指定路径，例如”logs-“即是指路径，正常运行后将会在logs文件夹下产生一个文件" class="headerlink" title="该函数是将TensorBoard文件保存到指定路径，例如”logs/“即是指路径，正常运行后将会在logs文件夹下产生一个文件"></a>该函数是将TensorBoard文件保存到指定路径，例如”logs/“即是指路径，正常运行后将会在logs文件夹下产生一个文件</h3><p><img src="http://img.blog.csdn.net/20171108213616057?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.summary.merge_all()</span><br></pre></td></tr></table></figure><h3 id="该函数是将所有summary文件合并到同一个文件里并在下一步的tf-summary-FileWriter-“logs-“-sess-graph-进行保存"><a href="#该函数是将所有summary文件合并到同一个文件里并在下一步的tf-summary-FileWriter-“logs-“-sess-graph-进行保存" class="headerlink" title="该函数是将所有summary文件合并到同一个文件里并在下一步的tf.summary.FileWriter(“logs/“,sess.graph)进行保存"></a>该函数是将所有summary文件合并到同一个文件里并在下一步的tf.summary.FileWriter(“logs/“,sess.graph)进行保存</h3><hr><h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_summary(result,i)</span><br></pre></td></tr></table></figure><h3 id="该函数是将result这个数据加入到writer-tf-summary-FileWriter-“logs-“-sess-graph-这个函数的write中去，其中i是指步数，例如本函数中就是50布记录一个点"><a href="#该函数是将result这个数据加入到writer-tf-summary-FileWriter-“logs-“-sess-graph-这个函数的write中去，其中i是指步数，例如本函数中就是50布记录一个点" class="headerlink" title="该函数是将result这个数据加入到writer = tf.summary.FileWriter(“logs/“,sess.graph)这个函数的write中去，其中i是指步数，例如本函数中就是50布记录一个点"></a>该函数是将result这个数据加入到writer = tf.summary.FileWriter(“logs/“,sess.graph)这个函数的write中去，其中i是指步数，例如本函数中就是50布记录一个点</h3><hr><h3 id="7-运行应该在ipython中运行，如果在jupyter中运行可能会产生报错"><a href="#7-运行应该在ipython中运行，如果在jupyter中运行可能会产生报错" class="headerlink" title="7.运行应该在ipython中运行，如果在jupyter中运行可能会产生报错"></a>7.运行应该在ipython中运行，如果在jupyter中运行可能会产生报错</h3>]]></content>
    
    <summary type="html">
    
      除了python的matplotlib这个数据图像化的包，我们还可以使用Tensorflow自带的TensorBoard来将数据进行可视化
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
      <category term="TensorBoard" scheme="http://yoursite.com/tags/TensorBoard/"/>
    
  </entry>
  
</feed>
