<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随我的博客</title>
  
  <subtitle>记录学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suiwo.xyz/"/>
  <updated>2019-04-20T14:11:51.953Z</updated>
  <id>http://suiwo.xyz/</id>
  
  <author>
    <name>随我</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>synchronized, lock和volatile的区别</title>
    <link href="http://suiwo.xyz/2019/04/20/synchronized,%20lock%E5%92%8Cvolatile%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://suiwo.xyz/2019/04/20/synchronized, lock和volatile的区别/</id>
    <published>2019-04-20T13:33:50.000Z</published>
    <updated>2019-04-20T14:11:51.953Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="https://www.jianshu.com/p/2344a3e68ca9" target="_blank" rel="noopener">https://www.jianshu.com/p/2344a3e68ca9</a><br><a href="https://cloud.tencent.com/developer/article/1369358" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1369358</a></p><hr><h3 id="1、synchronized"><a href="#1、synchronized" class="headerlink" title="1、synchronized"></a>1、synchronized</h3><p>Java语言的关键字，可用来给对象和方法或者代码块加锁，当它锁定一个方法或者一个代码块的时候，同一时刻最多只有一个线程执行这段代码。当两个并发线程访问同一个对象object中的这个加锁同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。然而，当一个线程访问object的一个加锁代码块时，另一个线程仍然可以访问该object中的非加锁代码块。</p><hr><h3 id="2、Lock"><a href="#2、Lock" class="headerlink" title="2、Lock"></a>2、Lock</h3><p><code>synchronized</code>是Java语言的关键字，是内置特性，而<code>ReentrantLock</code>是一个类(实现<code>Lock</code>接口的类)，通过该类可以实现线程的同步。<br>关于Lock的具体解析可以点击<a href="https://suiwo.xyz/2019/04/20/Java%E4%B8%ADLock%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/">传送门</a></p><hr><h3 id="3、volatile"><a href="#3、volatile" class="headerlink" title="3、volatile"></a>3、volatile</h3><p><code>volatile</code>是一个类型修饰符（type specifier）。它是被设计用来修饰被不同线程访问和修改的变量。确保本条指令不会因编译器的优化而省略，且要求每次直接读值。</p><hr><h3 id="4、synchronized-lock和volatile区别（可见性、原子性、有序性）"><a href="#4、synchronized-lock和volatile区别（可见性、原子性、有序性）" class="headerlink" title="4、synchronized, lock和volatile区别（可见性、原子性、有序性）"></a>4、synchronized, lock和volatile区别（可见性、原子性、有序性）</h3><table><thead><tr><th>属性</th><th>Synchronized</th><th>lock</th><th>volatile</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td>可见性</td><td>√</td><td>√</td><td>√</td><td style="text-align:left">变量被操作之后，能够快速写入内存，并提醒其他线程重读，加锁是通过一个一个执行保证了可见性。</td></tr><tr><td>原子性</td><td>√</td><td>√</td><td>×</td><td style="text-align:left">做的过程中，不要有相关的来打扰，不相关的我们也不关心，加锁是通过一个一个执行保证了流程不会被相关的打扰。</td></tr><tr><td>有序性</td><td>√</td><td>√</td><td>√</td><td style="text-align:left">在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</td></tr></tbody></table><hr><h3 id="5、synchronized与lock区别"><a href="#5、synchronized与lock区别" class="headerlink" title="5、synchronized与lock区别"></a>5、synchronized与lock区别</h3><table><thead><tr><th>类别</th><th>synchronized</th><th>Lock</th></tr></thead><tbody><tr><td>存在层次</td><td>Java的关键字，在jvm层面上</td><td>是一个类</td></tr><tr><td>锁的释放</td><td>1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</td><td>在finally中必须释放锁，不然容易造成线程死锁</td></tr><tr><td>锁的获取</td><td>假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td><td>分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待</td></tr><tr><td>锁状态</td><td>无法判断</td><td>可以判断</td></tr><tr><td>锁类型</td><td>可重入 不可中断 非公平</td><td>可重入 可判断 可公平（两者皆可）</td></tr><tr><td>性能</td><td>少量同步</td><td>大量同步</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      本文对synchronized, lock和volatile这三个多线程编程中经常遇到的关键词或者类进行比较。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Java多线程" scheme="http://suiwo.xyz/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="锁" scheme="http://suiwo.xyz/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java中Lock接口解析</title>
    <link href="http://suiwo.xyz/2019/04/20/Java%E4%B8%ADLock%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/"/>
    <id>http://suiwo.xyz/2019/04/20/Java中Lock接口解析/</id>
    <published>2019-04-20T11:03:52.000Z</published>
    <updated>2019-04-20T15:27:08.540Z</updated>
    
    <content type="html"><![CDATA[<p>本文非原创，为转载文章，原文链接：<a href="https://www.jianshu.com/p/2344a3e68ca9" target="_blank" rel="noopener">https://www.jianshu.com/p/2344a3e68ca9</a></p><hr><hr><h3 id="一、Lock"><a href="#一、Lock" class="headerlink" title="一、Lock"></a>一、Lock</h3><blockquote><p>synchronized是Java语言的关键字，是内置特性，而ReentrantLock是一个类(实现Lock接口的类)，通过该类可以实现线程的同步。Lock是一个接口，源码很简单，主要是声明了四个方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> var1, TimeUnit var3)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-Lock一般的使用如下："><a href="#1-Lock一般的使用如下：" class="headerlink" title="1.Lock一般的使用如下："></a>1.Lock一般的使用如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lock lock= ...;<span class="comment">//获取锁</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//处理任务</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lock()</code>、<code>tryLock()</code>、<code>tryLock(long time, TimeUnit unit)</code>和<code>lockInterruptibly()</code>是用来获取锁的，<code>unLock()</code>方法是用来释放锁的，其放在finally块里执行，可以保证锁一定被释放，<code>newCondition</code>方法下面会做介绍（通过该方法可以生成一个Condition对象，而Condition是一个多线程间协调通信的工具类）。</p><hr><h4 id="2-Lock接口的主要方法介绍："><a href="#2-Lock接口的主要方法介绍：" class="headerlink" title="2.Lock接口的主要方法介绍："></a>2.Lock接口的主要方法介绍：</h4><ul><li><code>lock()</code>：获取不到锁就不罢休，否则线程一直处于<code>block</code>状态。</li><li><code>tryLock()</code>：尝试性地获取锁，不管有没有获取到都马上返回，拿到锁就返回<code>true</code>，不然就返回<code>false</code> 。</li><li><code>tryLock(long time, TimeUnit unit)</code>：如果获取不到锁，就等待一段时间，超时返回false。</li><li><code>lockInterruptibly()</code>：该方法稍微难理解一些，在说该方法之前，先说说线程的中断机制，每个线程都有一个中断标志，不过这里要分两种情况说明：<ol><li>线程在<code>sleep</code>、<code>wait</code>或者<code>join</code>， 这个时候如果有别的线程调用该线程的 <code>interrupt（）</code>方法，此线程会被唤醒并被要求处理<code>InterruptedException</code>。</li><li>如果线程处在运行状态， 则在调用该线程的<code>interrupt（）</code>方法时，不会响应该中断。<br><code>lockInterruptibly()</code>和上面的第一种情况是一样的， 线程在获取锁被阻塞时，如果调用<code>lockInterruptibly()</code>方法，该线程会被唤醒并被要求处理<code>InterruptedException</code>。下面给出一个响应中断的简单例子：</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">MyRunnable myRunnable = <span class="keyword">new</span> Test().new MyRunnable();</span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">"thread1"</span>);</span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">"thread2"</span>);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br><span class="line">thread2.interrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Lock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">lock.lockInterruptibly();</span><br><span class="line">System.out.println(Thread.currentThread().getName() +<span class="string">"获取了锁"</span>);</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(Thread.currentThread().getName() +<span class="string">"响应中断"</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">System.out.println(Thread.currentThread().getName() +<span class="string">"释放了锁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thread1获取了锁</span><br><span class="line">thread1释放了锁</span><br><span class="line">thread2响应中断</span><br></pre></td></tr></table></figure><p>thread2在响应中断后，在<code>finally</code>块里执行<code>unlock</code>方法时，会抛出<code>java.lang.IllegalMonitorStateException</code>异常（因为thread2并没有获取到锁，只是在等待获取锁的时候响应了中断，这时再释放锁就会抛出异常）。</p><hr><h4 id="3-newCondition-方法"><a href="#3-newCondition-方法" class="headerlink" title="3.newCondition()方法"></a>3.newCondition()方法</h4><p>上面简单介绍了ReentrantLock的使用，下面具体介绍使用ReentrantLock的中的newCondition方法实现一个生产者消费者的例子。<br>生产者、消费者<br>例子：两个线程A、B，A生产牙刷并将其放到一个缓冲队列中，B从缓冲队列中购买（消费）牙刷（说明：缓冲队列的大小是有限制的），这样就会出现如下两种情况。</p><ol><li>当缓冲队列已满时，A并不能再生产牙刷，只能等B从缓冲队列购买牙刷；</li><li>当缓冲队列为空时，B不能再从缓冲队列中购买牙刷，只能等A生产牙刷放到缓冲队列后才能购买。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToothBrushDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToothBrushBusiness toothBrushBusiness =</span><br><span class="line">                <span class="keyword">new</span> ToothBrushDemo().new ToothBrushBusiness();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                executeRunnable(toothBrushBusiness, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"牙刷生产者1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                executeRunnable(toothBrushBusiness, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"牙刷消费者1"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环执行50次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executeRunnable</span><span class="params">(ToothBrushBusiness toothBrushBusiness,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">boolean</span> isProducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isProducer) &#123;</span><br><span class="line">                toothBrushBusiness.produceToothBrush();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                toothBrushBusiness.consumeToothBrush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToothBrushBusiness</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个大小为10的牙刷缓冲队列</span></span><br><span class="line">        <span class="keyword">private</span> GoodQueue&lt;ToothBrush&gt; toothBrushQueue = <span class="keyword">new</span> GoodQueue&lt;ToothBrush&gt;(<span class="keyword">new</span> ToothBrush[<span class="number">10</span>]);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = lock.newCondition();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = lock.newCondition();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ToothBrushBusiness</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//生产牙刷</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceToothBrush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//牙刷缓冲队列已满,则生产牙刷线程等待</span></span><br><span class="line">                <span class="keyword">while</span> (toothBrushQueue.isFull()) &#123;</span><br><span class="line">                    notFull.await();</span><br><span class="line">                &#125;</span><br><span class="line">                ToothBrush toothBrush = <span class="keyword">new</span> ToothBrush(number);</span><br><span class="line">                toothBrushQueue.enQueue(toothBrush);</span><br><span class="line">                System.out.println(<span class="string">"生产: "</span> + toothBrush.toString());</span><br><span class="line">                number++;</span><br><span class="line">                <span class="comment">//牙刷缓冲队列加入牙刷后,唤醒消费牙刷线程</span></span><br><span class="line">                notEmpty.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (GoodQueueException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费牙刷</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeToothBrush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//牙刷缓冲队列为空,则消费牙刷线程等待</span></span><br><span class="line">                <span class="keyword">while</span> (toothBrushQueue.isEmpty()) &#123;</span><br><span class="line">                    notEmpty.await();</span><br><span class="line">                &#125;</span><br><span class="line">                ToothBrush toothBrush = toothBrushQueue.deQueue();</span><br><span class="line">                System.out.println(<span class="string">"消费: "</span> + toothBrush.toString());</span><br><span class="line">                <span class="comment">//从牙刷缓冲队列取出牙刷后,唤醒生产牙刷线程</span></span><br><span class="line">                notFull.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (GoodQueueException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToothBrush</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ToothBrush</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"牙刷编号&#123;"</span> +</span><br><span class="line">                    <span class="string">"number="</span> + number +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里缓冲队列的大小设成了10，定义了一个可重入锁lock，两个状态标记对象notEmpty，notFull，分别用来标记缓冲队列是否为空，是否已满。</p><ol><li>当缓冲队列已满时，调用notFull.await方法用来阻塞生产牙刷线程。</li><li>当缓冲队列为空时，调用notEmpty.await方法用来阻塞购买牙刷线程。</li><li>notEmpty.signal用来唤醒消费牙刷线程，notFull.signal用来唤醒生产牙刷线程。</li></ol><hr><h4 id="4-Object和Conditon对应关系如下："><a href="#4-Object和Conditon对应关系如下：" class="headerlink" title="4.Object和Conditon对应关系如下："></a>4.Object和Conditon对应关系如下：</h4><table><thead><tr><th></th><th>Object</th><th>Condition</th></tr></thead><tbody><tr><td>休眠</td><td>wait</td><td>await</td></tr><tr><td>唤醒特定线程</td><td>notify</td><td>signal</td></tr><tr><td>唤醒所有线程</td><td>notifyAll</td><td>signalAll</td></tr></tbody></table><p>对于同一个锁，我们可以创建多个Condition，就是多个监视器的意思。在不同的情况下使用不同的Condition，Condition是被绑定到Lock上的，要创建一个Lock的Condition必须用newCondition()方法。</p><hr><hr><h3 id="二、ReadWriteLock"><a href="#二、ReadWriteLock" class="headerlink" title="二、ReadWriteLock"></a>二、ReadWriteLock</h3><p>ReentrantLock（可重入锁）是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。</p><blockquote><p>synchronized和ReentrantLock都是可重入锁，可重入性举个简单的例子，当一个线程执行到某个synchronized方法时，比如说method1，而在method1中会调用另外一个synchronized方法method2，此时线程不必重新去申请锁，而是可以直接执行方法method2。</p></blockquote><hr><h4 id="ReentrantReadWriteLock简介"><a href="#ReentrantReadWriteLock简介" class="headerlink" title="ReentrantReadWriteLock简介"></a>ReentrantReadWriteLock简介</h4><p>上面的响应中断的例子已经地使用到了ReentrantLock，下面来介绍另外一种锁，可重入读写锁ReentrantReadWriteLock，该类实现了ReadWriteLock接口，该接口的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</span><br><span class="line"><span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ReentrantReadWriteLock会使用两把锁来解决问题，一个读锁，一个写锁。</p></blockquote><ul><li><h5 id="线程进入读锁的前提条件："><a href="#线程进入读锁的前提条件：" class="headerlink" title="线程进入读锁的前提条件："></a>线程进入读锁的前提条件：</h5><ol><li>没有其他线程的写锁</li><li>没有写请求，或者有写请求但调用线程和持有锁的线程是同一个线程</li></ol></li><li><h5 id="进入写锁的前提条件："><a href="#进入写锁的前提条件：" class="headerlink" title="进入写锁的前提条件："></a>进入写锁的前提条件：</h5><ol><li>没有其他线程的读锁</li><li>没有其他线程的写锁</li></ol></li><li><h5 id="需要提前了解的概念："><a href="#需要提前了解的概念：" class="headerlink" title="需要提前了解的概念："></a>需要提前了解的概念：</h5><ul><li>锁降级：从写锁变成读锁；</li><li>锁升级：从读锁变成写锁。</li></ul></li></ul><blockquote><p>读锁是可以被多线程共享的，写锁是单线程独占的。也就是说写锁的并发限制比读锁高，这可能就是升级/降级名称的来源。</p></blockquote><p>ReadWriteLock接口只有获取读锁和写锁的方法，而ReentrantReadWriteLock是实现了ReadWriteLock接口，接着对其应用场景做简单介绍。</p><hr><h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><p>假设一个共享的文件，其属性是可读，如果某个时间有100个线程在同时读取该文件，如果通过synchronized或者Lock来实现线程的同步访问，那么有个问题来了，当这100个线程的某个线程获取到了锁后，其它的线程都要等该线程释放了锁才能进行读操作，这样就会造成系统资源和时间极大的浪费，而ReentrantReadWriteLock正好解决了这个问题。下面给一个简单的例子，并根据代码以及输出结果做简要说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRunnable myRunnable = newTest().new MyRunnable();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(myRunnable, <span class="string">"thread1"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(myRunnable, <span class="string">"thread2"</span>);</span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(myRunnable, <span class="string">"thread3"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ReadLock lock = <span class="keyword">new</span> ReentrantReadWriteLock().readLock();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"正在进行读操作"</span>);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"读操作完毕"</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1读操作完毕</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3读操作完毕</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2读操作完毕</span><br></pre></td></tr></table></figure><p>从输出结果可以看出，三个线程并没有交替输出，这是因为这里只是读取了5次，但将读取次数i的值改成一个较大的数值如100000时，输出结果就会交替的出现。</p><hr>]]></content>
    
    <summary type="html">
    
      本文对Lock这一多线程中常见接口进行解析。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Java多线程" scheme="http://suiwo.xyz/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="锁" scheme="http://suiwo.xyz/tags/%E9%94%81/"/>
    
      <category term="转载" scheme="http://suiwo.xyz/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>今天我也要当一个玄学boy</title>
    <link href="http://suiwo.xyz/2019/04/19/%E4%BB%8A%E5%A4%A9%E6%88%91%E4%B9%9F%E8%A6%81%E5%BD%93%E4%B8%80%E4%B8%AA%E7%8E%84%E5%AD%A6boy/"/>
    <id>http://suiwo.xyz/2019/04/19/今天我也要当一个玄学boy/</id>
    <published>2019-04-19T07:00:28.000Z</published>
    <updated>2019-04-19T07:50:12.789Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天在github上看到了一个优秀Java进阶知识点项目，顺带竟然还发现了一个优秀的歌曲《我的offer在哪里》，最近各种投递简历、笔试、面试，搞得头晕脑胀，身心俱疲，看来我也要玄学一下，顺便我博客的歌曲也正好换成这个，毕竟玄学就是第一生产力(ಡωಡ)。传送门一并送上~</p></blockquote><ul><li><a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener">互联网 Java 工程师进阶知识完全扫盲</a></li><li><a href="https://doocs.github.io/advanced-java/#/" target="_blank" rel="noopener">滚过来学习</a></li><li><a href="https://doocs.github.io/advanced-java/#/offer" target="_blank" rel="noopener">劳(quan)逸(kao)结(xuan)合(xue)</a></li></ul><p>网易云插件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1321616516&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><p>下面是歌词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">每天起床第一句 先给自己打个气</span><br><span class="line">每次刷新查成绩 都要说声保佑me</span><br><span class="line">魔镜魔镜告诉我 我的offer在哪里</span><br><span class="line">努力 我要努力 我要变成收割机</span><br><span class="line">offer offer</span><br><span class="line">我要变成收割机</span><br><span class="line">offer offer</span><br><span class="line"></span><br><span class="line">为了拿下BAT 天天提着一口气</span><br><span class="line">大厂小厂投简历 刷光面经笔试题</span><br><span class="line">天生我才难自弃 可惜面试都悲剧</span><br><span class="line">努力 我要努力 我要变成收割机</span><br><span class="line">Wow</span><br><span class="line"></span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">我的offer在哪里</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">拜拜 二次元 综艺直播动作片 言情玄幻宫斗剧</span><br><span class="line">拿走拿走别客气</span><br><span class="line"></span><br><span class="line">拜拜 铂金一 戒掉农药戒吃鸡 通宵开黑玩游戏</span><br><span class="line">别再熬夜伤身体</span><br><span class="line"></span><br><span class="line">来来 沉住气 专业课本重拾起 牛客网上刷真题</span><br><span class="line">保温杯里泡枸杞</span><br><span class="line"></span><br><span class="line">来来 深呼吸 对照镜子做练习</span><br><span class="line">单面群面全模拟 不拿offer不放弃</span><br><span class="line"></span><br><span class="line">为了拿下BAT 天天提着一口气</span><br><span class="line">大厂小厂投简历 刷光面经笔试题</span><br><span class="line">天生我才难自弃 可惜面试都悲剧</span><br><span class="line">努力 我要努力 我要变成收割机</span><br><span class="line">Wow</span><br><span class="line"></span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">我的offer在哪里</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">拜拜 二次元 综艺直播动作片 言情玄幻宫斗剧</span><br><span class="line">拿走拿走别客气</span><br><span class="line"></span><br><span class="line">拜拜 铂金一 戒掉农药戒吃鸡 通宵开黑玩游戏</span><br><span class="line">别再熬夜伤身体</span><br><span class="line"></span><br><span class="line">来来 沉住气 专业课本重拾起 牛客网上刷真题</span><br><span class="line">保温杯里泡枸杞</span><br><span class="line"></span><br><span class="line">来来 深呼吸 对照镜子做练习</span><br><span class="line">单面群面全模拟 不拿offer不放弃</span><br><span class="line"></span><br><span class="line">奇了怪了 小的时候明明是妈妈说</span><br><span class="line">考上大学就好惹 没烦恼</span><br><span class="line">直到熟悉的大学的寝室都住不上了 原来毕了业</span><br><span class="line">没人要 才烦恼</span><br><span class="line">希望 offer</span><br><span class="line">钱是多哒</span><br><span class="line">HR</span><br><span class="line">超nice哒</span><br><span class="line">不如跟着节奏没在怕的 努努力</span><br><span class="line">别让校招季卡住你 卡住你</span><br><span class="line">不拿offer不放弃</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">拜拜 二次元 综艺直播动作片 言情玄幻宫斗剧</span><br><span class="line">拿走拿走别客气</span><br><span class="line"></span><br><span class="line">拜拜 铂金一 戒掉农药戒吃鸡 通宵开黑玩游戏</span><br><span class="line">别再熬夜伤身体</span><br><span class="line"></span><br><span class="line">来来 沉住气 专业课本重拾起 牛客网上刷真题</span><br><span class="line">保温杯里泡枸杞</span><br><span class="line"></span><br><span class="line">来来 深呼吸 对照镜子做练习</span><br><span class="line">单面群面全模拟 不拿offer不放弃</span><br><span class="line">不放弃</span><br><span class="line">燃烧我的卡路里</span><br><span class="line">不放弃</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">我要变成收割机</span><br></pre></td></tr></table></figure></p><blockquote><p>文章刚写完就收到了七牛的笔试通知。。。。。看来玄学有望啊，哈哈哈哈哈哈，加油++，未来可期。</p></blockquote>]]></content>
    
    <summary type="html">
    
      emmmm，笔试面试越多，越觉得自己需要查漏补缺的地方还有很多，今天无意中发现了一首歌，很适合我，毕竟我的offer在哪里´&lt;_`，把博客的歌给换了，顺便期待玄学，加油加油！！！
    
    </summary>
    
      <category term="企图玄学" scheme="http://suiwo.xyz/categories/%E4%BC%81%E5%9B%BE%E7%8E%84%E5%AD%A6/"/>
    
    
      <category term="企图玄学" scheme="http://suiwo.xyz/tags/%E4%BC%81%E5%9B%BE%E7%8E%84%E5%AD%A6/"/>
    
      <category term="面试" scheme="http://suiwo.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题的基础总结（JVM篇）</title>
    <link href="http://suiwo.xyz/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88JVM%E7%AF%87%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/13/常见面试题的基础总结（JVM篇）/</id>
    <published>2019-04-13T04:27:05.000Z</published>
    <updated>2019-04-18T01:23:23.502Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、为什么Java一次编译，到处可运行"><a href="#1、为什么Java一次编译，到处可运行" class="headerlink" title="1、为什么Java一次编译，到处可运行"></a>1、为什么Java一次编译，到处可运行</h3><ul><li>因为只需要将java文件编译成字节码文件，在运行平台只要有JVM虚拟机就可以运行。这样Java在不同的平台也不需要重新编译，只需要虚拟机把字节码文件转换成具体平台的机器指令。</li></ul><hr><h3 id="2、JVM是如何加载文件的"><a href="#2、JVM是如何加载文件的" class="headerlink" title="2、JVM是如何加载文件的"></a>2、JVM是如何加载文件的</h3><ul><li>首先对于字节码文件，使用Class loder将class文件记载到内存中。然后使用Exction Engine对命令进行解析。对于使用了不同开发文件的原生库我们可以使用Native interface来为Java所用。</li></ul><hr><h3 id="3、Java反射机制"><a href="#3、Java反射机制" class="headerlink" title="3、Java反射机制"></a>3、Java反射机制</h3><ul><li>对于任何一个类，我们都可以知道这个类的所有属性和方法，对弈任何一个对象我们都能调用他的任意方法和属性。这种动态获取信息以及动态调用对象的方法就是成为Java语言的反射机制。</li></ul><hr><h3 id="4、Class-Loader"><a href="#4、Class-Loader" class="headerlink" title="4、Class Loader"></a>4、Class Loader</h3><ul><li>Class Loader在Java中有着非常重要的作用，它主要工作在Class装载的加载过程，主要作用是从系统外获取Class的二进制数据流。所有的class都是由他来加载很系统，然后交给虚拟机进行连接初始化等操作。过程为<code>加载-链接（校验-准备-解析）-初始化</code></li></ul><hr><h3 id="5、loadClass和forName区别"><a href="#5、loadClass和forName区别" class="headerlink" title="5、loadClass和forName区别"></a>5、loadClass和forName区别</h3><ul><li>对于loadClass没有链接，而forName获取的是已经初始化的。优点就是没有链接初始化可以减少资源浪费，需要的时候再进行初始化。</li></ul><hr><h3 id="6、JVM内存模型"><a href="#6、JVM内存模型" class="headerlink" title="6、JVM内存模型"></a>6、JVM内存模型</h3><blockquote><p>主要分为程序计数器，虚拟机栈，本地方法栈  这几个是线程私有的。<br>而堆（包含常量池，数组和类对象）以及MetaSpace（类加载信息）是线程共享的。</p></blockquote><ul><li><p>程序计数器：记录当前线程执行的字节码行号的指示器，通过改变这个值来选取下一条需要执行的字节码指令。和线程是一对一的关系即“线程私有”的，对于Native方法计数为Undefine</p></li><li><p>Java虚拟机栈：包含Java方法执行的内存模型，包含多个栈帧。每个栈帧都含有局部变量表，操作栈还有动态连接，返回地址等数据</p></li></ul><p><img src="/images/常见面试题的基础总结（JVM篇）/4DDBB319-AF7D-441C-A222-DEC72ECEE2DA.png" alt="这里写图片描述"></p><ul><li><p>本地方法栈：与虚拟机栈相似，主要作用是标注了native方法</p></li><li><p>局部变量存储的是方法执行过程中的所有变量。<br>操作数栈：入栈、出栈、复制、交换、产生消费变量</p></li></ul><hr><h3 id="7、递归为什么会引发StackOverFlowError异常"><a href="#7、递归为什么会引发StackOverFlowError异常" class="headerlink" title="7、递归为什么会引发StackOverFlowError异常"></a>7、递归为什么会引发StackOverFlowError异常</h3><ul><li>多次递归一直入栈超出虚拟栈深度</li></ul><hr><h3 id="8、JVM三大性能调优参数"><a href="#8、JVM三大性能调优参数" class="headerlink" title="8、JVM三大性能调优参数"></a>8、JVM三大性能调优参数</h3><ul><li><code>-Xss</code>规定虚拟栈大大小</li><li><code>-Xms</code>堆的初始值</li><li><code>-Xmx</code>堆能达到的最大值</li></ul><hr><h3 id="9、Java内存模型中的堆和栈的区别-内存分配策略"><a href="#9、Java内存模型中的堆和栈的区别-内存分配策略" class="headerlink" title="9、Java内存模型中的堆和栈的区别-内存分配策略"></a>9、Java内存模型中的堆和栈的区别-内存分配策略</h3><ul><li>静态存储：编译时确定每个数据目标在运行时的存储空间需求</li><li>栈式存储：数据区需求在编译时未知，运行时模块入口确定</li><li>堆式存储：编译时或者运行时入口都无法确认，动态分配</li></ul><hr><h3 id="10、堆和栈的关系与区别"><a href="#10、堆和栈的关系与区别" class="headerlink" title="10、堆和栈的关系与区别"></a>10、堆和栈的关系与区别</h3><ul><li>引用对象或者数组时，栈中变量保存的是堆中目标的首地址</li><li>栈自动释放，堆需要GC</li><li>栈比堆小</li><li>栈产生的随便远小于堆</li><li>栈支持动态和静态分配，而堆仅支持动态分配</li><li>因为底层数据结构不同所以栈效率高于堆</li></ul><hr><h3 id="11、元空间、堆、栈、线程独占部分的联系——————内存角度"><a href="#11、元空间、堆、栈、线程独占部分的联系——————内存角度" class="headerlink" title="11、元空间、堆、栈、线程独占部分的联系——————内存角度"></a>11、元空间、堆、栈、线程独占部分的联系——————内存角度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span> + name);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        HelloWorld hw = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">        hw.setName(<span class="string">"test"</span>);</span><br><span class="line">        hw.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/常见面试题的基础总结（JVM篇）/98DF0A18-E236-4284-84E8-4C06EB932965.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      本文对面试中常见的一些Java虚拟机相关知识点或者问题的总结
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="JVM" scheme="http://suiwo.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题的基础总结（Java多线程篇）</title>
    <link href="http://suiwo.xyz/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/13/常见面试题的基础总结（Java多线程篇）/</id>
    <published>2019-04-13T04:15:39.000Z</published>
    <updated>2019-04-18T01:23:02.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、进程和线程的区别"><a href="#1、进程和线程的区别" class="headerlink" title="1、进程和线程的区别"></a>1、进程和线程的区别</h3><ul><li>运行一个程序会产生一个进程，进程包括至少一个线程</li><li>每个进程对应一个JVM实例，多个线程则是共享JVM的堆</li><li>Java采用单线程编程模型，程序会自动创建主线程</li><li>主线程可以创建子线程，原则上要后于子线程完成执行</li></ul><h3 id="2、Thead和Runnable什么关系"><a href="#2、Thead和Runnable什么关系" class="headerlink" title="2、Thead和Runnable什么关系"></a>2、Thead和Runnable什么关系</h3><p>Thread是实现了Runnable接口的类，使得run支持多线程<br>应为类的单一继承原则，所以推荐多使用Runnable接口</p><h3 id="3、如何给run（）传参"><a href="#3、如何给run（）传参" class="headerlink" title="3、如何给run（）传参"></a>3、如何给run（）传参</h3><ul><li>构造函数传参</li><li>成员变量传参 比如常见的set方法</li><li>回调函数传参<br>参考：<a href="https://blog.csdn.net/saycheesenn/article/details/52956331" target="_blank" rel="noopener">https://blog.csdn.net/saycheesenn/article/details/52956331</a></li></ul><h3 id="4、如何实现处理线程的返回值"><a href="#4、如何实现处理线程的返回值" class="headerlink" title="4、如何实现处理线程的返回值"></a>4、如何实现处理线程的返回值</h3><ul><li>主线程等待法  主线程等待子线程执行完毕</li><li>使用join（）阻塞当前线程等待执行完毕</li><li>通过Callable接口实现：通过FutureTask或者线程池获取</li></ul><p>如果使用FutureTask可以使用<code>isDone</code>方法可以判断是否执行完成</p><p><img src="/images/常见面试题的基础总结（Java多线程篇）/050B0CED-D039-4035-8797-81F8E8EE7C9E.png" alt="这里写图片描述"></p><p>对于线程池</p><p><img src="/images/常见面试题的基础总结（Java多线程篇）/627EF93D-E74D-4B44-ABAC-B280E924CAC6.png" alt="这里写图片描述"></p><h3 id="5、线程的状态："><a href="#5、线程的状态：" class="headerlink" title="5、线程的状态："></a>5、线程的状态：</h3><ul><li>新建：创建后还未启动的线程</li><li>运行：包含Runnable和Ready状态</li><li>无限期等待：需要显式唤醒 例如没有设置Timeout参数的<code>Object.wait()</code> 和 <code>Thread.join()</code></li><li>期限等待：在一定时间后会由系统自动唤醒  例如<code>Thread.sleep()</code>，设置了参数的<code>Object.wait()</code>和 <code>Thread.join()</code></li><li>阻塞状态：等待获取排它锁</li><li>结束：已终止线程的状态，线程已经结束执行</li></ul><h3 id="6、sleep和wait区别"><a href="#6、sleep和wait区别" class="headerlink" title="6、sleep和wait区别"></a>6、sleep和wait区别</h3><ul><li>sleep是Thread类的方法，wait是Object类的方法</li><li>sleep可以在任何地方使用</li><li>wait只能在<code>synchronized</code>方法或者<code>synchronized</code>块中使用</li><li>wait是通知当前线程等待然后释放对象锁，notify也是，所以如果没有获取对象锁就是没有意义的了</li></ul><h3 id="7、notify和notifyAll的区别"><a href="#7、notify和notifyAll的区别" class="headerlink" title="7、notify和notifyAll的区别"></a>7、notify和notifyAll的区别</h3><p>首先建立两个概念：</p><blockquote><p>锁池：假设对象A已经拥有了某个对象的锁，而其他线程想要调用这个对象的synchronize方法，所以其他线程会进入阻塞状态进入锁池等待锁的释放</p></blockquote><blockquote><p>等待池：假设线程A调用了某个对象的wait方法，线程A就会释放当前的锁然后进入等待池，进入等待池的线程不会去竞争锁</p></blockquote><ul><li>notifyAll会让所有处于等待池的线程全部进入锁池去竞争获取锁的机会</li><li>notify只会随机选取一个处于等待池中的线程进入锁池去竞争获取锁得机会</li></ul><h3 id="8、Yield"><a href="#8、Yield" class="headerlink" title="8、Yield"></a>8、Yield</h3><ul><li>当调用Thread.yield方法函数时，会给线程调度器一个当前线程愿意让出CPU使用的暗示，但是线程调度器可能会忽略这个暗示</li></ul><h3 id="9、如何中断线程"><a href="#9、如何中断线程" class="headerlink" title="9、如何中断线程"></a>9、如何中断线程</h3><ul><li>通过调用<code>stop（）</code>方法停止线程，通过<code>suspend</code>和<code>resume</code>方法（已经弃用）</li><li>调用<code>interrupt()</code>，通知线程应该中断了<ul><li>如果线程处于被阻塞状态，那么线程将立即退出被阻塞状态，并抛出一个<code>InterruptedException</code>异常</li><li>如果线程处于正常活动状态，那么该线程的中断标志位将设置为true，被设置的中断标志位的线程将继续正常运行不受影响。</li></ul></li><li>正常运行的任务是，经常检查本线程的中断标志位，如果被设置了中断标志就自行停止线程</li><li>如果线程处于活动状态，那么僵该线程的中断标志位设置为true，将设置中断标志的线程将继续正常运行，不受影响。</li></ul><h3 id="10、线程状态间的转换"><a href="#10、线程状态间的转换" class="headerlink" title="10、线程状态间的转换"></a>10、线程状态间的转换</h3><p><img src="/images/常见面试题的基础总结（Java多线程篇）/C55F6694-EB22-47DE-AE3B-0C5A53383AEE.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      本文对面试中常见的一些Java多线程相关知识点或者问题的总结
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Java多线程" scheme="http://suiwo.xyz/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题的基础总结（JavaGC篇）</title>
    <link href="http://suiwo.xyz/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88JavaGC%E7%AF%87%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/13/常见面试题的基础总结（JavaGC篇）/</id>
    <published>2019-04-13T03:53:03.000Z</published>
    <updated>2019-04-18T01:23:14.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、Java的垃圾回收判断对象是否为垃圾有两种算法。"><a href="#1、Java的垃圾回收判断对象是否为垃圾有两种算法。" class="headerlink" title="1、Java的垃圾回收判断对象是否为垃圾有两种算法。"></a>1、Java的垃圾回收判断对象是否为垃圾有两种算法。</h3><ul><li>引用计数算法，本算法就是通过引用计数器来统计，当被引用+1，完成引用-1.任何对象实例引用为0时就可以当做垃圾收集，优点是执行效率高，问题是循环引用会出现问题。</li><li>可达性分析算法，通过判断对象的引用链来决定对象是否可达。如果不可达便被回收。可作为GC ROOT的对象有虚拟机栈中引用的对象、方法区中的常量引用的对象，方法区中的类静态属性引用的对象还有Native方法引用的对象，以及活跃线程的引用对象。</li></ul><hr><h3 id="2、常见的垃圾回收算法"><a href="#2、常见的垃圾回收算法" class="headerlink" title="2、常见的垃圾回收算法"></a>2、常见的垃圾回收算法</h3><p><img src="/images/常见面试题的基础总结（JavaGC篇）/87EED0DF-D176-4236-A8FF-7C19199A26BD.png" alt="这里写图片描述"></p><ul><li><p>标签-清除算法<br>对存活对象进行标记，清除是从头到尾进行线性遍历，回收不可达的对象内存。问题时容易碎片化。</p></li><li><p>复制算法<br>分为对象面和空闲面。存活的对象从对象面复制到空闲面，同时将对象面的清空。优点是解决了碎片化的问题，顺序分配内存简单高效，适用于对象存活率低的场景。年轻代因为存活较少，所以适合于用复制算法</p></li><li><p>标记-整理算法<br>标记就是从GC ROOT进行扫描对存活对象进行标记，然后移动所有存活的对象，且按照内存地址依次有序排列，然后将末端的内存地址以后的内存都进行回收。有点是避免了内存的不连续行，且不用进行两块内存互换，适用于存活率高德场景。</p></li><li><p>分代收集算法<br>分代收集算法就是多种算法的集合，其中年轻代使用复制算法，老年代使用标记整理算法。JDK7之前有新生代，老年代和永久代。JDK7之后只有新生代和老年代没有了新生代。</p><ul><li>年轻代分为eden区和两个servivor区，当进行垃圾回收时，存活的对象计数会加一，同时复制到servivor中的from区，然后将eden区清空，当第二次进行GC时eden区同理，但是servivor区仍然会计数加1然后复制到另一个servivor中。直到某个存活对象的技术超过某个值然后该对象进入老年代。</li><li>老年代常用的是标记-清除和标记整理算法,其中新生代老年代一半了比例为1:2</li></ul></li></ul><hr><h3 id="3、对于新生代如何晋升老年代有三种情况："><a href="#3、对于新生代如何晋升老年代有三种情况：" class="headerlink" title="3、对于新生代如何晋升老年代有三种情况："></a>3、对于新生代如何晋升老年代有三种情况：</h3><ul><li>经历了多次MinorGC后仍然存活</li><li>survivor区中存放不下大对象</li><li>新生成的大对象</li></ul><hr><h3 id="4、常见得到调优参数"><a href="#4、常见得到调优参数" class="headerlink" title="4、常见得到调优参数"></a>4、常见得到调优参数</h3><ul><li><code>-XX:SurvivorRatio</code> : Eden和Survivor的比值,默认8 : 1</li><li><code>-XX:NewRatio</code>: 老年代和年轻代内存大小的比例</li><li><code>-XX:MaxTenuringThreshold</code>:对象从年轻代晋升到老生代经过GC次数的最大阈值</li></ul><hr><h3 id="5、触发GC的条件为"><a href="#5、触发GC的条件为" class="headerlink" title="5、触发GC的条件为"></a>5、触发GC的条件为</h3><p>老年代的FULL GC还有MajorGC比年轻代的MinorGC慢，但是执行频率低。</p><ul><li>老年代空间不足</li><li>CMS GC后老年代不足</li><li>年轻代晋升老年代的空间大于剩余空间</li><li>调用了<code>System.gs()</code></li></ul><hr><h3 id="6、常见垃圾收集器"><a href="#6、常见垃圾收集器" class="headerlink" title="6、常见垃圾收集器"></a>6、常见垃圾收集器</h3><ul><li>ParNew收集器( -XX:+UseParNewGC ,复制算法)</li></ul><ol><li>多线程收集,其余的行为、特点和Serial收集器一样</li><li>单核执行效率不如Serial ,在多核下执行才有优势</li></ol><ul><li>CMS收集器(标记清除算法)</li></ul><ol><li>初始标记：进入s-t-w</li><li>并发标记：并发追溯标记程序不会停顿</li><li>并发预处理：查找并发标记阶段新生代晋升老年代的对象</li><li>重新标记：暂停虚拟机扫描CMS堆中的剩余对象</li><li>并发清理，清理对象，程序不会停顿</li><li>并发重置：重置CMS收集器的数据结构</li></ol><ul><li>G1收集器 Garbage First收集器(复制+标记整理算法)<ul><li>本收集器是将整个Java堆内存划分为多个大小相等的region，然后新生代和老年代不进行了物理隔离。</li><li>特点：</li></ul><ol><li>并发和并行</li><li>分带收集</li><li>空间整合</li><li>可预测的停顿</li></ol></li></ul><hr><h3 id="7、强引用，软引用，弱引用，虚引用"><a href="#7、强引用，软引用，弱引用，虚引用" class="headerlink" title="7、强引用，软引用，弱引用，虚引用"></a>7、强引用，软引用，弱引用，虚引用</h3><p><img src="/images/常见面试题的基础总结（JavaGC篇）/6095F9F4-8194-436E-85BD-526F77C76259.png" alt="这里写图片描述"></p><ul><li><p>强引用是最常见的引用如： Object object = new Object（）；<br>即使内存不足也不会被回收，但是我们可以通过将对象设置为null来弱化引用，使其被回收。</p></li><li><p>软引用是对象处在有用但是非必须的状态，只有内存不足时才会被回收<br>可以实现高速缓存，使用方法如下：<br>SoftReference <string> softStr = new SoftReference(str);</string></p></li><li><p>弱引用比软引用更弱一下，然后GC时会被回收，适用于偶尔使用但是不影响垃圾收集的对象。</p></li></ul><hr><h3 id="8、其他的常见概念"><a href="#8、其他的常见概念" class="headerlink" title="8、其他的常见概念"></a>8、其他的常见概念</h3><h5 id="Stop-the-world"><a href="#Stop-the-world" class="headerlink" title="Stop-the-world"></a>Stop-the-world</h5><ul><li>在GC过程中会有Stop-the-world也就是执行GC时虚拟机会停止应用程序的执行，而且是在所有GC算法中都会发生，多数的GC通过减少s-t-w发生时间来提高程序性能</li></ul><h5 id="SafePoint"><a href="#SafePoint" class="headerlink" title="SafePoint"></a>SafePoint</h5><ul><li>分析过程中对象引用关系不会改变的点，常见的点有方法调用，循环跳转，异常跳转。安全点数量应该适中，过多过少都不好。</li></ul><h5 id="JVM有两种运行模式Server和Client"><a href="#JVM有两种运行模式Server和Client" class="headerlink" title="JVM有两种运行模式Server和Client"></a>JVM有两种运行模式Server和Client</h5><ul><li>常见两个模式server启动慢但是启动后性能更好，因为server底层是一个更大的虚拟机,可以使用<code>java -version</code>来查询是哪一种模式下的</li></ul><h5 id="Object的finalize方法"><a href="#Object的finalize方法" class="headerlink" title="Object的finalize方法"></a>Object的finalize方法</h5><ul><li>Object的finalize方法是不确定的，不一定会执行。 </li></ul>]]></content>
    
    <summary type="html">
    
      本文对面试中常见的一些Java垃圾回收相关知识点或者问题的总结
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Java垃圾回收" scheme="http://suiwo.xyz/tags/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题的基础总结（数据库篇）</title>
    <link href="http://suiwo.xyz/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/13/常见面试题的基础总结（数据库篇）/</id>
    <published>2019-04-13T03:18:17.000Z</published>
    <updated>2019-04-18T01:22:57.006Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、为什么要使用索引"><a href="#1、为什么要使用索引" class="headerlink" title="1、为什么要使用索引"></a>1、为什么要使用索引</h3><ul><li>为了快速查询数据</li></ul><hr><h3 id="2、如何创建索引"><a href="#2、如何创建索引" class="headerlink" title="2、如何创建索引"></a>2、如何创建索引</h3><ul><li><p>唯一索引<br><code>CREATE UNIQUE INDEX 索引名称 ON 表名称 (列名称)</code></p></li><li><p>简单索引<br><code>CREATE INDEX 索引名称 ON 表名称 (列名称)</code></p></li></ul><hr><h3 id="3、普通索引，唯一索引，主键索引，全文索引，组合索引"><a href="#3、普通索引，唯一索引，主键索引，全文索引，组合索引" class="headerlink" title="3、普通索引，唯一索引，主键索引，全文索引，组合索引"></a>3、普通索引，唯一索引，主键索引，全文索引，组合索引</h3><ul><li>一个表只能有一个主键索引，可以有多个唯一索引；</li><li>主键索引一定是唯一索引， 唯一索引不是主键索引；。</li><li>普通索引：最基本的索引，没有任何限制</li><li>唯一索引：与”普通索引”类似，不同的就是：索引列的值必须唯一，但允许有空值。</li><li>主键索引：它是一种特殊的唯一索引，不允许有空值。 </li><li>全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时好空间。</li><li>组合索引：为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。</li></ul><hr><h3 id="4、密集索引，稀疏索引"><a href="#4、密集索引，稀疏索引" class="headerlink" title="4、密集索引，稀疏索引"></a>4、密集索引，稀疏索引</h3><ul><li>密集索引：每个搜索码值都对应一个索引值</li><li>稀疏索引：只为某些值建立索引</li></ul><hr><h3 id="5、什么是最左前缀原则"><a href="#5、什么是最左前缀原则" class="headerlink" title="5、什么是最左前缀原则"></a>5、什么是最左前缀原则</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user2`</span> (</span><br><span class="line">  <span class="string">`userid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`usertype`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`userid`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`a_b_c_index`</span> (<span class="string">`username`</span>,<span class="string">`password`</span>,<span class="string">`usertype`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>上表中有一个联合索引，下面开始验证最左匹配原则。</p><ul><li>当存在username时会使用索引查询：<br><code>explain select * from user2 where username = &#39;1&#39; and password = &#39;1&#39;;</code></li><li>当没有username时，不会使用索引查询：<br><code>explain select * from user2 where password = &#39;1&#39;;</code></li><li>当有username，但顺序乱序时也可以使用索引：<br><code>explain select * from user2 where password = &#39;1&#39; and username = &#39;1&#39;;</code></li></ul><p>在最左匹配原则中，有如下说明：</p><ul><li>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如<code>a = 1 and b = 2 and c &gt; 3 and d = 4</code> 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</li><li>=和in可以乱序，比如<code>a = 1 and b = 2 and c = 3</code> 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</li><li>最左前缀的成因也不难理解：就是生成索引是先按照第一个索引，再按照第二个索引。如果只有第二个条件，此时第二个条件的索引是无序的。</li></ul><hr><h3 id="6、索引失效的几种情况"><a href="#6、索引失效的几种情况" class="headerlink" title="6、索引失效的几种情况"></a>6、索引失效的几种情况</h3><ul><li>如果条件中有or，即使其中有条件带索引也不会使用(这也是为什么尽量少用or的原因)要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引</li><li>对于多列索引，不是使用的第一部分，则不会使用索引</li><li>like查询以%开头</li><li>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引</li><li>如果mysql估计使用全表扫描要比使用索引快,则不使用索引</li></ul><hr><h3 id="7、主键，复合主键，联合主键"><a href="#7、主键，复合主键，联合主键" class="headerlink" title="7、主键，复合主键，联合主键"></a>7、主键，复合主键，联合主键</h3><ul><li>主键是能唯一表示一条数据的字段</li><li>复合主键是多个字段的组合</li><li>联合主键是多个表之间的通过给的数据表主键然后创建的联合主键</li></ul><hr><h3 id="8、常见索引的数据结构"><a href="#8、常见索引的数据结构" class="headerlink" title="8、常见索引的数据结构"></a>8、常见索引的数据结构</h3><p>二叉搜索树</p><p>B-tree<br><img src="/images/常见面试题的基础总结（数据库篇）/FB9AF3CC-91EE-45A0-84B8-252F43013CE8.png" alt="这里写图片描述"><br>b+-tree<br><img src="/images/常见面试题的基础总结（数据库篇）/4D1E71C6-E9E1-4818-82F2-E0B5B36647EE.png" alt="这里写图片描述"></p><p>Hash</p><hr><h3 id="9、b-树和Hash优缺点"><a href="#9、b-树和Hash优缺点" class="headerlink" title="9、b+树和Hash优缺点"></a>9、b+树和Hash优缺点</h3><ul><li>B+树的磁盘读写代价更低</li><li>B +树的查询效率更加稳定</li><li>B+树更有利于对数据库的扫描</li><li>Hash仅仅能满足“=”, “IN”,</li><li>Hash不能使用范围查询</li><li>Hash无法被用来避免数据的排序操作</li><li>Hash不能利用部分索引键查询</li><li>Hash不能避免表扫描</li><li>Hash遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高</li></ul><hr><h3 id="10、b数和b-数区别"><a href="#10、b数和b-数区别" class="headerlink" title="10、b数和b+数区别"></a>10、b数和b+数区别</h3><ul><li>b数每个节点都存储key和data，叶子节点的指针为null</li><li>b+数只有叶子节点存储data，叶子节点包含了这个数的所有键值，叶子节点不存值</li></ul><hr><h3 id="11、如何定位慢查询"><a href="#11、如何定位慢查询" class="headerlink" title="11、如何定位慢查询"></a>11、如何定位慢查询</h3><ul><li>根据慢日志查询SQL语句 使用 show variables like ‘%query%’ 可以将slow_query_log选项开启，同时可以查看慢日志的路径</li><li>使用Explain关键字，即在普通SQL语句前加上Explain，可通过查看extra项和type项看是否使用到了索引</li><li>最左匹配原则</li></ul><hr><h3 id="12、索引是建立的越多越好吗"><a href="#12、索引是建立的越多越好吗" class="headerlink" title="12、索引是建立的越多越好吗"></a>12、索引是建立的越多越好吗</h3><ul><li>数据量小不需要索引</li><li>经常变更同时也需要维护索引，意味着更多的维护成本</li><li>更多索引以为这更多的空间</li></ul><hr><h3 id="13、InnoDB和MyISAM区别以及各自适合场景"><a href="#13、InnoDB和MyISAM区别以及各自适合场景" class="headerlink" title="13、InnoDB和MyISAM区别以及各自适合场景"></a>13、InnoDB和MyISAM区别以及各自适合场景</h3><ul><li>InnoDb数据索引在一个文件中。MyISAM数据与索引为两个文件</li><li>MyISAM默认用的是表级锁,不支持行级锁</li><li>InnoDB默认用的是行级锁,也支持表级锁</li><li>MyISAM适合于频繁执行全表count语句，同时对增删改频率不高，查询频繁，没有事务</li><li>InnoDB适合于增删改查都相当频繁，同时可靠性要求比较高，要求支持事务</li></ul><hr><h3 id="14、数据库不同隔离级别下遇到的问题"><a href="#14、数据库不同隔离级别下遇到的问题" class="headerlink" title="14、数据库不同隔离级别下遇到的问题"></a>14、数据库不同隔离级别下遇到的问题</h3><p>本问题可参考本博客之前的文章：<a href="https://suiwo.xyz/2019/02/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6/">传送门</a></p><p><img src="/images/常见面试题的基础总结（数据库篇）/A86B95F0-68CE-4201-90B5-8AFA5D50005E.png" alt="这里写图片描述"></p><hr><h3 id="15、事务的ACID"><a href="#15、事务的ACID" class="headerlink" title="15、事务的ACID"></a>15、事务的ACID</h3><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><hr><h3 id="16、数据库的优化"><a href="#16、数据库的优化" class="headerlink" title="16、数据库的优化"></a>16、数据库的优化</h3><h5 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h5><ul><li>读写分离从字面意思就可以理解，就是把对数据库的读操作和写操作分离开。读写分离在网站发展初期可以一定程度上缓解读写并发时产生锁的问题，将读写压力分担到多台服务器上，通常用于读远大于写的场景。</li><li>读写分离的基本原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。单表的数据量限制，当单表数据量到一定条数之后数据库性能会显著下降。数据多了之后，对数据库的读、写就会很多。分库减少单台数据库的压力。</li></ul><h5 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h5><ul><li>主从复制，是用来建立一个和主数据库完全一样的数据库环境，称为从数据库；</li><li>主数据库一般是实时的业务数据库，从数据库的作用和使用场合一般有几个：<ul><li>一是作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作；</li><li>二是可在从数据库作备份、数据统计等工作，这样不影响主数据库的性能；</li></ul></li></ul><hr><h3 id="17、InnoDB如何手动设置共享锁和排它锁"><a href="#17、InnoDB如何手动设置共享锁和排它锁" class="headerlink" title="17、InnoDB如何手动设置共享锁和排它锁"></a>17、InnoDB如何手动设置共享锁和排它锁</h3><ul><li>共享锁也叫读锁，简称S锁，原理：一个事务获取了一个数据行的共享锁，其他事务能获得该行对应的共享锁，但不能获得排他锁，即一个事务在读取一个数据行的时候，其他事务也可以读，但不能对该数据行进行增删改。</li><li>排他锁也叫写锁，简称x锁，原理：一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁（排他锁或者共享锁），即一个事务在读取一个数据行的时候，其他事务不能对该数据行进行增删改查。<h5 id="如何设置共享锁和排他锁？"><a href="#如何设置共享锁和排他锁？" class="headerlink" title="如何设置共享锁和排他锁？"></a>如何设置共享锁和排他锁？</h5></li><li>设置共享锁：<code>SELECT ... LOCK IN SHARE MODE;</code></li><li>设置排他锁：<code>SELECT ... FOR UPDATE;</code></li></ul><hr><h3 id="18、redis基础数据结构"><a href="#18、redis基础数据结构" class="headerlink" title="18、redis基础数据结构"></a>18、redis基础数据结构</h3><blockquote><p>redis相关问题可参考之前的一些文章：</p><ul><li><a href="https://suiwo.xyz/2019/02/14/redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97/">redis如何实现异步队列</a></li><li><a href="https://suiwo.xyz/2019/02/13/redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/">redis如何实现分布式锁</a></li></ul></blockquote><ul><li><p>string：是一个可变的字节数组</p><ul><li><code>set name zhangsan</code>（增加）</li><li><code>get name</code>（删除）</li><li><code>strlen name</code>（获取长度）</li><li><code>getrange name 1 10</code>（获取1-10的字符）</li><li><code>append name ishahaha</code>（追加字符，此时name 为 zhangsanis）</li><li><code>decrby name 100</code>（name的值减100）</li><li><code>Incrby name 100</code>（name的值加100）</li></ul></li><li><p>List：是一个列表数据结构，且是双向链表<br>常见操作：<code>rpop</code>，<code>rpush</code>，<code>lpop</code>，<code>lpush</code>，<code>llen（长度）</code>，<code>lrange</code>，<code>lset name 1 lisi（将list的第二个元素修改成lisi）</code>，<code>lrem（删除）</code></p></li><li><p>Hash：等价于HashMap<br>常见操作：<code>hset（添加一个元素）</code>，<code>hmset（添加多个元素）</code>，<code>hget（获取一个元素）</code>，<code>hmget（获取多个元素）</code>，<code>hkeys（获取所有键）</code>，<code>hvals（获取所有值）</code>，<code>hdel（删除元素）</code></p></li><li><p>Set：类似于HashSet，所以value指向同一个键。<br>常见操作：<code>sadd（添加）</code>，<code>smembers（获取所有value）</code>，<code>scard（获取长度）</code>，<code>srandmember（获取随机元素）</code>，<code>srem（删除元素）</code>，<code>spop（随机删除元素）</code>，<code>sismember（判断元素是否存在）</code></p></li><li><p>Sortset：类似于优先队列set中每一个元素有一个score<br>常见操作：<code>zadd（添加）</code>，<code>zcard（获取长度）</code>，<code>zrem（删除元素）</code>，<code>zremrangebyrank（根据排名删除）</code>，<code>zremrangebyscore（根据成绩删除）</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      本文对面试中常见的一些数据库相关知识点或者问题的总结
    
    </summary>
    
      <category term="数据库" scheme="http://suiwo.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://suiwo.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="面试" scheme="http://suiwo.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>常见面试题的基础总结（计网篇）</title>
    <link href="http://suiwo.xyz/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E8%AE%A1%E7%BD%91%E7%AF%87%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/13/常见面试题的基础总结（计网篇）/</id>
    <published>2019-04-13T02:16:12.000Z</published>
    <updated>2019-04-18T01:23:51.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、OSI七层协议模型-TCP-IP四层体系结构"><a href="#1、OSI七层协议模型-TCP-IP四层体系结构" class="headerlink" title="1、OSI七层协议模型    TCP/IP四层体系结构"></a>1、OSI七层协议模型    TCP/IP四层体系结构</h3><table><thead><tr><th>OSI七层协议模型</th><th>TCP/IP四层体系结构</th><th>对应网络协议</th></tr></thead><tbody><tr><td>应用层</td><td>应用层（对应OSI应用层、表示层、会话层）</td><td>HTTP、TFTP、NFS、WAIS、SMTP</td></tr><tr><td>表示层</td><td></td><td>Telnet、Rlogin、SNMP、Gopher</td></tr><tr><td>会话层</td><td></td><td>SMTP、DNS</td></tr><tr><td>传输层</td><td>传输层</td><td>TCP、UDP</td></tr><tr><td>网络层</td><td></td><td>IP、ICMP、ARP、RARP、AKP、UUCP</td></tr><tr><td>数据链路层</td><td>网络接口层（对应OSI数据链路层、物理层）</td><td>FDDI、Ethernet、Arpanet、PDN、SLIP、PPP</td></tr><tr><td>物理层</td><td></td><td>IEEE 802.1A、IEEE 802.2到IEEE 802.11</td></tr></tbody></table><hr><h3 id="2、TCP三次握手"><a href="#2、TCP三次握手" class="headerlink" title="2、TCP三次握手:"></a>2、TCP三次握手:</h3><ul><li><p>C端:客户端; S服务端</p></li><li><p>第一次握手: C端向S端发送SYN数据包〈SYN=1，序列号=x)。A迸入SYN_ SENT状志，等待服务端确认。</p></li><li>第二次握手: S端收到SYN数据包并进行确认(SYN=1, ACK number=x+1, ACK=1,序列号=y)，再发送SYN+ACK数据包给C端，S端迸入SYN_ RCVD状志。</li><li>第三次握手: C端收到SYN+ACK数据包，如果ACK number=x+1,将ACK number设置为y+1, ACK=1，向S端发送ACK数据包，C端和S端都进入ESTABLISHED (已连接)状志。</li><li>简述:我连你，你同意，我再连你（成功）。</li></ul><p><img src="/images/常见面试题的基础总结（计网篇）/00B30835-5B39-4B03-994C-8480EBFCD6B6.png" alt="这里写图片描述"></p><h5 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手?"></a>为什么要三次握手?</h5><p>为了防止已失效的连接请求报文段突然又传到了服务端，产生错误。同时保证发送双方的消息发送与接收功能都可用。</p><blockquote><ul><li>解释:报文段已发送，在某个网络节点发生滞留，导致连接释放,释放后报文才到达另一端。</li><li>例如: C端发送SYN报文给S端，连接被释放后，S端才收到报文并误认为这是C端的新连接，给C端发送SYN+ACK报文，这是无法得到C端回应的，因为连接已无效。</li></ul></blockquote><hr><h3 id="3、TCP四次挥手"><a href="#3、TCP四次挥手" class="headerlink" title="3、TCP四次挥手"></a>3、TCP四次挥手</h3><ul><li>第一次挥手: A给B发送FIN报文(序列号=x)，A进入FIN_WAIT_1状态，表示A没有数据给B了。</li><li>第二次挥手: B收到FIN报文后，给A发送ACK报文(ACK=x+1)，A进入FIN_WAIT_2状态,B同意A关闭请求。</li><li>第三次挥手: B向A发送FIN报文(序列号=y)，请求关闭连接，B进入LAST_ACK状态。</li><li>第四次挥手: A收到FIN报文,向B发送ACK报文(ACK=y+1) , A进入TIME_WAIT状态，B收到ACK报文后关闭连接，A在2MSL后依然没收到回复，证明B端己关闭，A就可以关闭连接了。</li><li>简述:我要关闭，你同意，你要关闭，我同意你先关闭我再关闭。</li></ul><p><img src="/images/常见面试题的基础总结（计网篇）/41B7433B-AC8B-4F56-94B7-7A0F773F8362.png" alt="这里写图片描述"></p><h5 id="为什么TCP要四次挥手"><a href="#为什么TCP要四次挥手" class="headerlink" title="为什么TCP要四次挥手?"></a>为什么TCP要四次挥手?</h5><ul><li>TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。</li><li>TCP是全双工模式，主机1请求关闭连接，不再发送数据了，但是可以接收主机2的数据，主机2不再发送数据了，才算关闭，这样减小了丢失数据的风险。</li></ul><hr><h3 id="4、TIME-WAIT和CLOSE-TIME原因"><a href="#4、TIME-WAIT和CLOSE-TIME原因" class="headerlink" title="4、TIME-WAIT和CLOSE-TIME原因"></a>4、TIME-WAIT和CLOSE-TIME原因</h3><p>TCP要保证在所有可能的情况下使得所有的数据都能够被正确送达。当你关闭一个socket时，主动关闭一端的socket将进入TIME_WAIT状态，而被动关闭一方则转入CLOSED状态，这的确能够保证所有的数据都被传输。当一个socket关闭的时候，是通过两端四次握手完成的，当一端调用close()时，就说明本端没有数据要发送了。这好似看来在握手完成以后，socket就都可以处于初始的CLOSED状态了，其实不然。原因是这样安排状态有两个问题， 首先，我们没有任何机制保证最后的一个ACK能够正常传输，第二，网络上仍然有可能有残余的数据包(wandering duplicates)，我们也必须能够正常处理。</p><hr><h3 id="5、HTTP常见请求"><a href="#5、HTTP常见请求" class="headerlink" title="5、HTTP常见请求"></a>5、HTTP常见请求</h3><ul><li>Get 请求指定页面</li><li>Head 获取报头</li><li>Post 请求可能会导致资源建立</li><li>Put 修改资源</li><li>Delete 删除资源</li><li>Options 获取服务器性能</li></ul><hr><h3 id="6、HTTP常见状态码"><a href="#6、HTTP常见状态码" class="headerlink" title="6、HTTP常见状态码"></a>6、HTTP常见状态码</h3><ul><li>1xx    信息，服务器收到请求，需要请求者继续执行操作</li><li>2xx    成功，操作被成功接收并处理</li><li>3xx    重定向，需要进一步的操作以完成请求</li><li>4xx    客户端错误，请求包含语法错误或无法完成请求</li><li>5xx    服务器错误，服务器在处理请求的过程中发生了错误</li></ul><hr><h3 id="7、HTTP与HTTPS"><a href="#7、HTTP与HTTPS" class="headerlink" title="7、HTTP与HTTPS"></a>7、HTTP与HTTPS</h3><p>HTTP使用80端口，HTTPS使用443端口，其中HTTPS是由SSL+HTTP协议构建的可进行加密传输，身份认证的网络协议。SSL是安全套接层在传输层</p><hr><h3 id="8、HTTP-keep-alive"><a href="#8、HTTP-keep-alive" class="headerlink" title="8、HTTP keep-alive"></a>8、HTTP keep-alive</h3><p>参考：<a href="https://segmentfault.com/a/1190000012894416" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012894416</a><br>我们知道HTTP协议采用“请求-应答”模式，当使用普通模式，即非KeepAlive模式时，每个请求/应答客户和服务器都要新建一个连接，完成 之后立即断开连接（HTTP协议为无连接的协议）；当使用Keep-Alive模式（又称持久连接、连接重用）时，Keep-Alive功能使客户端到服 务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p><hr><h3 id="9、TCP-keepalive"><a href="#9、TCP-keepalive" class="headerlink" title="9、TCP keepalive"></a>9、TCP keepalive</h3><p> 概念:</p><ul><li>在使用TCP长连接（复用已建立TCP连接）的场景下，需要对TCP连接进行保活，避免被网关干掉连接。<br>在应用层，可以通过定时发送心跳包的方式实现。而Linux已提供的TCP KEEPALIVE，在应用层可不关心心跳包何时发送、发送什么内容，由OS管理：OS会在该TCP连接上定时发送探测包，探测包既起到连接保活的作用，也能自动检测连接的有效性，并自动关闭无效连接。</li></ul><p>原理:</p><ul><li>建立TCP连接时，就有定时器与之绑定，其中的一些定时器就用于处理keepalive过程。当keepalive定时器到0的时候，便会给对端发送一个不包含数据部分的keepalive探测包（probe packet），如果收到了keepalive探测包的回复消息，那就可以断定连接依然是OK的。如果我们没有收到对端keepalive探测包的回复消息，我们便可以断定连接已经不可用，进而采取一些措施。但Keepalive会额外产生一些网络数据包外，这些包将加大网络流量，对路由器和防火墙造成一定的负担。</li></ul><hr><h3 id="10、TCP滑动窗口"><a href="#10、TCP滑动窗口" class="headerlink" title="10、TCP滑动窗口"></a>10、TCP滑动窗口</h3><p>TCP滑动窗口具有拥塞控制和保证可靠性的功能</p><ul><li>对于拥塞控制，滑动窗口是可变大小的，如果滑动窗口发生拥塞控制则将窗口大小置为1，然后对长度进行2的指数增长，直到窗口大小可满足数据传输或者大小到达阈值。</li><li>对于可靠性，接收双方具有同样大小的窗口，然后对数据进行编号，如果接收端没有收到某部分信息就会发送请求给发送方然后重新发送未接收到的部分。</li></ul><hr><h3 id="11、TCP-UDP比较"><a href="#11、TCP-UDP比较" class="headerlink" title="11、TCP/UDP比较"></a>11、TCP/UDP比较</h3><table><thead><tr><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>TCP面向连接</td><td>UDP无连接</td></tr><tr><td>TCP是无界的</td><td>UDP是有界的</td></tr><tr><td>TCP可靠</td><td>UDP不可靠</td></tr><tr><td>TCP具有拥塞控制</td><td>UDP没有</td></tr><tr><td>TCP效率低</td><td>UDP效率高</td></tr><tr><td>TCP适合一对一连接</td><td>UDP适合广播、多播</td></tr><tr><td>TCP结构复杂</td><td>UDP结构简单</td></tr><tr><td>TCP能保证发送顺序</td><td>UDP无法保证</td></tr><tr><td>TCP使用字节流</td><td>UDP面向数据报</td></tr></tbody></table><ul><li>为什么TCP是无界的：例如TCP可能将一个连续数据分成多块发送，此时无法确认数据大小。</li><li>为什么UDP不可靠：因为TCP是面向连接的具有重传等机制，而UDP不会重传。</li><li>数据报：封装数据，目的地址，源地址，端口号</li></ul><hr><h3 id="12、Cookie、Session"><a href="#12、Cookie、Session" class="headerlink" title="12、Cookie、Session"></a>12、Cookie、Session</h3><ul><li>Cookie是由服务器端生成，发送给User-Agent（一般是浏览器），浏览器会将Cookie的key/value保存到某个目录下的文本文件内，下次请求同一网站时就发送该Cookie给服务器（前提是浏览器设置为启用cookie）。</li><li>Cookie名称和值可以由服务器端开发自己定义，这样服务器可以知道该用户是否合法用户以及是否需要重新登录等，服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。</li></ul><h5 id="Cookie和Session的区别与关系"><a href="#Cookie和Session的区别与关系" class="headerlink" title="Cookie和Session的区别与关系"></a>Cookie和Session的区别与关系</h5><ul><li>session 在服务器端，cookie 在客户端（浏览器）</li><li>session 默认被存在在服务器的一个文件里（不是内存）</li><li>session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）</li><li>session 可以放在 文件、数据库、或内存中都可以。</li><li>用户验证这种场合一般会用 session</li><li>由于http协议是无状态的，服务器需要记录用户的状态，所以cookie和session都是用来保持状态的方案，session又依赖cookie。</li></ul><hr><h3 id="13、Token"><a href="#13、Token" class="headerlink" title="13、Token"></a>13、Token</h3><h5 id="（1）Session和Token的区别"><a href="#（1）Session和Token的区别" class="headerlink" title="（1）Session和Token的区别"></a>（1）Session和Token的区别</h5><ul><li>session一般在cookie中传递而token一般放在header中</li></ul><h5 id="（2）Token的使用-Json-Web-Token"><a href="#（2）Token的使用-Json-Web-Token" class="headerlink" title="（2）Token的使用 Json Web Token"></a>（2）Token的使用 Json Web Token</h5><ul><li>jwt的token包括三个部分，分别是header，payload，还有signature，header就是放的类型还有加密方式，然后payload主要就是放签发信息，签发时间还有身份权限等自定义的信息，最后一个签名就是对前两部分进行加密，防止被人篡改，将用户的非私密信息传给前端。</li></ul><hr><h3 id="14、当打开一个浏览器输入url到请求道页面的整个过程"><a href="#14、当打开一个浏览器输入url到请求道页面的整个过程" class="headerlink" title="14、当打开一个浏览器输入url到请求道页面的整个过程"></a>14、当打开一个浏览器输入url到请求道页面的整个过程</h3><ol><li>DNS解析 将域名转化为IP地址</li><li>TCP连接 与服务器建立连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><hr><h3 id="15、restful常见请求方法"><a href="#15、restful常见请求方法" class="headerlink" title="15、restful常见请求方法"></a>15、restful常见请求方法</h3><blockquote><p>restfual分别有GET \ POST \ PUT \ DELETE \ TRACE \ HEAD \ OPTIONS \  PATCH \ 等几种请求方法</p></blockquote><ul><li>POST : POST请求通常用来创建一个实体，也就是一个没有ID的资源。</li><li>GET：从服务器取回数据（只是取回数据，而不会产生其他的影响）。这是一个幂等的方法（译者注：使用相同的参数重复执行，应该能够获取到相同的结果）。</li><li>PUT  ：PUT请求和POST请求类似，但是一般用来更新一个已有的实体。通过把已经存在的资源的ID和新的实体用PUT请求上传的服务器，来更新资源。</li><li>DELETE ： DELETE方法用来从服务器上删除资源。和PUT类似，你需要把要删除的资源的ID上传给服务器。</li></ul><hr><h3 id="16、其他问题"><a href="#16、其他问题" class="headerlink" title="16、其他问题"></a>16、其他问题</h3><ul><li><p>有没有网络编程，有，怎么看连接状态？netstat，有哪些？ESTABLISHED，LISTEN等等，有异常情况吗？TIME_WAIT很多，为什么？大量短链接</p></li><li><p>奖品秒杀模型设计</p></li></ul>]]></content>
    
    <summary type="html">
    
      昨天参加了华为的面试，其实本打算面试前就汇总好发到博客上，但是结果时间比较紧张，就没有把总结好的Word文档的内容发到博客。昨天的华为面试表现个人感觉不好，性格测试也可能挂了，希望能有个好结果吧（面试完华为许愿一波，希望可以拿到offer，虽然已经做好了最坏的打算）
    
    </summary>
    
      <category term="计算机网络" scheme="http://suiwo.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="面试" scheme="http://suiwo.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="计算机网络" scheme="http://suiwo.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>重温Java网络编程（实现简易TCP，UDP应用）</title>
    <link href="http://suiwo.xyz/2019/04/07/%E9%87%8D%E6%B8%A9Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93TCP%EF%BC%8CUDP%E5%BA%94%E7%94%A8%EF%BC%89/"/>
    <id>http://suiwo.xyz/2019/04/07/重温Java网络编程（实现简易TCP，UDP应用）/</id>
    <published>2019-04-07T15:31:37.000Z</published>
    <updated>2019-04-08T10:19:04.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于TCP以及UDP的相关知识，在此就不做相关总结，如有需要可以参考<a href="https://blog.csdn.net/li_ning_/article/details/52117463" target="_blank" rel="noopener">https://blog.csdn.net/li_ning_/article/details/52117463</a></p></blockquote><hr><hr><h3 id="一、使用TCP实现一个简易登录功能"><a href="#一、使用TCP实现一个简易登录功能" class="headerlink" title="一、使用TCP实现一个简易登录功能"></a>一、使用TCP实现一个简易登录功能</h3><h4 id="1-创建一个实体类-User-java"><a href="#1-创建一个实体类-User-java" class="headerlink" title="1.创建一个实体类 User.java"></a>1.创建一个实体类 User.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-服务器端代码-LoginServer-java"><a href="#2-服务器端代码-LoginServer-java" class="headerlink" title="2.服务器端代码 LoginServer.java"></a>2.服务器端代码 LoginServer.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个ServerSocket，指定监听的端口</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//使用ServerSocket监听用户请求</span></span><br><span class="line">            Socket socket = serverSocket.accept();<span class="comment">//如果没有请求则阻塞</span></span><br><span class="line">            <span class="comment">//启动一个登录线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> LoginThread(socket)).start();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"你是访问该服务器的第"</span> + ++i + <span class="string">"个用户,你的ip地址为"</span></span><br><span class="line">                    + socket.getInetAddress().getHostAddress());</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-登录线程代码-LoginThread-java"><a href="#3-登录线程代码-LoginThread-java" class="headerlink" title="3.登录线程代码 LoginThread.java"></a>3.登录线程代码 LoginThread.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    LoginThread(Socket socket) &#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理用户请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//接收来自客户端的数据并输出</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">            User user = (User) objectInputStream.readObject();</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送反馈</span></span><br><span class="line">            DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"zhangsan"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"1234"</span>.equals(user.getPassword())) &#123;</span><br><span class="line">                dataOutputStream.writeUTF(<span class="string">"登录成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dataOutputStream.writeUTF(<span class="string">"登录失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            dataOutputStream.close();</span><br><span class="line">            objectInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-客户端代码-LoginClient-java"><a href="#4-客户端代码-LoginClient-java" class="headerlink" title="4.客户端代码 LoginClient.java"></a>4.客户端代码 LoginClient.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Socket，指定服务器端的ip与端口</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入用户名:"</span>);</span><br><span class="line">        String username = sc.nextLine();</span><br><span class="line">        System.out.print(<span class="string">"请输入密码:"</span>);</span><br><span class="line">        String password = sc.nextLine();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送登录信息</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(outputStream);</span><br><span class="line">        objectOutputStream.writeObject(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(inputStream);</span><br><span class="line">        String res = dataInputStream.readUTF();</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        dataInputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(客户端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入用户名:zhangsan</span><br><span class="line">请输入密码:1234</span><br><span class="line">登录成功</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(服务端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&apos;zhangsan&apos;, password=&apos;1234&apos;&#125;</span><br><span class="line">你是访问该服务器的第1个用户,你的ip地址为xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><hr><hr><h3 id="二、使用UDP实现一个简易聊天室功能"><a href="#二、使用UDP实现一个简易聊天室功能" class="headerlink" title="二、使用UDP实现一个简易聊天室功能"></a>二、使用UDP实现一个简易聊天室功能</h3><blockquote><p>UDP相较于TCP实现简单一些，所以代码量也稍微的少一些</p></blockquote><h4 id="1-服务端代码"><a href="#1-服务端代码" class="headerlink" title="1.服务端代码"></a>1.服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.udp.moreThanOneUdp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能:在线客服.</span></span><br><span class="line"><span class="comment"> * 技能:使用UDP网络编程完成</span></span><br><span class="line"><span class="comment"> * 注意</span></span><br><span class="line"><span class="comment"> * 1. UDP编程中客户端和服务器端区分不明显,双方代码差别不大</span></span><br><span class="line"><span class="comment"> * 2.主动发起请求的一段是客户端，接收请求的是服务器端;一旦通信开始，客户端和服务器端无差别</span></span><br><span class="line"><span class="comment"> * 3.不涉及IO流</span></span><br><span class="line"><span class="comment"> * 4.主要API</span></span><br><span class="line"><span class="comment"> * - DatagramSocket:socket,作用是发送和接收DatagramPacket</span></span><br><span class="line"><span class="comment"> * - DatagramPacket:数据报（封装数据，目的地址，源地址，端口号）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AskServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个DatagramSocket,用来发送和接收数据</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);<span class="comment">//服务器端接收数据的端口</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//使用DatagramSocket接收一个DatagramPacket</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket datagramPacket1 = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">            socket.receive(datagramPacket1);</span><br><span class="line">            System.out.println(<span class="string">"对方说:"</span> + <span class="keyword">new</span> String(datagramPacket1.getData(), <span class="number">0</span>, datagramPacket1.getLength()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用DatagramSocket发送一个DatagramPacket</span></span><br><span class="line">            System.out.print(<span class="string">"请您输入:"</span>);</span><br><span class="line">            String info = sc.nextLine();</span><br><span class="line">            InetAddress inetAddress = datagramPacket1.getAddress();</span><br><span class="line">            <span class="keyword">int</span> port = datagramPacket1.getPort();</span><br><span class="line">            DatagramPacket datagramPacket2 = <span class="keyword">new</span> DatagramPacket(info.getBytes(), info.getBytes().length, inetAddress, port);</span><br><span class="line">            socket.send(datagramPacket2);</span><br><span class="line">            <span class="keyword">if</span> (info.equals(<span class="string">"bye"</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"聊天结束"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-客户端代码"><a href="#2-客户端代码" class="headerlink" title="2.客户端代码"></a>2.客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.udp.moreThanOneUdp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AskClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个DatagramSocket,用来发送和接收数据</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8889</span>);<span class="comment">//客户端接收数据的端口,可以省略，会自动分配</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//使用DatagramSocket发送一个DatagramPacket</span></span><br><span class="line">            System.out.print(<span class="string">"请您输入:"</span>);</span><br><span class="line">            String info = sc.nextLine();</span><br><span class="line">            InetAddress inetAddress = InetAddress.getLocalHost();</span><br><span class="line">            DatagramPacket datagramPacket1 = <span class="keyword">new</span> DatagramPacket(info.getBytes(), info.getBytes().length, inetAddress, <span class="number">8888</span>);</span><br><span class="line">            socket.send(datagramPacket1);</span><br><span class="line">            <span class="keyword">if</span> (info.equals(<span class="string">"bye"</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用DatagramSocket接收一个DatagramPacket</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1000</span>];</span><br><span class="line">            DatagramPacket datagramPacket2 = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">            socket.receive(datagramPacket2);</span><br><span class="line">            System.out.println(<span class="string">"对方说:"</span> + <span class="keyword">new</span> String(buf, <span class="number">0</span>, datagramPacket2.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"聊天结束"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(客户端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请您输入:你好呀</span><br><span class="line">对方说:你是谁</span><br><span class="line">请您输入:我是张三，你呢</span><br><span class="line">对方说:我是李四</span><br><span class="line">请您输入:好的，我要忙了</span><br><span class="line">对方说:bye</span><br><span class="line">请您输入:bye</span><br><span class="line">聊天结束</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(服务端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对方说:你好呀</span><br><span class="line">请您输入:你是谁</span><br><span class="line">对方说:我是张三，你呢</span><br><span class="line">请您输入:我是李四</span><br><span class="line">对方说:好的，我要忙了</span><br><span class="line">请您输入:bye</span><br><span class="line">聊天结束</span><br></pre></td></tr></table></figure><hr><hr><h3 id="三、使用TCP实现文件上传以及文件下载功能"><a href="#三、使用TCP实现文件上传以及文件下载功能" class="headerlink" title="三、使用TCP实现文件上传以及文件下载功能"></a>三、使用TCP实现文件上传以及文件下载功能</h3><blockquote><ul><li>文件上传的本质:文件从客户端到服务器端的复制</li><li>文件下载的本质:文件从服务器端到客户端的复制</li><li>文件的上传和下载都是两次文件复制</li></ul></blockquote><hr><h4 id="1-文件上传功能服务端代码"><a href="#1-文件上传功能服务端代码" class="headerlink" title="1.文件上传功能服务端代码"></a>1.文件上传功能服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.uploadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/test1.txt"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用输入流和输出流完成文件复制</span></span><br><span class="line">        <span class="comment">//中转站</span></span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取末尾的一个字节的内容赋给n</span></span><br><span class="line">        n = bufferedInputStream.read();</span><br><span class="line">        <span class="keyword">while</span> (n != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//写一个字节</span></span><br><span class="line">            bufferedOutputStream.write(n);</span><br><span class="line">            System.out.println(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//读一个字节</span></span><br><span class="line">            n = bufferedInputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-文件上传功能客户端代码"><a href="#2-文件上传功能客户端代码" class="headerlink" title="2.文件上传功能客户端代码"></a>2.文件上传功能客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.uploadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(),<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"/test.txt"</span>)));</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-文件下载功能服务端代码"><a href="#1-文件下载功能服务端代码" class="headerlink" title="1.文件下载功能服务端代码"></a>1.文件下载功能服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.downloadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/test.txt"</span>)));</span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用输入流和输出流完成文件复制</span></span><br><span class="line">        <span class="comment">//中转站</span></span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取末尾的一个字节的内容赋给n</span></span><br><span class="line">        n = bufferedInputStream.read();</span><br><span class="line">        <span class="keyword">while</span> (n != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//写一个字节</span></span><br><span class="line">            bufferedOutputStream.write(n);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读一个字节</span></span><br><span class="line">            n = bufferedInputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-文件下载功能客户端代码"><a href="#2-文件下载功能客户端代码" class="headerlink" title="2.文件下载功能客户端代码"></a>2.文件下载功能客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.downloadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(),<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/test1.txt"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实上传功能和下载功能的逻辑是相同的，只不过一个是文件c =&gt; s,一个是文件s =&gt; c</p></blockquote><hr><hr><blockquote><p>参考视频：<a href="https://www.bilibili.com/video/av31123719/" target="_blank" rel="noopener">https://www.bilibili.com/video/av31123719/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      今天在看计网相关问题时遇到了网络编程相关问题，所以重温了一下java的网络编程，并使用TCP实现一个简单登录系统，文件上传，文件下载功能，使用UDP实现一个简易聊天室。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="编程基础" scheme="http://suiwo.xyz/tags/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Socket编程" scheme="http://suiwo.xyz/tags/Socket%E7%BC%96%E7%A8%8B/"/>
    
      <category term="TCP/UDP" scheme="http://suiwo.xyz/tags/TCP-UDP/"/>
    
  </entry>
  
  <entry>
    <title>重温Java反射机制</title>
    <link href="http://suiwo.xyz/2019/04/01/%E9%87%8D%E6%B8%A9Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://suiwo.xyz/2019/04/01/重温Java反射机制/</id>
    <published>2019-04-01T08:08:44.000Z</published>
    <updated>2019-04-01T08:42:04.079Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要是为了实战Java反射，简单工厂只是一个背景，故对简单工厂模式不做解释了。</p></blockquote><hr><p>1、首先先做个一个使用了简单工厂模式的demo。<br>Fruit是一个接口，里面含有一个get()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Apple与Banana为两个实现了Fruit的接口，其中Apple类中方法较多用于实现Java反射中的各种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"name"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//无参无返回值情况</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">aha</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple, but you can't see this word."</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参无返回值情况</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ahaString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple, but you can't see this word."</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参有返回值情况</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">ahaReturn</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple, but you can't see this word."</span> + str);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"yes"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、FruitFactory为简单工厂模式创建类（为了后期再Main函数中体现Java反射机制，正确的应该像注释中那样，直接返回类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title">getFruit</span><span class="params">(String typeName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//通过字符串获取相关的类并返回</span></span><br><span class="line">            <span class="keyword">return</span> Class.forName(typeName);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//package SimpleFactory;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//public class FruitFactory &#123;</span></span><br><span class="line"><span class="comment">//    public static Fruit getFruit(String typeName)&#123;</span></span><br><span class="line"><span class="comment">//        Class fruitClass = null;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            fruitClass = Class.forName(typeName);</span></span><br><span class="line"><span class="comment">//            return (Fruit) fruitClass.newInstance();</span></span><br><span class="line"><span class="comment">//        &#125; catch (ClassNotFoundException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (IllegalAccessException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (InstantiationException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return null;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>4、下面是执行一下常见的反射操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainSimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//反射机制</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取Apple的Class</span></span><br><span class="line">            Class appleClass = FruitFactory.getFruit(<span class="string">"SimpleFactory.Apple"</span>);</span><br><span class="line">            <span class="comment">//创建实例</span></span><br><span class="line">            Fruit apple = (Fruit) appleClass.newInstance();</span><br><span class="line">            <span class="comment">//执行实例的public方法</span></span><br><span class="line">            apple.get();</span><br><span class="line">            <span class="comment">//获取private方法</span></span><br><span class="line">            Method getAha = appleClass.getDeclaredMethod(<span class="string">"aha"</span>);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            getAha.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//执行该无参无返回值的方法</span></span><br><span class="line">            getAha.invoke(apple);</span><br><span class="line">            <span class="comment">//获取private属性</span></span><br><span class="line">            Field name = appleClass.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//修改该name的值</span></span><br><span class="line">            name.set(apple, <span class="string">"newName"</span>);</span><br><span class="line">            <span class="comment">//修改后再一次执行getAha方法</span></span><br><span class="line">            getAha.invoke(apple);</span><br><span class="line">            <span class="comment">//获取private方法</span></span><br><span class="line">            Method getAhaString = appleClass.getDeclaredMethod(<span class="string">"ahaString"</span>,String.class);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            getAhaString.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//执行该有参无返回值的方法</span></span><br><span class="line">            getAhaString.invoke(apple, <span class="string">"false"</span>);</span><br><span class="line">            <span class="comment">//获取private方法</span></span><br><span class="line">            Method getAhaReturn = appleClass.getDeclaredMethod(<span class="string">"ahaReturn"</span>,String.class);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            getAhaReturn.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//执行该有参有返回值的方法</span></span><br><span class="line">            String res = (String) getAhaReturn.invoke(apple, <span class="string">"true"</span>);</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//与上面相同，只不过是使用简单工厂创建了Banana类的对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class appleClass = FruitFactory.getFruit(<span class="string">"SimpleFactory.Banana"</span>);</span><br><span class="line">            Fruit banana = (Fruit) appleClass.newInstance();</span><br><span class="line">            banana.get();</span><br><span class="line">            Method getAha = appleClass.getDeclaredMethod(<span class="string">"ahaa"</span>);</span><br><span class="line">            getAha.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            getAha.invoke(banana);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">This is apple</span><br><span class="line">This is apple, but you can&apos;t see this word.name</span><br><span class="line">This is apple, but you can&apos;t see this word.newName</span><br><span class="line">This is apple, but you can&apos;t see this word.false</span><br><span class="line">This is apple, but you can&apos;t see this word.true</span><br><span class="line">yes</span><br><span class="line">This is Banana</span><br><span class="line">This is banana, but you can&apos;t see this word.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      今天在学习Java设计模式时发现很多设计思想需要用到Java的反射，也算是对Java反射的一次实战了，毕竟之前都只是看了理论并没有真的在实战中使用，本文是结合最基础的简单工厂模式来实战使用Java反射。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="编程基础" scheme="http://suiwo.xyz/tags/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java反射" scheme="http://suiwo.xyz/tags/Java%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法</title>
    <link href="http://suiwo.xyz/2019/03/12/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://suiwo.xyz/2019/03/12/常见排序算法/</id>
    <published>2019-03-12T07:15:50.000Z</published>
    <updated>2019-03-13T01:30:06.229Z</updated>
    
    <content type="html"><![CDATA[<h5 id="今天实在不想刷笔试题就把常见的排序手敲了一遍"><a href="#今天实在不想刷笔试题就把常见的排序手敲了一遍" class="headerlink" title="今天实在不想刷笔试题就把常见的排序手敲了一遍"></a>今天实在不想刷笔试题就把常见的排序手敲了一遍</h5><hr><h3 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1.选择排序"></a>1.选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoiceSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChoiceSort&lt;Integer&gt; choiceSort = <span class="keyword">new</span> ChoiceSort&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        choiceSort.sort(arr);</span><br><span class="line">        choiceSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(less(arr[j] , arr[min]))&#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(arr, i ,min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2.插入排序"></a>2.插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InsertSort&lt;Integer&gt; insertSort = <span class="keyword">new</span> InsertSort&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        insertSort.sort(arr);</span><br><span class="line">        insertSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(arr[j], arr[j-<span class="number">1</span>]) ; j--)&#123;</span><br><span class="line">                exch(arr, j, j -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3.冒泡排序"></a>3.冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        BubbleSort&lt;Integer&gt; bubbleSort = <span class="keyword">new</span> BubbleSort&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">88</span>,-<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!bubbleSort.less(arr[j], arr[j+<span class="number">1</span>]))&#123;</span><br><span class="line">                    bubbleSort.exch(arr, j, j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bubbleSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-归并排序"><a href="#4-归并排序" class="headerlink" title="4.归并排序"></a>4.归并排序</h3><h5 id="自顶向下的排序"><a href="#自顶向下的排序" class="headerlink" title="自顶向下的排序"></a>自顶向下的排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSortStartByTop</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T[] tmpArr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MergeSortStartByTop&lt;Integer&gt; mergeSort = <span class="keyword">new</span> MergeSortStartByTop&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        mergeSort.sort(arr);</span><br><span class="line">        mergeSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        tmpArr = (T[]) <span class="keyword">new</span> Comparable[arr.length];</span><br><span class="line">        sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + (r - l)/<span class="number">2</span>;</span><br><span class="line">        sort(arr, l, mid);</span><br><span class="line">        sort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        merge(arr, mid, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(T[] arr, <span class="keyword">int</span> mid, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;</span><br><span class="line">        <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = l; k &lt;= r; k++)&#123;</span><br><span class="line">            tmpArr[k] = arr[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = l; k &lt;= r; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; mid)&#123;</span><br><span class="line">                arr[k] = tmpArr[j++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j &gt; r)&#123;</span><br><span class="line">                arr[k] = tmpArr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(less(tmpArr[i], tmpArr[j]))&#123;</span><br><span class="line">                arr[k] = tmpArr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                arr[k] = tmpArr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自底向上的排序"><a href="#自底向上的排序" class="headerlink" title="自底向上的排序"></a>自底向上的排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSortStartByButton</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T[] tmpArr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MergeSortStartByButton&lt;Integer&gt; mergeSort = <span class="keyword">new</span> MergeSortStartByButton&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        mergeSort.sort(arr);</span><br><span class="line">        mergeSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        tmpArr = (T[]) <span class="keyword">new</span> Comparable[arr.length];</span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外循环为每次归并排序,每组数据的宽度,每组数据的宽度之后进行2倍递增</span></span><br><span class="line">        <span class="keyword">for</span> (width = <span class="number">1</span>; width &lt; arr.length; width = width * <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//内循环为基于每组数据宽度,进行多组数据的归并排序</span></span><br><span class="line">            <span class="comment">//index += 2 * width 因为一次归并排序都是使用2组数据进行排序,所以每次</span></span><br><span class="line">            <span class="comment">//  递增2组数据的偏移量</span></span><br><span class="line">            <span class="comment">//index &lt; (size - width) 这里表示如果排序的索引位置连1组数据个数都不够了</span></span><br><span class="line">            <span class="comment">//  那就没必要处理了,因为排序至少需要1组多的数据.</span></span><br><span class="line">            <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; (arr.length - width); index += <span class="number">2</span> * width )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l = index;</span><br><span class="line">                <span class="keyword">int</span> r = index + (<span class="number">2</span> * width - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">int</span> mid = index + (r - l) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                merge(arr, mid, l, r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(T[] arr, <span class="keyword">int</span> mid, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;</span><br><span class="line">        <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = l; k &lt;= r; k++)&#123;</span><br><span class="line">            tmpArr[k] = arr[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = l; k &lt;= r; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; mid)&#123;</span><br><span class="line">                arr[k] = tmpArr[j++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j &gt; r)&#123;</span><br><span class="line">                arr[k] = tmpArr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(less(tmpArr[i], tmpArr[j]))&#123;</span><br><span class="line">                arr[k] = tmpArr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                arr[k] = tmpArr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5.快速排序"></a>5.快速排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        QuickSort&lt;Integer&gt; quickSort = <span class="keyword">new</span> QuickSort&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">88</span>,-<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        quickSort.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">"-----"</span>);</span><br><span class="line">        quickSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        sort(arr,<span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = partation1(arr, l, r);</span><br><span class="line">        sort(arr, l, i - <span class="number">1</span>);</span><br><span class="line">        sort(arr, i + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基准值为右边的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partation</span><span class="params">(T[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = r;</span><br><span class="line">        T t = arr[r];</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(less(arr[++i], t))&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == r)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (less(t, arr[--j]))&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == l)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= j)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(arr, i , j);</span><br><span class="line">        &#125;</span><br><span class="line">        exch(arr, r, i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基准值为左边的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partation1</span><span class="params">(T[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;</span><br><span class="line">        <span class="keyword">int</span> j = r + <span class="number">1</span>;</span><br><span class="line">        T t = arr[l];</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(less(arr[++i], t))&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == r)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (less(t, arr[--j]))&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == l)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= j)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(arr, i , j);</span><br><span class="line">        &#125;</span><br><span class="line">        exch(arr, l, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      今天实在不想刷笔试题就把常见的排序手敲了一遍
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://suiwo.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://suiwo.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://suiwo.xyz/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>redis如何实现异步队列</title>
    <link href="http://suiwo.xyz/2019/02/14/redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97/"/>
    <id>http://suiwo.xyz/2019/02/14/redis如何实现异步队列/</id>
    <published>2019-02-14T02:02:20.000Z</published>
    <updated>2019-02-14T02:04:58.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-如何使用Redis做异步队列"><a href="#一-如何使用Redis做异步队列" class="headerlink" title="一.如何使用Redis做异步队列"></a>一.如何使用Redis做异步队列</h2><h3 id="1-使用List作为队列-RPUSH生产消息-LPOP消费消息"><a href="#1-使用List作为队列-RPUSH生产消息-LPOP消费消息" class="headerlink" title="1.使用List作为队列, RPUSH生产消息, LPOP消费消息"></a>1.使用List作为队列, RPUSH生产消息, LPOP消费消息</h3><p>➢缺点:没有等待队列里有值就直接消费<br>➢弥补:可以通过在应用层引入Sleep机制去调用LPOP重试</p><h3 id="2-BLPOP-key-key-timeout-阻塞直到队列有消息或者超时"><a href="#2-BLPOP-key-key-timeout-阻塞直到队列有消息或者超时" class="headerlink" title="2. BLPOP key [key .. timeout :阻塞直到队列有消息或者超时"></a>2. <code>BLPOP key [key .. timeout</code> :阻塞直到队列有消息或者超时</h3><p>➢缺点:只能供-一个消费者消费</p><h2 id="二-如何使用Redis做异步队列"><a href="#二-如何使用Redis做异步队列" class="headerlink" title="二.如何使用Redis做异步队列"></a>二.如何使用Redis做异步队列</h2><h3 id="pub-sub-主题订阅者模式"><a href="#pub-sub-主题订阅者模式" class="headerlink" title="pub/sub :主题订阅者模式"></a>pub/sub :主题订阅者模式</h3><ul><li>发送者(pub)发送消息,订阅者(sub)接收消息</li><li>订阅者可以订阅任意数量的频道<br>hex</li></ul><p><img src="/images/redis如何实现异步队列/4599D9D7-8657-4473-BFAF-9AAE44487A04.png" alt="这里写图片描述"></p><h5 id="下面我们就演示一下，首先我们打开三个终端，两个作为接收者，一个作为发送者，由下图可见当我们发送消息时只有指定的订阅者可以获取到消息"><a href="#下面我们就演示一下，首先我们打开三个终端，两个作为接收者，一个作为发送者，由下图可见当我们发送消息时只有指定的订阅者可以获取到消息" class="headerlink" title="下面我们就演示一下，首先我们打开三个终端，两个作为接收者，一个作为发送者，由下图可见当我们发送消息时只有指定的订阅者可以获取到消息"></a>下面我们就演示一下，首先我们打开三个终端，两个作为接收者，一个作为发送者，由下图可见当我们发送消息时只有指定的订阅者可以获取到消息</h5><p><img src="/images/redis如何实现异步队列/83848910-41A0-46B3-B876-A2CB6E8E5B07.png" alt="这里写图片描述"></p><h2 id="三-pub-sub的缺点"><a href="#三-pub-sub的缺点" class="headerlink" title="三.pub/sub的缺点"></a>三.pub/sub的缺点</h2><h5 id="消息的发布是无状态的-无法保证可达，若订阅者在发送者发布消息期间下线，之后我们再上线将无法接受到刚才发送的消息，解决办法就是使用消息队列"><a href="#消息的发布是无状态的-无法保证可达，若订阅者在发送者发布消息期间下线，之后我们再上线将无法接受到刚才发送的消息，解决办法就是使用消息队列" class="headerlink" title="消息的发布是无状态的,无法保证可达，若订阅者在发送者发布消息期间下线，之后我们再上线将无法接受到刚才发送的消息，解决办法就是使用消息队列"></a>消息的发布是无状态的,无法保证可达，若订阅者在发送者发布消息期间下线，之后我们再上线将无法接受到刚才发送的消息，解决办法就是使用消息队列</h5>]]></content>
    
    <summary type="html">
    
      本文是在看了慕课相关课程后对redis如何实现异步队列进行的相关总结
    
    </summary>
    
      <category term="数据库" scheme="http://suiwo.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="非关系型数据库" scheme="http://suiwo.xyz/tags/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="redis" scheme="http://suiwo.xyz/tags/redis/"/>
    
      <category term="异步队列" scheme="http://suiwo.xyz/tags/%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>redis如何实现分布式锁</title>
    <link href="http://suiwo.xyz/2019/02/13/redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://suiwo.xyz/2019/02/13/redis如何实现分布式锁/</id>
    <published>2019-02-13T15:32:00.000Z</published>
    <updated>2019-02-13T15:42:41.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-分布式锁需要解决的问题"><a href="#1-分布式锁需要解决的问题" class="headerlink" title="1.分布式锁需要解决的问题"></a>1.分布式锁需要解决的问题</h3><ul><li>互斥性：任意时刻只能有一个客户端拥有锁，不能同时多个客户端获取</li><li>安全性：锁只能被持有该锁的用户删除，而不能被其他用户删除</li><li>死锁：获取锁的客户端因为某些原因而宕机，而未能释放锁，其他客户端无法获取此锁，需要有机制来避免该类问题的发生</li><li>容错：当部分节点宕机，客户端仍能获取锁或者释放锁</li></ul><hr><h3 id="2-如何通过Redis实现分布式锁-非完善方法"><a href="#2-如何通过Redis实现分布式锁-非完善方法" class="headerlink" title="2.如何通过Redis实现分布式锁:(非完善方法)"></a>2.如何通过Redis实现分布式锁:(非完善方法)</h3><h5 id="SETNX-key-value-如果key不存在-则创建并赋值"><a href="#SETNX-key-value-如果key不存在-则创建并赋值" class="headerlink" title="SETNX key value :如果key不存在,则创建并赋值"></a><code>SETNX key value</code> :如果key不存在,则创建并赋值</h5><ul><li>时间复杂度: 0(1)</li><li>返回值:设置成功,返回1;设置失败,返回0。</li></ul><blockquote><p>但是此时我们获取的key是长期有效的，所以我们应该如何解决长期有效的问题呢？</p></blockquote><h4 id="如何解决SETNX长期有效的问题"><a href="#如何解决SETNX长期有效的问题" class="headerlink" title="如何解决SETNX长期有效的问题"></a>如何解决SETNX长期有效的问题</h4><h5 id="EXPIRE-key-seconds"><a href="#EXPIRE-key-seconds" class="headerlink" title="EXPIRE key seconds"></a><code>EXPIRE key seconds</code></h5><ul><li>设置key的生存时间,当key过期时(生存时间为0) ,会被自动删除</li><li>缺点：原子性得不到满足<h5 id="下面是伪代码"><a href="#下面是伪代码" class="headerlink" title="下面是伪代码"></a>下面是伪代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该程序存在危险，如果执行到第二行就崩溃了，则此时key会被一直占用而无法被释放</span></span><br><span class="line">RedisService redisService = SpringUtils.getBean(Redi sService.class); </span><br><span class="line"><span class="keyword">long</span> status = redisService.setnx(key, <span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">if</span>(status == <span class="number">1</span>) &#123;</span><br><span class="line">redisService.expire(key, expire);</span><br><span class="line"><span class="comment">//执行独占资源逻辑</span></span><br><span class="line">doOcuppiedWork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="3-如何通过Redis实现分布式锁-正确方式"><a href="#3-如何通过Redis实现分布式锁-正确方式" class="headerlink" title="3.如何通过Redis实现分布式锁:(正确方式)"></a>3.如何通过Redis实现分布式锁:(正确方式)</h3><h5 id="SET-key-value-EX-seconds-PX-milliseconds-NX-XX"><a href="#SET-key-value-EX-seconds-PX-milliseconds-NX-XX" class="headerlink" title="SET key value [EX seconds] [PX milliseconds] [NX|XX]"></a><code>SET key value [EX seconds] [PX milliseconds] [NX|XX]</code></h5><ul><li>EX second :设置键的过期时间为second秒</li><li>PX millisecond :设置键的过期时间为millisecond毫秒</li><li>NX :只在键不存在时,才对键进行设置操作</li><li>XX:只在键已经存在时,才对键进行设置操作</li><li>SET操作成功完成时,返回OK ,否则返回nil<h5 id="下面是伪代码-1"><a href="#下面是伪代码-1" class="headerlink" title="下面是伪代码"></a>下面是伪代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RedisService redisService = SpringUtils.getBean(RedisService.class); .</span><br><span class="line">String result = redisService.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"OK"</span>.equals(result)) &#123;</span><br><span class="line"><span class="comment">//执行独占资源逻辑</span></span><br><span class="line">doOcuppiedWork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-大量的key同时过期的注意事项"><a href="#4-大量的key同时过期的注意事项" class="headerlink" title="4.大量的key同时过期的注意事项"></a>4.大量的key同时过期的注意事项</h3><ul><li>集中过期,由于清除大量的key很耗时,会出现短暂的卡顿现象</li><li>解放方案:在设置key的过期时间的时候,给每个key加上随机值</li></ul>]]></content>
    
    <summary type="html">
    
      本文是在看了慕课相关课程后对redis如何实现分布式锁进行的相关总结
    
    </summary>
    
      <category term="数据库" scheme="http://suiwo.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="锁" scheme="http://suiwo.xyz/tags/%E9%94%81/"/>
    
      <category term="非关系型数据库" scheme="http://suiwo.xyz/tags/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="redis" scheme="http://suiwo.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>当前读与快照读</title>
    <link href="http://suiwo.xyz/2019/02/13/%E5%BD%93%E5%89%8D%E8%AF%BB%E4%B8%8E%E5%BF%AB%E7%85%A7%E8%AF%BB/"/>
    <id>http://suiwo.xyz/2019/02/13/当前读与快照读/</id>
    <published>2019-02-13T06:44:25.000Z</published>
    <updated>2019-02-13T06:49:04.007Z</updated>
    
    <content type="html"><![CDATA[<p>本文是根据慕课相关课程学习后，并总结了以下几篇博文后做的总结<br><a href="https://blog.csdn.net/silyvin/article/details/79280934" target="_blank" rel="noopener">https://blog.csdn.net/silyvin/article/details/79280934</a><br><a href="https://www.cnblogs.com/cat-and-water/p/6427612.html" target="_blank" rel="noopener">https://www.cnblogs.com/cat-and-water/p/6427612.html</a></p><p>innodb的默认事务隔离级别是rr（可重复读）。它的实现技术是mvcc。基于版本的控制协议。该技术不仅可以保证innodb的可重复读，而且可以防止幻读。但是它防止的是快照读，也就是读取的数据虽然是一致的，但是数据是历史数据。如何做到保证数据是一致的（也就是一个事务，其内部读取对应某一个数据的时候，数据都是一样的），同时读取的数据是最新的数据。innodb提供了一个间隙锁的技术。也就是结合GAP锁与行锁，达到最终目的。当使用索引进行插入的时候，innodb会将当前的节点和上一个节点加锁。这样当进行select的时候，就不允许加x锁。那么在进行该事务的时候，读取的就是最新的数据。</p><ul><li><p>快照读(snapshot read)</p><ul><li>不加锁的非阻塞读</li></ul><ul><li>当前读(current read)<ul><li>select … lock in share mode - select … lock in share mode<ul><li>select … for update</li><li>insert</li><li>update</li><li>delete</li></ul></li></ul></li></ul></li></ul><p>RC、RR级别下的InnoDB的非阻塞读如何实现</p><ul><li>数据行里的DB_TRX_ ID（事务ID）、DB_ ROLL_PTR（回滚指针）、DB_ROW_ ID（行号）字段</li><li>undo日志<ul><li>进行变更操作会产生undo日志，存储老版本数据</li><li>分为insert undo log（存储insert日志，只在事务回滚时需要，事务提交后即可删除）和update undo log（存储delete和update日志，不仅回滚需要，快照读也需要，不可随便删除）</li></ul></li></ul><p>下面我们看一下演示</p><p><img src="/images/当前读与快照读/E37DE40E-8196-44DB-BF4D-551FEDD630A8.png" alt="这里写图片描述"></p><p>上图为将field2字段由12改为32。此时我们将原数据存出来undo log，我们将回滚指针指向undo log的原数据，同时DB_TRX_ ID加1。如果我们之后进行回滚，则从undo log中获取数据，进行回滚。</p><p>同样下图为两个undo log日志</p><p><img src="/images/当前读与快照读/E944F1A3-D3FF-4C5C-81CB-9630DB68FA3F.png" alt="这里写图片描述"></p><p>InnoDB可重复读隔离级别下如何避免幻读</p><ul><li>表象:快照读(非阻塞读) –伪MVCC</li><li>内在: next-key锁(行锁+GAP锁)</li></ul><p>对主键索引或者唯一索引会用Gap锁吗？？</p><ul><li>如果where条件全部命中,则不会用Gap锁,只会加记录锁</li><li>如果where条件部分命中或者全不命中,则会加Gap锁</li></ul><p>如数据库中存在id为1，3，5的值，如果我们查询where id in (1,3); 此时我们会发现只有行锁，我们update id= 2;是成功的，但是如果我们查询where id in (1,4);  此时我们会发现有Gap锁，我们update id= 2;是无法成功的，只有等查询事务结束后才能update</p>]]></content>
    
    <summary type="html">
    
      本文是在看了慕课相关课程并阅读多篇博文后进行的当前读与快照读相关总结
    
    </summary>
    
      <category term="数据库" scheme="http://suiwo.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="锁" scheme="http://suiwo.xyz/tags/%E9%94%81/"/>
    
      <category term="数据库" scheme="http://suiwo.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="事务" scheme="http://suiwo.xyz/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务并发访问中的问题及隔离机制</title>
    <link href="http://suiwo.xyz/2019/02/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6/"/>
    <id>http://suiwo.xyz/2019/02/01/数据库事务并发访问中的问题及隔离机制/</id>
    <published>2019-02-01T11:25:28.000Z</published>
    <updated>2019-02-01T15:20:49.708Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="我们直接从隔离级别从低到高进行介绍"><a href="#我们直接从隔离级别从低到高进行介绍" class="headerlink" title="我们直接从隔离级别从低到高进行介绍"></a>我们直接从隔离级别从低到高进行介绍</h4><hr><h3 id="1-更新丢失"><a href="#1-更新丢失" class="headerlink" title="1.更新丢失"></a>1.更新丢失</h3><h4 id="目前主流数据库都会自动进行枷锁来避免，所以不好从数据库层面进行模拟，举个例子："><a href="#目前主流数据库都会自动进行枷锁来避免，所以不好从数据库层面进行模拟，举个例子：" class="headerlink" title="目前主流数据库都会自动进行枷锁来避免，所以不好从数据库层面进行模拟，举个例子："></a>目前主流数据库都会自动进行枷锁来避免，所以不好从数据库层面进行模拟，举个例子：</h4><table><thead><tr><th style="text-align:center">取款事务</th><th style="text-align:center">存款事务</th></tr></thead><tbody><tr><td style="text-align:center">开始事务</td><td style="text-align:center">开始事务</td></tr><tr><td style="text-align:center">查询转账余额为100元</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">查询转账余额为100元</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">存入20元,余额变为120元</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">提交事务</td></tr><tr><td style="text-align:center">取出10元,余额改为90元</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">回滚事务,余额恢复为100元</td><td style="text-align:center">更新丢失</td></tr></tbody></table><h4 id="从上表我们可以看出最终更新被覆盖导致了更新丢失"><a href="#从上表我们可以看出最终更新被覆盖导致了更新丢失" class="headerlink" title="从上表我们可以看出最终更新被覆盖导致了更新丢失"></a>从上表我们可以看出最终更新被覆盖导致了更新丢失</h4><hr><h3 id="2-脏读"><a href="#2-脏读" class="headerlink" title="2.脏读"></a>2.脏读</h3><h4 id="是指一个事务读取到了另一个事务未提交的数据"><a href="#是指一个事务读取到了另一个事务未提交的数据" class="headerlink" title="是指一个事务读取到了另一个事务未提交的数据"></a>是指一个事务读取到了另一个事务未提交的数据</h4><blockquote><p>如何解决：READ-COMMITTED事务隔离级别以上可避免</p></blockquote><h4 id="下面我们进行验证"><a href="#下面我们进行验证" class="headerlink" title="下面我们进行验证"></a>下面我们进行验证</h4><p>首先我们先使用下面的语句获取当前的事务隔离级别可知数据库的默认级别<code>REPEATABLE-READ</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation;#查询隔离级别</span><br></pre></td></tr></table></figure><p>下面我们使用下面的语句将当前事务的隔离级别设置为可读未提交<br><code>READ-UNCOMMITTED</code>(最低的事务隔离级别)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level read uncommitted;#修改隔离界别为 可读未提交</span><br></pre></td></tr></table></figure><h4 id="下面我们模拟脏读"><a href="#下面我们模拟脏读" class="headerlink" title="下面我们模拟脏读"></a>下面我们模拟脏读</h4><h4 id="我们在数据库中先添加一个数据"><a href="#我们在数据库中先添加一个数据" class="headerlink" title="我们在数据库中先添加一个数据"></a>我们在数据库中先添加一个数据</h4><p><img src="/images/数据库事务并发访问中的问题及隔离机制/A7BC620F-9A19-4713-862D-B329006D7A2F.png" alt="这里写图片描述"></p><table><thead><tr><th style="text-align:left">模拟步骤</th></tr></thead><tbody><tr><td style="text-align:left">1. 首先我们新建两个控制台来模仿两个不同的事务并在两个控制台都执行下面的语句，并将事务隔离级别都改为<code>READ_UNCOMMITTED</code></td></tr><tr><td style="text-align:left">2. 我们在控制台1中使用<code>start transaction;</code>来开始我们的事务</td></tr><tr><td style="text-align:left">3. 我们使用<code>select * from learn_sql.learn_sql where id = 1;</code>此时我们查询到的money为初值300.</td></tr><tr><td style="text-align:left">4. 此时我们使用<code>update learn_sql.learn_sql set money = 400 where id = 1;</code>执行过此命令之后我们再执行<code>select * from learn_sql.learn_sql where id = 1;</code>会发现此时的money已经改成了400.</td></tr><tr><td style="text-align:left">5. 我们使用控制台2使用<code>select * from learn_sql.learn_sql where id = 1;</code>查询可知此时的money已经变成了还未提交的400元。</td></tr><tr><td style="text-align:left">6.若此时控制台1未使用<code>commit</code>进行提交，而是<code>rollback</code>进行事务回滚，则此时就是发生了控制台2读取了未成功提交的数据。</td></tr></tbody></table><blockquote><p>解决办法：使用下面的sql语句将事务隔离级别改为<code>READ_COMMITTED</code>，此时如果我们执行步骤4则会发现，控制台2获取的并不是400而是300。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level read committed;#修改隔离界别为 只可读提交</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="3-不可重复读"><a href="#3-不可重复读" class="headerlink" title="3.不可重复读"></a>3.不可重复读</h3><h4 id="指事务1多次读取同一个数据，事务2在事务1多次读取过程中进行的修改提交，导致事务1多次读取的数据不同。"><a href="#指事务1多次读取同一个数据，事务2在事务1多次读取过程中进行的修改提交，导致事务1多次读取的数据不同。" class="headerlink" title="指事务1多次读取同一个数据，事务2在事务1多次读取过程中进行的修改提交，导致事务1多次读取的数据不同。"></a>指事务1多次读取同一个数据，事务2在事务1多次读取过程中进行的修改提交，导致事务1多次读取的数据不同。</h4><blockquote><p>如何解决：REPEATABLE-READ事务隔离级别以上可避免</p></blockquote><h4 id="下面我们开始模拟，首先我们先保证事务隔离级别为READ-COMMITTED"><a href="#下面我们开始模拟，首先我们先保证事务隔离级别为READ-COMMITTED" class="headerlink" title="下面我们开始模拟，首先我们先保证事务隔离级别为READ_COMMITTED"></a>下面我们开始模拟，首先我们先保证事务隔离级别为<code>READ_COMMITTED</code></h4><table><thead><tr><th style="text-align:left">模拟步骤</th></tr></thead><tbody><tr><td style="text-align:left">1.首先我们在控制台1中使用<code>start transaction;</code>开始事务，此时我们使用<code>select * from learn_sql.learn_sql where id = 1;</code>可知money为300，然后我们使用<code>update learn_sql.learn_sql set money = money + 100 where id = 1;</code></td></tr><tr><td style="text-align:left">2.此时我们使用控制台2中先使用<code>start transaction;</code>开始事务，再使用<code>select * from learn_sql.learn_sql where id = 1;</code>发现money为300。</td></tr><tr><td style="text-align:left">3.接着我们在控制台1使用<code>commit;</code>提交修改。这是我们控制台2中使用<code>select * from learn_sql.learn_sql where id = 1;</code>我们突然发现原来的300，突然变成了400.这就是发生了不可重复读的问题了，即多次查询结果不一致</td></tr></tbody></table><blockquote><p>解决办法：我们使用下面的sql语句将食物隔离级别修改为<code>REPEATABLE-READ</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这时我们在步骤3中获取的money仍然为300，但是如果我们使用<code>update learn_sql.learn_sql set money = money + 100 where id = 1;</code>后再查询会发现money不是我们最后一步查询的300+100=400元，而是我们控制台1提交之后的400+100=500元，这就防止了在一次事务中多次读不一致，同时可以保证该食物提交结果正确。</p></blockquote><hr><h3 id="4-幻读"><a href="#4-幻读" class="headerlink" title="4.幻读"></a>4.幻读</h3><h4 id="指事务1读取与搜索条件相匹配的若干行，事务2以插入或删除行的方式来修改事务1的结果集。"><a href="#指事务1读取与搜索条件相匹配的若干行，事务2以插入或删除行的方式来修改事务1的结果集。" class="headerlink" title="指事务1读取与搜索条件相匹配的若干行，事务2以插入或删除行的方式来修改事务1的结果集。"></a>指事务1读取与搜索条件相匹配的若干行，事务2以插入或删除行的方式来修改事务1的结果集。</h4><blockquote><p>如何解决：SERIALIZABLE事务隔离级别可避免</p></blockquote><h4 id="下面我们开始模拟，首先我们先保证事务隔离级别为READ-COMMITTED由于mysql在技术层面上避免了REPEATABLE-READ隔离级别下发生，但是理论上并不可避免"><a href="#下面我们开始模拟，首先我们先保证事务隔离级别为READ-COMMITTED由于mysql在技术层面上避免了REPEATABLE-READ隔离级别下发生，但是理论上并不可避免" class="headerlink" title="下面我们开始模拟，首先我们先保证事务隔离级别为READ_COMMITTED由于mysql在技术层面上避免了REPEATABLE-READ隔离级别下发生，但是理论上并不可避免"></a>下面我们开始模拟，首先我们先保证事务隔离级别为<code>READ_COMMITTED</code>由于mysql在技术层面上避免了<code>REPEATABLE-READ</code>隔离级别下发生，但是理论上并不可避免</h4><table><thead><tr><th style="text-align:left">模拟步骤</th></tr></thead><tbody><tr><td style="text-align:left">1.首先我们在控制台1中使用<code>start transaction;</code>开始事务，此时我们使用<code>select * from learn_sql.learn_sql;</code>可得到一条数据。</td></tr><tr><td style="text-align:left">2.此时我们使用控制台2中先使用<code>start transaction;</code>开始事务，再使用<code>insert into learn_sql.learn_sql (id,money);</code>接着我们在控制台2使用<code>commit;</code>提交修改。</td></tr><tr><td style="text-align:left">3.接着我们在控制台1使用<code>update learn_sql.learn_sql set money = 1000;</code>我们会发现这个时候我们修改的语句条数为两句，这与我们之前查询的一条不同，这就是幻读。</td></tr></tbody></table><blockquote><p>解决办法：把事务隔离级别修改为<code>SERIALIZABLE</code><br>之后我们会发现在执行第二步是会被lock住无法操作，从而避免了幻读。</p></blockquote><hr><h3 id="5-总结："><a href="#5-总结：" class="headerlink" title="5.总结："></a>5.总结：</h3><table><thead><tr><th>事务隔离级别</th><th>更新丢失</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读</td><td>避免</td><td>发生</td><td>发生</td><td>发生</td></tr><tr><td>已提交读</td><td>避免</td><td>避免</td><td>发生</td><td>发生</td></tr><tr><td>可重复读</td><td>避免</td><td>避免</td><td>避免</td><td>发生</td></tr><tr><td>串行化</td><td>避免</td><td>避免</td><td>避免</td><td>避免</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      本文是在看了慕课相关课程后进行的数据库锁模块的事务并发访问产生的问题以及事务隔离机制的相关总结
    
    </summary>
    
      <category term="数据库" scheme="http://suiwo.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="锁" scheme="http://suiwo.xyz/tags/%E9%94%81/"/>
    
      <category term="数据库" scheme="http://suiwo.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="事务" scheme="http://suiwo.xyz/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络相关知识总结之HTTP</title>
    <link href="http://suiwo.xyz/2019/02/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E4%B9%8BHTTP/"/>
    <id>http://suiwo.xyz/2019/02/01/计算机网络相关知识总结之HTTP/</id>
    <published>2019-02-01T07:12:17.000Z</published>
    <updated>2019-04-13T02:26:26.762Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-HTTP简介"><a href="#1-HTTP简介" class="headerlink" title="1.HTTP简介"></a>1.HTTP简介</h4><h6 id="HTTP协议（HyperText-Transfer-Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。HTTP是一个基于TCP-IP通信协议来传递数据（HTML-文件-图片文件-查询结果等）。"><a href="#HTTP协议（HyperText-Transfer-Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。HTTP是一个基于TCP-IP通信协议来传递数据（HTML-文件-图片文件-查询结果等）。" class="headerlink" title="HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。"></a>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</h6><h6 id="HTTP三点注意事项："><a href="#HTTP三点注意事项：" class="headerlink" title="HTTP三点注意事项："></a>HTTP三点注意事项：</h6><blockquote><p>1.HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>2.HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。<br>3.HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p></blockquote><hr><h4 id="2-HTTP消息结构"><a href="#2-HTTP消息结构" class="headerlink" title="2.HTTP消息结构"></a>2.HTTP消息结构</h4><h6 id="客户端请求消息：客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request-line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。"><a href="#客户端请求消息：客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request-line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。" class="headerlink" title="客户端请求消息：客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。"></a>客户端请求消息：客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。</h6><p><img src="/images/计算机网络相关知识总结之HTTP/2012072810301161.png" alt="这里写图片描述"><br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/hello.txt</span> HTTP/1.1</span><br><span class="line"><span class="attribute">User-Agent</span>: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3</span><br><span class="line"><span class="attribute">Host</span>: www.example.com</span><br><span class="line"><span class="attribute">Accept-Language</span>: en, mi</span><br></pre></td></tr></table></figure></p><h5 id="服务器响应消息：HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。"><a href="#服务器响应消息：HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。" class="headerlink" title="服务器响应消息：HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。"></a>服务器响应消息：HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</h5><p><img src="/images/计算机网络相关知识总结之HTTP/httpmessage.jpg" alt="这里写图片描述"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span>: Mon, 27 Jul 2009 12:28:53 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache</span><br><span class="line"><span class="attribute">Last-Modified</span>: Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class="line"><span class="attribute">ETag</span>: "34aa387-d-1568eb00"</span><br><span class="line"><span class="attribute">Accept-Ranges</span>: bytes</span><br><span class="line"><span class="attribute">Content-Length</span>: 51</span><br><span class="line"><span class="attribute">Vary</span>: Accept-Encoding</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br></pre></td></tr></table></figure><hr><h4 id="3-HTTP请求方法"><a href="#3-HTTP请求方法" class="headerlink" title="3.HTTP请求方法"></a>3.HTTP请求方法</h4><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>2</td><td>HEAD</td><td>类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>6</td><td>CONNECT</td><td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr></tbody></table><hr><h4 id="4-HTTP常见状态码"><a href="#4-HTTP常见状态码" class="headerlink" title="4.HTTP常见状态码"></a>4.HTTP常见状态码</h4><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>描述</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>正常返回信息</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求有语法错误，不能被服务器所理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求未经授权，这个状态代码必须和WWW-Authenticate报头域- - 起使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器收到请求，但是拒绝提供服务</td></tr><tr><td>404</td><td>Not Found</td><td>请求资源不存在，eg, 输入了错误的URL</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器发生不可预期的错误</td></tr><tr><td>503</td><td>Server Unavailable</td><td>服务器当前不能处理客户端的请求，一段时间后可能恢复正常</td></tr></tbody></table><hr><h4 id="5-HTTP中POST与GET的区别"><a href="#5-HTTP中POST与GET的区别" class="headerlink" title="5.HTTP中POST与GET的区别"></a>5.HTTP中POST与GET的区别</h4><p>从三个层面来解答：</p><blockquote><p>1.从Http报文层面: GET将请求信息放在URL , POST放在报文体中<br>2.数据库层面: CET符合幂等性和安全性, POST不符合<br>3.其他层面: GET可以被缓存、被存储,而POST不行</p></blockquote>]]></content>
    
    <summary type="html">
    
      本文是听了慕课计网相关课程后参考了菜鸟教程进行的总结
    
    </summary>
    
      <category term="计算机网络" scheme="http://suiwo.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://suiwo.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>前后端通过Json传数据，并将Json转化成实体类</title>
    <link href="http://suiwo.xyz/2019/01/23/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%BF%87Json%E4%BC%A0%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E5%B0%86Json%E8%BD%AC%E5%8C%96%E6%88%90%E5%AE%9E%E4%BD%93%E7%B1%BB/"/>
    <id>http://suiwo.xyz/2019/01/23/前后端通过Json传数据，并将Json转化成实体类/</id>
    <published>2019-01-23T12:18:38.000Z</published>
    <updated>2019-01-23T12:50:48.140Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>今天尝试着用thymeleaf写马上就要使用的计算机基础知识大赛的比赛系统，然后卡在如何将多个对象通过form表单发送给后端，最后没有找到比较好的办法，只能使用js将需要发送的数据转化成Json然后使用ajax发送请求。然后在后台在将数据转化成实体类</p></blockquote><h6 id="首先我们的实体类如下"><a href="#首先我们的实体类如下" class="headerlink" title="首先我们的实体类如下:"></a>首先我们的实体类如下:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njupt.sacc.cbkc.problem.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProblemResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(Integer pid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ProblemResult&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", uid="</span> + uid +</span><br><span class="line">                <span class="string">", pid="</span> + pid +</span><br><span class="line">                <span class="string">", result='"</span> + result + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="然后我们的目标就是前端向后端发送多个ProblemResult对象，然后在进行处理，首先我们看前端的实现方案（此时后端向前端发送的是一个List）："><a href="#然后我们的目标就是前端向后端发送多个ProblemResult对象，然后在进行处理，首先我们看前端的实现方案（此时后端向前端发送的是一个List）：" class="headerlink" title="然后我们的目标就是前端向后端发送多个ProblemResult对象，然后在进行处理，首先我们看前端的实现方案（此时后端向前端发送的是一个List）："></a>然后我们的目标就是前端向后端发送多个ProblemResult对象，然后在进行处理，首先我们看前端的实现方案（此时后端向前端发送的是一个List<problem>）：</problem></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span> xmlns:th=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="http:/</span><span class="regexp">/apps.bdimg.com/</span>libs/jquery/<span class="number">2.1</span><span class="number">.4</span>/jquery.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;div th:each="</span>problem : $&#123;problems&#125;<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;span th:text="</span>$&#123;problem.id&#125;<span class="string">"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;form th:object="</span>$&#123;problem&#125;<span class="string">" th:if="</span>$&#123;problem.isSingle == <span class="number">1</span>&#125;<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>radio<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.aOption&#125;<span class="string">" value="</span>a<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>radio<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.bOption&#125;<span class="string">" value="</span>b<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>radio<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.cOption&#125;<span class="string">" value="</span>c<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>radio<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.dOption&#125;<span class="string">" value="</span>d<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;form th:object="</span>$&#123;problem&#125;<span class="string">" th:if="</span>$&#123;problem.isSingle == <span class="number">0</span>&#125;<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>checkbox<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.aOption&#125;<span class="string">" value="</span>a<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>checkbox<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.bOption&#125;<span class="string">" value="</span>b<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>checkbox<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.cOption&#125;<span class="string">" value="</span>c<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>checkbox<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.dOption&#125;<span class="string">" value="</span>d<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;button name="</span>save<span class="string">" onclick="</span>loadXMLDoc(name)<span class="string">"&gt;保存&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;button name="</span>push<span class="string">" onclick="</span>loadXMLDoc(name)<span class="string">"&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    //将答案转化成Json格式</span></span><br><span class="line"><span class="string">    //name用来判断是保存操作还是提交操作</span></span><br><span class="line"><span class="string">    function f(name) &#123;</span></span><br><span class="line"><span class="string">        var json = [];</span></span><br><span class="line"><span class="string">        //[[$[count]]]为thymeleaf中js获取值的方法</span></span><br><span class="line"><span class="string">        var count = [[$&#123;count&#125;]];</span></span><br><span class="line"><span class="string">        for (var i = 1; i &lt;= count; i++) &#123;</span></span><br><span class="line"><span class="string">            var type = document.getElementsByName(i).item(0).getAttribute("</span>type<span class="string">");</span></span><br><span class="line"><span class="string">            //js获取单选框的值</span></span><br><span class="line"><span class="string">            if (type == "</span>radio<span class="string">") &#123;</span></span><br><span class="line"><span class="string">                var radio = document.getElementsByName(i);</span></span><br><span class="line"><span class="string">                var result = "</span><span class="string">";</span></span><br><span class="line"><span class="string">                for (var j = 0; j &lt; radio.length; j++) &#123;</span></span><br><span class="line"><span class="string">                    if (radio[j].checked) &#123;</span></span><br><span class="line"><span class="string">                        result = radio[j].value;</span></span><br><span class="line"><span class="string">                        break;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125; else &#123;//js获取多选框的值</span></span><br><span class="line"><span class="string">                var checkbox = document.getElementsByName(i);</span></span><br><span class="line"><span class="string">                var result = "</span><span class="string">";</span></span><br><span class="line"><span class="string">                for (var j = 0; j &lt; checkbox.length; j++) &#123;</span></span><br><span class="line"><span class="string">                    if (checkbox[j].checked)</span></span><br><span class="line"><span class="string">                        result = result + checkbox[j].value;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            var row = &#123;"</span>pid<span class="string">": i, "</span>result<span class="string">": result&#125;;</span></span><br><span class="line"><span class="string">            json.push(row);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return &#123;"</span>type<span class="string">":name,"</span>data<span class="string">":json&#125;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    //发送ajax请求</span></span><br><span class="line"><span class="string">    function loadXMLDoc(name) &#123;</span></span><br><span class="line"><span class="string">        var xmlhttp;</span></span><br><span class="line"><span class="string">        if (window.XMLHttpRequest) &#123;</span></span><br><span class="line"><span class="string">            //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line"><span class="string">            xmlhttp = new XMLHttpRequest();</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            // IE6, IE5 浏览器执行代码</span></span><br><span class="line"><span class="string">            xmlhttp = new ActiveXObject("</span>Microsoft.XMLHTTP<span class="string">");</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        xmlhttp.onreadystatechange = function () &#123;</span></span><br><span class="line"><span class="string">            if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) &#123;</span></span><br><span class="line"><span class="string">                console.log("</span>successful<span class="string">");</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        xmlhttp.open("</span>POST<span class="string">", "</span>/test<span class="string">", true);</span></span><br><span class="line"><span class="string">        xmlhttp.setRequestHeader("</span>Content-Type<span class="string">", "</span>application/json<span class="string">");</span></span><br><span class="line"><span class="string">        var data = f(name);</span></span><br><span class="line"><span class="string">        xmlhttp.send(JSON.stringify(data));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h6 id="传送的数据示例大致如下"><a href="#传送的数据示例大致如下" class="headerlink" title="传送的数据示例大致如下:"></a>传送的数据示例大致如下:</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"submit"</span>:[</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">1</span>,<span class="attr">"result"</span>:<span class="string">"a"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">2</span>,<span class="attr">"result"</span>:<span class="string">"ab"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">3</span>,<span class="attr">"result"</span>:<span class="string">""</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">4</span>,<span class="attr">"result"</span>:<span class="string">"abcd"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">5</span>,<span class="attr">"result"</span>:<span class="string">"a"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">6</span>,<span class="attr">"result"</span>:<span class="string">"d"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">7</span>,<span class="attr">"result"</span>:<span class="string">"b"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">8</span>,<span class="attr">"result"</span>:<span class="string">"c"</span>&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"type"</span>:<span class="string">"save"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="之后我们看后端如何获取数据并将数据转化成实体类："><a href="#之后我们看后端如何获取数据并将数据转化成实体类：" class="headerlink" title="之后我们看后端如何获取数据并将数据转化成实体类："></a>之后我们看后端如何获取数据并将数据转化成实体类：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">submit</span><span class="params">(@RequestBody JSONObject jsonObject)</span></span>&#123;</span><br><span class="line">        <span class="comment">//通过key获取前端发送的json的数组</span></span><br><span class="line">        JSONArray problemResults = jsonObject.getJSONArray(<span class="string">"data"</span>);</span><br><span class="line">        <span class="comment">//通过key获取前端发送的json中的type字段</span></span><br><span class="line">        String submitType = String.valueOf(jsonObject.get(<span class="string">"type"</span>));</span><br><span class="line">        List&lt;ProblemResult&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//通过遍历将json数据中的数据转化成实体类</span></span><br><span class="line">        <span class="keyword">for</span> (Object problemResult : problemResults) &#123;</span><br><span class="line">            <span class="comment">//会用JSONObject包中的函数将字符串转化成实体类</span></span><br><span class="line">            ProblemResult result = (ProblemResult) JSONObject.toJavaObject((JSONObject) problemResult, ProblemResult.class);</span><br><span class="line">            list.add(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>经过上面的操作，我们就成功的完成了前端向后端发送多个对象，整体思想大概就是先把需要传的所有对象看成一个数组，然后传到后端之后再对json数据进行解析，然后获取数据中的json字符串，然后通过json库中的函数将json字符串转化成实体类，全部完成</p></blockquote><h5 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h5><blockquote><p>阿里巴巴的JSONObject对象转换 <a href="https://blog.csdn.net/a990914093/article/details/81217581" target="_blank" rel="noopener">https://blog.csdn.net/a990914093/article/details/81217581</a><br>JSONObject如何转换成实体类型<br><a href="https://blog.csdn.net/m0_38129335/article/details/80047034" target="_blank" rel="noopener">https://blog.csdn.net/m0_38129335/article/details/80047034</a><br>json数据与实体类之间的相互转换<br><a href="https://blog.csdn.net/nandao158/article/details/71122851" target="_blank" rel="noopener">https://blog.csdn.net/nandao158/article/details/71122851</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文是在尝试集成Springboot与Thymleaf是在前后端数据交互时遇到的问题，以及解决方案
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
      <category term="Thymeleaf" scheme="http://suiwo.xyz/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>springboot集成MyBatis</title>
    <link href="http://suiwo.xyz/2018/11/27/springboot%E9%9B%86%E6%88%90MyBatis/"/>
    <id>http://suiwo.xyz/2018/11/27/springboot集成MyBatis/</id>
    <published>2018-11-27T09:15:37.000Z</published>
    <updated>2018-11-27T14:52:29.348Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><blockquote><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p></blockquote><hr><h3 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h3><h5 id="使用idea创建空项目并记得选择web，mysql，mybaties这几个依赖即可，在此就不赘述了，创建后包依赖大致如下："><a href="#使用idea创建空项目并记得选择web，mysql，mybaties这几个依赖即可，在此就不赘述了，创建后包依赖大致如下：" class="headerlink" title="使用idea创建空项目并记得选择web，mysql，mybaties这几个依赖即可，在此就不赘述了，创建后包依赖大致如下："></a>使用idea创建空项目并记得选择web，mysql，mybaties这几个依赖即可，在此就不赘述了，创建后包依赖大致如下：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="三、在yml配置中添加相关配置"><a href="#三、在yml配置中添加相关配置" class="headerlink" title="三、在yml配置中添加相关配置"></a>三、在yml配置中添加相关配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后的填写mybatis的mapper书写路径</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><hr><h3 id="四、创建一个实体类"><a href="#四、创建一个实体类" class="headerlink" title="四、创建一个实体类"></a>四、创建一个实体类</h3><p>SysUserEntity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gausscode.calo.user.entity;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String loginName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tel;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String picUrl;</span><br><span class="line">    <span class="keyword">private</span> String siteId;</span><br><span class="line">    <span class="keyword">private</span> Date createDate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> createBy;</span><br><span class="line">    <span class="keyword">private</span> Date updateDate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> updateId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> delFlag;</span><br><span class="line">    <span class="keyword">private</span> String remarks;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoginName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginName</span><span class="params">(String loginName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loginName = loginName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTel</span><span class="params">(<span class="keyword">int</span> tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPicUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> picUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPicUrl</span><span class="params">(String picUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.picUrl = picUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSiteId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siteId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSiteId</span><span class="params">(String siteId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.siteId = siteId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateDate</span><span class="params">(Date createDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createDate = createDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCreateBy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateBy</span><span class="params">(<span class="keyword">int</span> createBy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createBy = createBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateDate</span><span class="params">(Date updateDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateDate = updateDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUpdateId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateId</span><span class="params">(<span class="keyword">int</span> updateId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateId = updateId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDelFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDelFlag</span><span class="params">(<span class="keyword">int</span> delFlag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delFlag = delFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRemarks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remarks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRemarks</span><span class="params">(String remarks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.remarks = remarks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SysUserEntity&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", loginName='"</span> + loginName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", tel="</span> + tel +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", picUrl='"</span> + picUrl + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", siteId='"</span> + siteId + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", createDate="</span> + createDate +</span><br><span class="line">                <span class="string">", createBy="</span> + createBy +</span><br><span class="line">                <span class="string">", updateDate="</span> + updateDate +</span><br><span class="line">                <span class="string">", updateId="</span> + updateId +</span><br><span class="line">                <span class="string">", delFlag="</span> + delFlag +</span><br><span class="line">                <span class="string">", remarks='"</span> + remarks + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="五、创建一个dao层，service层以及controller层"><a href="#五、创建一个dao层，service层以及controller层" class="headerlink" title="五、创建一个dao层，service层以及controller层"></a>五、创建一个dao层，service层以及controller层</h3><p>SysUserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gausscode.calo.user.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.gausscode.calo.user.entity.SysUserEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">SysUserEntity <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(SysUserEntity sysUserEntity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(SysUserEntity sysUserEntity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SysUserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gausscode.calo.user.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.gausscode.calo.user.service.SysUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SysUserService sysUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.insert().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sysUserService.delete();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"successful delete"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SysUserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gausscode.calo.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.gausscode.calo.user.dao.SysUserDao;</span><br><span class="line"><span class="keyword">import</span> cn.gausscode.calo.user.entity.SysUserEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SysUserDao sysUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserDao.get(id).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUserEntity <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SysUserEntity sysUserEntity = <span class="keyword">new</span> SysUserEntity();</span><br><span class="line">        sysUserEntity.setName(<span class="string">"name"</span>);</span><br><span class="line">        sysUserEntity.setLoginName(<span class="string">"loginName"</span>);</span><br><span class="line">        sysUserEntity.setEmail(<span class="string">"email"</span>);</span><br><span class="line">        sysUserEntity.setTel(<span class="number">123</span>);</span><br><span class="line">        sysUserEntity.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        sysUserEntity.setPicUrl(<span class="string">"pic_url"</span>);</span><br><span class="line">        sysUserEntity.setSiteId(<span class="string">"site_id"</span>);</span><br><span class="line">        SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        sysUserEntity.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">        sysUserEntity.setCreateBy(<span class="number">1</span>);</span><br><span class="line">        sysUserEntity.setDelFlag(<span class="number">1</span>);</span><br><span class="line">        sysUserEntity.setRemarks(<span class="string">"remarks"</span>);</span><br><span class="line">        sysUserDao.insert(sysUserEntity);</span><br><span class="line">        <span class="keyword">return</span> sysUserEntity;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sysUserDao.delete(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SysUserEntity sysUserEntity = <span class="keyword">new</span> SysUserEntity();</span><br><span class="line">        sysUserEntity.setId(<span class="number">1</span>);</span><br><span class="line">        sysUserEntity.setName(<span class="string">"name1"</span>);</span><br><span class="line">        sysUserEntity.setLoginName(<span class="string">"loginName1"</span>);</span><br><span class="line">        sysUserEntity.setEmail(<span class="string">"email1"</span>);</span><br><span class="line">        sysUserEntity.setTel(<span class="number">1231</span>);</span><br><span class="line">        sysUserEntity.setPassword(<span class="string">"password1"</span>);</span><br><span class="line">        sysUserEntity.setPicUrl(<span class="string">"pic_url1"</span>);</span><br><span class="line">        sysUserEntity.setSiteId(<span class="string">"site_id1"</span>);</span><br><span class="line">        SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss1"</span>);</span><br><span class="line">        sysUserEntity.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">        sysUserEntity.setCreateBy(<span class="number">11</span>);</span><br><span class="line">        sysUserEntity.setDelFlag(<span class="number">11</span>);</span><br><span class="line">        sysUserEntity.setRemarks(<span class="string">"remarks1"</span>);</span><br><span class="line">        sysUserDao.update(sysUserEntity);</span><br><span class="line">        <span class="keyword">return</span> sysUserDao.get(<span class="number">1</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="六、书写mybatis的mapper"><a href="#六、书写mybatis的mapper" class="headerlink" title="六、书写mybatis的mapper"></a>六、书写mybatis的mapper</h3><p>SysUserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.gausscode.calo.user.dao.SysUserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"get"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"cn.gausscode.calo.user.entity.SysUserEntity"</span>&gt;</span></span><br><span class="line">        select * from sys_user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"cn.gausscode.calo.user.entity.SysUserEntity"</span>&gt;</span></span><br><span class="line">        insert into sys_user (name,login_name,email,tel,password,pic_url,site_id,create_date,create_by,update_date,update_by,del_flag,remarks)</span><br><span class="line">                values (#&#123;name&#125;,#&#123;loginName&#125;,#&#123;email&#125;,#&#123;tel&#125;,#&#123;password&#125;,#&#123;picUrl&#125;,#&#123;siteId&#125;,#&#123;createDate&#125;,#&#123;createBy&#125;,#&#123;updateDate&#125;,#&#123;updateId&#125;,#&#123;delFlag&#125;,#&#123;remarks&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        update sys_user set del_flag = 0 where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.gausscode.calo.user.entity.SysUserEntity"</span>&gt;</span></span><br><span class="line">        update sys_user set</span><br><span class="line">            name = #&#123;name&#125;,</span><br><span class="line">            login_name = #&#123;loginName&#125;,</span><br><span class="line">            email = #&#123;email&#125;,</span><br><span class="line">            tel = #&#123;tel&#125;,</span><br><span class="line">            password = #&#123;password&#125;,</span><br><span class="line">            pic_url = #&#123;picUrl&#125;,</span><br><span class="line">            site_id = #&#123;siteId&#125;,</span><br><span class="line">            create_date = #&#123;createDate&#125;,</span><br><span class="line">            create_by = #&#123;createBy&#125;,</span><br><span class="line">            update_date = #&#123;updateDate&#125;,</span><br><span class="line">            update_by = #&#123;updateId&#125;,</span><br><span class="line">            del_flag = #&#123;delFlag&#125;,</span><br><span class="line">            remarks = #&#123;remarks&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="至此增删改查功能就完成了"><a href="#至此增删改查功能就完成了" class="headerlink" title="至此增删改查功能就完成了"></a>至此增删改查功能就完成了</h5><hr><h3 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h3><p>下面这个是整个项目的结构图</p><p><img src="/images/springboot集成MyBatis/ADDA67C5-4421-4F7C-826B-766735DF3EF2.png" alt="这里写图片描述"></p><blockquote><p>整体来说，mybatis可以大量减少了在sql代码部分的心思，特别是动态sql部分，简直太棒了，不过还没有完全学完，只是今天写了一个demo，之后会慢慢地把整个mybatis系统的学习总结一下</p></blockquote>]]></content>
    
    <summary type="html">
    
      MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Swagger报错:java.lang.NumberFormatException: For input string: &quot;&quot;</title>
    <link href="http://suiwo.xyz/2018/11/15/Swagger%E6%8A%A5%E9%94%99-java-lang-NumberFormatException-For-input-string/"/>
    <id>http://suiwo.xyz/2018/11/15/Swagger报错-java-lang-NumberFormatException-For-input-string/</id>
    <published>2018-11-15T02:17:14.000Z</published>
    <updated>2018-11-16T14:19:39.039Z</updated>
    
    <content type="html"><![CDATA[<h5 id="使用Swagger和Springfox，我们编写了REST-API，我们编写了更多可访问的API。当您运行该应用程序时，您可能会遇到一个奇怪的异常，如下所示："><a href="#使用Swagger和Springfox，我们编写了REST-API，我们编写了更多可访问的API。当您运行该应用程序时，您可能会遇到一个奇怪的异常，如下所示：" class="headerlink" title="使用Swagger和Springfox，我们编写了REST API，我们编写了更多可访问的API。当您运行该应用程序时，您可能会遇到一个奇怪的异常，如下所示："></a>使用Swagger和Springfox，我们编写了REST API，我们编写了更多可访问的API。当您运行该应用程序时，您可能会遇到一个奇怪的异常，如下所示：</h5><p><code>java.lang.NumberFormatException: For input string: &quot;&quot;</code></p><h5 id="这似乎是一个错误，所以你可以忽略那个。如果它让您烦恼，您可以随时更改该文件的日志记录级别，就像他们在该问题中提出的那样。您也可以在application-properties或application-yml中执行此操作："><a href="#这似乎是一个错误，所以你可以忽略那个。如果它让您烦恼，您可以随时更改该文件的日志记录级别，就像他们在该问题中提出的那样。您也可以在application-properties或application-yml中执行此操作：" class="headerlink" title="这似乎是一个错误，所以你可以忽略那个。如果它让您烦恼，您可以随时更改该文件的日志记录级别，就像他们在该问题中提出的那样。您也可以在application.properties或application.yml中执行此操作："></a>这似乎是一个错误，所以你可以忽略那个。如果它让您烦恼，您可以随时更改该文件的日志记录级别，就像他们在该问题中提出的那样。您也可以在<code>application.properties</code>或<code>application.yml</code>中执行此操作：</h5><blockquote><p>application.properties<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">logging.level.io.swagger.models.parameters.AbstractSerializableParameter=error</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>application.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">io.swagger.models.parameters.AbstractSerializableParameter:</span> <span class="string">error</span></span><br></pre></td></tr></table></figure><hr><p>参考文章：<a href="https://g00glen00b.be/documenting-rest-api-swagger-springfox/" target="_blank" rel="noopener">https://g00glen00b.be/documenting-rest-api-swagger-springfox/</a></p><hr>]]></content>
    
    <summary type="html">
    
      运行Springboot的时候总是会报错，本以为是那里写的有bug结果发现是Swagger出现的问题，只要把log等级修改一下即可
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
      <category term="Swagger" scheme="http://suiwo.xyz/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>Springboot集成Swagger2</title>
    <link href="http://suiwo.xyz/2018/11/14/Springboot%E9%9B%86%E6%88%90Swagger2/"/>
    <id>http://suiwo.xyz/2018/11/14/Springboot集成Swagger2/</id>
    <published>2018-11-14T12:52:33.000Z</published>
    <updated>2018-11-15T02:16:22.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Springboot集成Swagger2"><a href="#Springboot集成Swagger2" class="headerlink" title="Springboot集成Swagger2"></a>Springboot集成Swagger2</h2><hr><h4 id="一、介绍："><a href="#一、介绍：" class="headerlink" title="一、介绍："></a>一、介绍：</h4><blockquote><p>Swagger是一个功能强大且易于使用的API开发人员工具套件，适用于团队和个人，支持从整个API生命周期（从设计和文档到测试和部署）的开发。<br>Swagger由开源，免费和商用工具组成，允许任何人，从技术工程师到街头智能产品经理，构建每个人都喜欢的令人惊叹的API。<br>Swagger最初是作为2010年设计RESTful API的简单开源规范而开发的。开源工具如Swagger UI，Swagger Editor和Swagger Codegen也被开发用于更好地实现和可视化规范中定义的API。Swagger项目由规范和开源工具组成，非常受欢迎，创建了一个由社区驱动的工具组成的庞大生态系统。<br>2015年，Swagger项目被SmartBear Software收购。Swagger规范被捐赠给Linux基金会并重命名为OpenAPI规范以正式标准化REST API的描述方式。建立OpenAPI倡议是为了以公开和透明的方式指导美洲国家组织的发展。<br>从那以后，Swagger成为最受欢迎的工具套件，可以在API生命周期中充分利用OAS的强大功能。</p></blockquote><hr><h4 id="二、Springboot添加Swagger2依赖"><a href="#二、Springboot添加Swagger2依赖" class="headerlink" title="二、Springboot添加Swagger2依赖"></a>二、Springboot添加Swagger2依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="三、添加Swagger2配置文件"><a href="#三、添加Swagger2配置文件" class="headerlink" title="三、添加Swagger2配置文件"></a>三、添加Swagger2配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringFoxConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">apiDocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors</span><br><span class="line">                .basePackage(<span class="string">"你的controller包，如com.example.controller"</span>)).paths(PathSelectors.any())</span><br><span class="line">                .build().apiInfo(getApiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">getApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">"TITLE"</span>,</span><br><span class="line">                <span class="string">"DESCIPRION"</span>,</span><br><span class="line">                <span class="string">"VERSION"</span>,</span><br><span class="line">                <span class="string">"TEAMS OF SERVICE URL"</span>,</span><br><span class="line">                <span class="keyword">new</span> Contact(<span class="string">"NAME"</span>,<span class="string">"URL"</span>,<span class="string">"EMAIL"</span>),</span><br><span class="line">                <span class="string">"LICENSE"</span>,</span><br><span class="line">                <span class="string">"LICENSE URL"</span>,</span><br><span class="line">                Collections.emptyList()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="WebConfig用于访问静态资源"><a href="#WebConfig用于访问静态资源" class="headerlink" title="WebConfig用于访问静态资源"></a>WebConfig用于访问静态资源</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.CacheControl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line">nfiguration</span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS).cachePublic());</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS).cachePublic());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="四、添加注解"><a href="#四、添加注解" class="headerlink" title="四、添加注解"></a>四、添加注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForumController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * by zhangjia</span></span><br><span class="line"><span class="comment">     * 获取板块分页后页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"获取板块分页后页数"</span>,notes = <span class="string">"板块页数"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/pnum/&#123;fid&#125;/&#123;isDigest&#125;"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">pageNum</span><span class="params">(@CookieValue(defaultValue = <span class="string">"0"</span>)</span> <span class="keyword">int</span> uid,</span></span><br><span class="line"><span class="function">                            @<span class="title">CookieValue</span><span class="params">(defaultValue = <span class="string">""</span>)</span> String sid,</span></span><br><span class="line"><span class="function">                            @ApiParam @PathVariable <span class="keyword">int</span> fid,</span></span><br><span class="line"><span class="function">                            @ApiParam @PathVariable <span class="keyword">int</span> isDigest,</span></span><br><span class="line"><span class="function">                            @Autowired HttpServletRequest request) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> forumService.getPageNum(fid, isDigest);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="通过访问：http-localhost-8080-v2-api-docs-，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger-UI来生成一个可读性良好的api页面。"><a href="#通过访问：http-localhost-8080-v2-api-docs-，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger-UI来生成一个可读性良好的api页面。" class="headerlink" title="通过访问：http://localhost:8080/v2/api-docs ，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger UI来生成一个可读性良好的api页面。"></a>通过访问：<a href="http://localhost:8080/v2/api-docs" target="_blank" rel="noopener">http://localhost:8080/v2/api-docs</a> ，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger UI来生成一个可读性良好的api页面。</h5><h5 id="访问：http-localhost-8080-your-app-root-swagger-ui-html-就可以看到可读性较好的api文档页面。"><a href="#访问：http-localhost-8080-your-app-root-swagger-ui-html-就可以看到可读性较好的api文档页面。" class="headerlink" title="访问：http://localhost:8080/your-app-root/swagger-ui.html 就可以看到可读性较好的api文档页面。"></a>访问：<a href="http://localhost:8080/your-app-root/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/your-app-root/swagger-ui.html</a> 就可以看到可读性较好的api文档页面。</h5><p><img src="/images/Springboot集成Swagger2/20181114204922957.jpeg" alt="这里写图片描述"></p><hr><h4 id="五、常见注解介绍"><a href="#五、常见注解介绍" class="headerlink" title="五、常见注解介绍"></a>五、常见注解介绍</h4><p>Swagger通过注解表明该接口会生成文档，包括接口名、请求方法、参数、返回信息的等等。</p><blockquote><p>@Api：修饰整个类，描述Controller的作用<br>@ApiOperation：描述一个类的一个方法，或者说一个接口<br>@ApiParam：单个参数描述<br>@ApiModel：用对象来接收参数<br>@ApiProperty：用对象接收参数时，描述对象的一个字段<br>@ApiResponse：HTTP响应其中1个描述<br>@ApiResponses：HTTP响应整体描述<br>@ApiIgnore：使用该注解忽略这个API<br>@ApiError ：发生错误返回的信息<br>@ApiImplicitParam：一个请求参数<br>@ApiImplicitParams：多个请求参数</p></blockquote><hr><p>参考文章：<br><a href="https://blog.csdn.net/fansunion/article/details/51923720" target="_blank" rel="noopener">https://blog.csdn.net/fansunion/article/details/51923720</a><br><a href="https://blog.csdn.net/saytime/article/details/74937664" target="_blank" rel="noopener">https://blog.csdn.net/saytime/article/details/74937664</a><br><a href="https://blog.csdn.net/Phone_1070333541/article/details/80949040" target="_blank" rel="noopener">https://blog.csdn.net/Phone_1070333541/article/details/80949040</a></p>]]></content>
    
    <summary type="html">
    
      Swagger是一个功能强大且易于使用的API开发人员工具套件，适用于团队和个人，支持从整个API生命周期（从设计和文档到测试和部署）的开发。
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="Springboot" scheme="http://suiwo.xyz/tags/Springboot/"/>
    
  </entry>
  
</feed>
