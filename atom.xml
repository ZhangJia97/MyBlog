<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随我的博客</title>
  
  <subtitle>记录学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-24T11:31:46.257Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>随我</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉树以及链式二叉树的常见操作</title>
    <link href="http://yoursite.com/2018/04/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BB%A5%E5%8F%8A%E9%93%BE%E5%BC%8F%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/24/二叉树以及链式二叉树的常见操作/</id>
    <published>2018-04-24T11:29:41.000Z</published>
    <updated>2018-04-24T11:31:46.257Z</updated>
    
    <content type="html"><![CDATA[<h5 id="二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现"><a href="#二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现" class="headerlink" title="二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现"></a>二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现</h5><hr><hr><h1 id="一、二叉树的中的一些专有名词的解释："><a href="#一、二叉树的中的一些专有名词的解释：" class="headerlink" title="一、二叉树的中的一些专有名词的解释："></a>一、二叉树的中的一些专有名词的解释：</h1><h4 id="1-先序遍历-指先访问根节点，再先序遍历左子树，再先序遍历右子树"><a href="#1-先序遍历-指先访问根节点，再先序遍历左子树，再先序遍历右子树" class="headerlink" title="1.先序遍历:指先访问根节点，再先序遍历左子树，再先序遍历右子树"></a>1.先序遍历:指先访问根节点，再先序遍历左子树，再先序遍历右子树</h4><h4 id="2-中序遍历-指先中序遍历左子树，再访问根节点，再中序遍历右子树"><a href="#2-中序遍历-指先中序遍历左子树，再访问根节点，再中序遍历右子树" class="headerlink" title="2.中序遍历:指先中序遍历左子树，再访问根节点，再中序遍历右子树"></a>2.中序遍历:指先中序遍历左子树，再访问根节点，再中序遍历右子树</h4><h4 id="3-后序遍历-指先后序遍历左子树，再后序遍历右子树，再访问根节点"><a href="#3-后序遍历-指先后序遍历左子树，再后序遍历右子树，再访问根节点" class="headerlink" title="3.后序遍历:指先后序遍历左子树，再后序遍历右子树，再访问根节点"></a>3.后序遍历:指先后序遍历左子树，再后序遍历右子树，再访问根节点</h4><hr><h3 id="下面是郝斌老师上课时关于这三种遍历的视频截图"><a href="#下面是郝斌老师上课时关于这三种遍历的视频截图" class="headerlink" title="下面是郝斌老师上课时关于这三种遍历的视频截图"></a>下面是郝斌老师上课时关于这三种遍历的视频截图</h3><h4 id="先序遍历："><a href="#先序遍历：" class="headerlink" title="先序遍历："></a>先序遍历：</h4><p><img src="https://img-blog.csdn.net/20180424191123738?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20180424191141445?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h4 id="中序遍历："><a href="#中序遍历：" class="headerlink" title="中序遍历："></a>中序遍历：</h4><p><img src="https://img-blog.csdn.net/20180424191225539?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20180424191234502?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h4 id="后序遍历："><a href="#后序遍历：" class="headerlink" title="后序遍历："></a>后序遍历：</h4><p><img src="https://img-blog.csdn.net/2018042419130867?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20180424191317363?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><hr><hr><h1 id="二、通过先序与中序求后序以及通过中序与后序求先序"><a href="#二、通过先序与中序求后序以及通过中序与后序求先序" class="headerlink" title="二、通过先序与中序求后序以及通过中序与后序求先序"></a>二、通过先序与中序求后序以及通过中序与后序求先序</h1><h3 id="不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。"><a href="#不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。" class="headerlink" title="不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。"></a>不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。</h3><h4 id="1-在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点"><a href="#1-在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点" class="headerlink" title="1.在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点"></a>1.在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点</h4><h4 id="2-在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点"><a href="#2-在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点" class="headerlink" title="2.在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点"></a>2.在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点</h4><hr><h3 id="下面是郝斌老师关于求二叉树时的视频截图"><a href="#下面是郝斌老师关于求二叉树时的视频截图" class="headerlink" title="下面是郝斌老师关于求二叉树时的视频截图:"></a>下面是郝斌老师关于求二叉树时的视频截图:</h3><h4 id="已知先序中序求后序"><a href="#已知先序中序求后序" class="headerlink" title="已知先序中序求后序"></a>已知先序中序求后序</h4><p><img src="https://img-blog.csdn.net/20180424192130297?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p><img src="https://img-blog.csdn.net/20180424192147107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h4 id="已知中序后序求先序"><a href="#已知中序后序求先序" class="headerlink" title="已知中序后序求先序"></a>已知中序后序求先序</h4><p><img src="https://img-blog.csdn.net/20180424192224679?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><hr><hr><h2 id="三、链式二叉树的常见操作"><a href="#三、链式二叉树的常见操作" class="headerlink" title="三、链式二叉树的常见操作"></a>三、链式二叉树的常见操作</h2><h5 id="链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下"><a href="#链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下" class="headerlink" title="链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下:"></a>链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 该二叉树的树状图如下：</span></span><br><span class="line"><span class="comment">        A</span></span><br><span class="line"><span class="comment">      *   *</span></span><br><span class="line"><span class="comment">    B       C</span></span><br><span class="line"><span class="comment">           *</span></span><br><span class="line"><span class="comment">         D</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">              E</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//程序实现代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> * <span class="title">pLeft</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> * <span class="title">pRight</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="function">struct BTNode * <span class="title">createBTree</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//创建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>;<span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>;<span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>;<span class="comment">//后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> * <span class="title">pT</span> = <span class="title">createBTree</span>();</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"该二叉树的前序遍历为:\n"</span>);</span><br><span class="line">    PreTraverseBTree(pT);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n该二叉树的中序遍历为:\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n该二叉树的后序遍历为:\n"</span>);</span><br><span class="line">    PostTraverseBTree(pT);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct BTNode * <span class="title">createBTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BTNode * pA = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pB = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pC = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pD = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pE = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给树的每个节点添加数据</span></span><br><span class="line">    pA-&gt;data = <span class="string">'A'</span>;</span><br><span class="line">    pB-&gt;data = <span class="string">'B'</span>;</span><br><span class="line">    pC-&gt;data = <span class="string">'C'</span>;</span><br><span class="line">    pD-&gt;data = <span class="string">'D'</span>;</span><br><span class="line">    pE-&gt;data = <span class="string">'E'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给树的相关节点通过指针连接</span></span><br><span class="line">    pA-&gt;pLeft = pB;</span><br><span class="line">    pA-&gt;pRight = pC;</span><br><span class="line">    pB-&gt;pLeft = pB-&gt;pRight = <span class="literal">NULL</span>;</span><br><span class="line">    pC-&gt;pLeft = pD;</span><br><span class="line">    pC-&gt;pRight = <span class="literal">NULL</span>;</span><br><span class="line">    pD-&gt;pLeft = <span class="literal">NULL</span>;</span><br><span class="line">    pD-&gt;pRight = pE;</span><br><span class="line">    pE-&gt;pLeft = pE-&gt;pRight = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pT != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,pT-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pLeft != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PreTraverseBTree(pT-&gt;pLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pRight != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PreTraverseBTree(pT-&gt;pRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pT != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pLeft != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            InTraverseBTree(pT-&gt;pLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,pT-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pRight != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            InTraverseBTree(pT-&gt;pRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pT != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pLeft != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PostTraverseBTree(pT-&gt;pLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pRight != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PostTraverseBTree(pT-&gt;pRight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,pT-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后对二叉树的一些常见的问题以及代码进行的总结
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>汉诺塔递归问题</title>
    <link href="http://yoursite.com/2018/04/23/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/23/汉诺塔递归问题/</id>
    <published>2018-04-23T12:10:53.000Z</published>
    <updated>2018-04-23T12:12:02.533Z</updated>
    
    <content type="html"><![CDATA[<h6 id="汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题"><a href="#汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题" class="headerlink" title="汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题"></a>汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hannuota</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span><span class="comment">//指将A上的盘子借助B移到C</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     如果是1个盘子</span></span><br><span class="line"><span class="comment">     直接将A柱子上的盘子从A移到C</span></span><br><span class="line"><span class="comment">     否则</span></span><br><span class="line"><span class="comment">     先将A柱子上的n-1个盘子借助C移到B</span></span><br><span class="line"><span class="comment">     直接将A柱子上的盘子从A移到C</span></span><br><span class="line"><span class="comment">     最后将B柱子上的n-1个盘子借助A移到C</span></span><br><span class="line"><span class="comment">     最上面盘子为1最下面为n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"将编号为%d的盘子直接从%c柱子移到%c柱子\n"</span>, n, A, C);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hannuota(n<span class="number">-1</span>, A, C, B);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"将编号为%d的盘子直接从%c柱子移到%c柱子\n"</span>, n, A, C);</span><br><span class="line">        hannuota(n<span class="number">-1</span>, B, A, C);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要移动盘子的个数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);   </span><br><span class="line">    hannuota(n, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后对汉诺塔问题的代码记录
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="汉诺塔问题" scheme="http://yoursite.com/tags/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>循环队列的常见操作</title>
    <link href="http://yoursite.com/2018/04/22/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/22/循环队列的常见操作/</id>
    <published>2018-04-22T11:26:07.000Z</published>
    <updated>2018-04-23T12:10:09.336Z</updated>
    
    <content type="html"><![CDATA[<h6 id="与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear-1）-len-front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作"><a href="#与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear-1）-len-front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作" class="headerlink" title="与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear+1）% len = front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作"></a>与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear+1）% len = front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> * pBase;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Queue *)</span></span>;<span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">en_queue</span><span class="params">(Queue *,<span class="keyword">int</span>)</span></span>;<span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_queue</span><span class="params">(Queue *)</span></span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out_queue</span><span class="params">(Queue *)</span></span>;<span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(Queue *)</span></span>;<span class="comment">//释放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *)</span></span>;<span class="comment">//重置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Queue Q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入您需要的循环队列的长度:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(Q.len));</span><br><span class="line">    init(&amp;Q);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">1</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">2</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">3</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">4</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">5</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">6</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">7</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">8</span>);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    destroy(&amp;Q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p"</span>,Q.pBase);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Queue* pQ)</span></span>&#123;</span><br><span class="line">    pQ-&gt;pBase = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(pQ-&gt;len));</span><br><span class="line">    pQ-&gt;front = <span class="number">0</span>;</span><br><span class="line">    pQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">en_queue</span><span class="params">(Queue* pQ,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((pQ-&gt;rear+<span class="number">1</span>)%pQ-&gt;len == pQ-&gt;front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列已满!%d入队失败\n"</span>,val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pQ-&gt;pBase[pQ-&gt;rear] = val;</span><br><span class="line">        pQ-&gt;rear = (pQ-&gt;rear+<span class="number">1</span>) % pQ-&gt;len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_queue</span><span class="params">(Queue* pQ)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ-&gt;rear == pQ-&gt;front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = pQ-&gt;front;</span><br><span class="line">        <span class="keyword">while</span> (i != pQ-&gt;rear) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,pQ-&gt;pBase[i]);</span><br><span class="line">            i = (i+<span class="number">1</span>) % pQ-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out_queue</span><span class="params">(Queue *pQ)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ-&gt;rear == pQ-&gt;front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = pQ-&gt;pBase[pQ-&gt;front];</span><br><span class="line">        pQ-&gt;front = (pQ-&gt;front+<span class="number">1</span>) % pQ-&gt;len;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出队的元素值为:%d\n"</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(Queue *pQ)</span></span>&#123;</span><br><span class="line">    pQ-&gt;len=<span class="number">-1</span>;<span class="comment">//因为pQ不是动态分配的，所以不要咬释放变量pQ的空间</span></span><br><span class="line">    <span class="built_in">free</span>(pQ-&gt;pBase);<span class="comment">//释放动态分配的数组的空间</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *pQ)</span></span>&#123;</span><br><span class="line">    pQ-&gt;len = <span class="number">0</span>;</span><br><span class="line">    pQ-&gt;front = <span class="number">0</span>;</span><br><span class="line">    pQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现"><a href="#注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现" class="headerlink" title="注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现"></a>注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现</h6>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后对循环常见操作的代码的总结
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="循环队列" scheme="http://yoursite.com/tags/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>栈的常见操作</title>
    <link href="http://yoursite.com/2018/04/20/%E6%A0%88%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/20/栈的常见操作/</id>
    <published>2018-04-20T12:43:03.000Z</published>
    <updated>2018-04-23T12:09:59.487Z</updated>
    
    <content type="html"><![CDATA[<h5 id="今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。"><a href="#今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。" class="headerlink" title="今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。"></a>今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125; Node,* PNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span><span class="comment">//创建两个指针分别指向栈顶和栈底</span></span><br><span class="line">    PNode pTop;</span><br><span class="line">    PNode pBottom;<span class="comment">//总是指向栈的头节点</span></span><br><span class="line">&#125; Stack,* PStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PStack)</span></span>;<span class="comment">//初始化一个栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PStack,<span class="keyword">int</span>)</span></span>;<span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PStack)</span></span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PStack,<span class="keyword">int</span>*)</span></span>;<span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PStack)</span></span>;<span class="comment">//重置栈中的数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    init(&amp;S);</span><br><span class="line">    push(&amp;S,<span class="number">1</span>);</span><br><span class="line">    push(&amp;S,<span class="number">2</span>);</span><br><span class="line">    push(&amp;S,<span class="number">3</span>);</span><br><span class="line">    push(&amp;S,<span class="number">4</span>);</span><br><span class="line">    push(&amp;S,<span class="number">5</span>);</span><br><span class="line">    push(&amp;S,<span class="number">6</span>);</span><br><span class="line">    traverse(&amp;S);</span><br><span class="line">    pop(&amp;S,&amp;val);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pop的值为%d\n"</span>,val);</span><br><span class="line">    traverse(&amp;S);</span><br><span class="line">    clear(&amp;S);</span><br><span class="line">    traverse(&amp;S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PStack pS)</span></span>&#123;</span><br><span class="line">    pS-&gt;pTop = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(pS == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pS-&gt;pBottom = pS-&gt;pTop;</span><br><span class="line">        pS-&gt;pBottom-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PStack pS,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;data  = val;</span><br><span class="line">    pNew-&gt;pNext = pS-&gt;pTop;</span><br><span class="line">    pS-&gt;pTop = pNew;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PStack pS)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop == pS-&gt;pBottom)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode p = pS-&gt;pTop;</span><br><span class="line">        <span class="keyword">while</span> (p != pS-&gt;pBottom) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">            p = p-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PStack pS,<span class="keyword">int</span>* val)</span></span>&#123;<span class="comment">//这里的int *val是为了让用户知道pop的数据是什么</span></span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop == pS-&gt;pBottom)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        *val = pS-&gt;pTop-&gt;data;</span><br><span class="line">        PNode p = pS-&gt;pTop;</span><br><span class="line">        pS-&gt;pTop = pS-&gt;pTop-&gt;pNext;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PStack pS)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop == pS-&gt;pBottom)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode p = pS-&gt;pTop;</span><br><span class="line">        PNode q;</span><br><span class="line">        <span class="keyword">while</span> (p != pS-&gt;pBottom) &#123;</span><br><span class="line">            q = p;</span><br><span class="line">            p = p-&gt;pNext;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            q = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pS-&gt;pTop = pS-&gt;pBottom;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"已clear成功!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢-°ω°-ﾉ”"><a href="#注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢-°ω°-ﾉ”" class="headerlink" title="注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢(°ω°)ﾉ”"></a>注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢(°ω°)ﾉ”</h5>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构的课程后对栈常见操作的代码的总结
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>链表的常见操作</title>
    <link href="http://yoursite.com/2018/04/19/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/04/19/链表的常见操作/</id>
    <published>2018-04-19T13:16:35.000Z</published>
    <updated>2018-04-23T12:09:47.931Z</updated>
    
    <content type="html"><![CDATA[<h6 id="这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下："><a href="#这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下：" class="headerlink" title="这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下："></a>这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125; Node,*PNode;</span><br><span class="line"><span class="function">PNode <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//创建链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNode)</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_empty</span><span class="params">(PNode)</span></span>;<span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNode)</span></span>;<span class="comment">//判断链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_list</span><span class="params">(PNode,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;<span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(PNode,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;<span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNode)</span></span>;<span class="comment">//对链表进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PNode pHead = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    pHead = create_list();</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表的长度为%d\n"</span>,len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要插入的位置以及数值:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;pos,&amp;val);</span><br><span class="line">    insert_list(pHead, pos, &amp;val);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要删除的位置!\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos);</span><br><span class="line">    delete_list(pHead, pos, &amp;val);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    sort_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"排序后的链表数据如下:"</span>);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PNode <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    </span><br><span class="line">    PNode pHead = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(pHead == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PNode pTail = pHead;<span class="comment">//这里是创建一个指向尾节点的变量</span></span><br><span class="line">    pTail-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要生成的链表的节点数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个节点的值:\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</span><br><span class="line">        </span><br><span class="line">        PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pNew-&gt;data = val;</span><br><span class="line">        pTail-&gt;pNext = pNew;</span><br><span class="line">        pNew-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">        pTail = pNew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pHead;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    PNode p = pHead-&gt;pNext;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表中的数据为:"</span>);</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_empty</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pHead-&gt;pNext == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该链表为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该链表不为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    PNode p = pHead-&gt;pNext;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_list</span><span class="params">(PNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span>* val)</span></span>&#123;</span><br><span class="line">    PNode p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; i&lt;pos<span class="number">-1</span>) &#123;<span class="comment">//使指针最后指向需要插入的节点的前一个节点</span></span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;pos<span class="number">-1</span> || p==<span class="literal">NULL</span>)&#123;<span class="comment">//当该节点为空，则说明该节点为尾节点的下一个节点，即输入不合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入不正确!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"动态分配内存失败!\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pNew-&gt;data = *val;</span><br><span class="line">            pNew-&gt; pNext = p-&gt;pNext;</span><br><span class="line">            p-&gt;pNext = pNew;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(PNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span>* val)</span></span>&#123;</span><br><span class="line">    PNode p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;pNext != <span class="literal">NULL</span> &amp;&amp; i&lt;pos<span class="number">-1</span>) &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;pos<span class="number">-1</span> || p-&gt;pNext == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入不正确!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode q = p-&gt;pNext;</span><br><span class="line">        *val = p-&gt;pNext-&gt;data;</span><br><span class="line">        p-&gt;pNext = p-&gt;pNext-&gt;pNext;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;<span class="comment">//将q中的野指针赋值为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除成功，删除的节点值为%d"</span>,*val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNode pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    PNode p, q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>,p=pHead-&gt;pNext; i&lt;len<span class="number">-1</span>; i++,p=p-&gt;pNext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>,q=p-&gt;pNext; j&lt;len; j++,q=q-&gt;pNext)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)  <span class="comment">//类似于数组中的:  a[i] &gt; a[j]</span></span><br><span class="line">            &#123;</span><br><span class="line">                t = p-&gt;data;<span class="comment">//类似于数组中的:  t = a[i];</span></span><br><span class="line">                p-&gt;data = q-&gt;data; <span class="comment">//类似于数组中的:  a[i] = a[j];</span></span><br><span class="line">                q-&gt;data = t; <span class="comment">//类似于数组中的:  a[j] = t;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。"><a href="#注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。" class="headerlink" title="注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。"></a>注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。</h6>]]></content>
    
    <summary type="html">
    
      本文是在观看了郝斌老师的数据结构课程后对链表常见操作的代码的总结
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何使用github+hexo搭建一个博客</title>
    <link href="http://yoursite.com/2018/04/12/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/04/12/如何使用github+hexo搭建一个博客/</id>
    <published>2018-04-12T12:14:06.000Z</published>
    <updated>2018-04-16T13:08:51.205Z</updated>
    
    <content type="html"><![CDATA[<p>本文章是查阅了一下两个博客文章后所做的总结：<br><a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a><br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p><h3 id="一、配置环境以及准备"><a href="#一、配置环境以及准备" class="headerlink" title="一、配置环境以及准备"></a>一、配置环境以及准备</h3><h4 id="1-安装并配置node-js以及git"><a href="#1-安装并配置node-js以及git" class="headerlink" title="1.安装并配置node.js以及git"></a>1.安装并配置node.js以及git</h4><h4 id="2-在github中新建一个项目（记得点击添加README，项目命最好是“github用户名-github-io”）"><a href="#2-在github中新建一个项目（记得点击添加README，项目命最好是“github用户名-github-io”）" class="headerlink" title="2.在github中新建一个项目（记得点击添加README，项目命最好是“github用户名.github.io”）"></a>2.在github中新建一个项目（记得点击添加README，项目命最好是“github用户名.github.io”）</h4><h4 id="3-在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。"><a href="#3-在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。" class="headerlink" title="3.在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。"></a>3.在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。</h4><h4 id="4-在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo"><a href="#4-在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo" class="headerlink" title="4.在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo"></a>4.在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><h4 id="5-使用下面的命令查看是否安装成功"><a href="#5-使用下面的命令查看是否安装成功" class="headerlink" title="5.使用下面的命令查看是否安装成功"></a>5.使用下面的命令查看是否安装成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h4 id="6-输入下面的命令初始化文件夹"><a href="#6-输入下面的命令初始化文件夹" class="headerlink" title="6.输入下面的命令初始化文件夹"></a>6.输入下面的命令初始化文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4 id="7-输入下面的命令安装所需要的组件"><a href="#7-输入下面的命令安装所需要的组件" class="headerlink" title="7.输入下面的命令安装所需要的组件"></a>7.输入下面的命令安装所需要的组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="8-输入下面的命令首次体验hexo"><a href="#8-输入下面的命令首次体验hexo" class="headerlink" title="8.输入下面的命令首次体验hexo"></a>8.输入下面的命令首次体验hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="9-输入下面的命令开启服务器（若端口被占用则使用-hexo-server-p-端口号-）来改变端口号"><a href="#9-输入下面的命令开启服务器（若端口被占用则使用-hexo-server-p-端口号-）来改变端口号" class="headerlink" title="9.输入下面的命令开启服务器（若端口被占用则使用 hexo server -p 端口号 ）来改变端口号"></a>9.输入下面的命令开启服务器（若端口被占用则使用 <code>hexo server -p 端口号</code> ）来改变端口号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180413134226239?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQyMDg1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="出现该页面则说明成功了"><a href="#出现该页面则说明成功了" class="headerlink" title="出现该页面则说明成功了"></a>出现该页面则说明成功了</h5><h4 id="10-将Hexo与github-page联系起来"><a href="#10-将Hexo与github-page联系起来" class="headerlink" title="10.将Hexo与github page联系起来"></a>10.将Hexo与github page联系起来</h4><h5 id="（1）配置Git个人信息-如果你之前已经配置好git个人信息，请跳过这一个步骤"><a href="#（1）配置Git个人信息-如果你之前已经配置好git个人信息，请跳过这一个步骤" class="headerlink" title="（1）配置Git个人信息(如果你之前已经配置好git个人信息，请跳过这一个步骤)"></a>（1）配置Git个人信息(如果你之前已经配置好git个人信息，请跳过这一个步骤)</h5><h5 id="a-设置Git的user-name和email：-如果是第一次的话）"><a href="#a-设置Git的user-name和email：-如果是第一次的话）" class="headerlink" title="a.设置Git的user name和email：(如果是第一次的话）"></a>a.设置Git的user name和email：(如果是第一次的话）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your_name&quot;</span><br><span class="line">git config --global user.email &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h6 id="b-生成密钥"><a href="#b-生成密钥" class="headerlink" title="b.生成密钥"></a>b.生成密钥</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h4 id="11-配置Deployment"><a href="#11-配置Deployment" class="headerlink" title="11.配置Deployment"></a>11.配置Deployment</h4><h5 id="在-config-yml文件中，找到Deployment，然后按照如下修改："><a href="#在-config-yml文件中，找到Deployment，然后按照如下修改：" class="headerlink" title="在_config.yml文件中，找到Deployment，然后按照如下修改："></a>在_config.yml文件中，找到Deployment，然后按照如下修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="二、写博客，发布文章"><a href="#二、写博客，发布文章" class="headerlink" title="二、写博客，发布文章"></a>二、写博客，发布文章</h3><h4 id="1-使用下面的命令新建一个博文（新建后在hexo-source-posts中将会看到你新建的-md后缀的文件）"><a href="#1-使用下面的命令新建一个博文（新建后在hexo-source-posts中将会看到你新建的-md后缀的文件）" class="headerlink" title="1.使用下面的命令新建一个博文（新建后在hexo\source\ _posts中将会看到你新建的.md后缀的文件）"></a>1.使用下面的命令新建一个博文（新建后在hexo\source\ _posts中将会看到你新建的.md后缀的文件）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;article title&quot;</span><br></pre></td></tr></table></figure><h4 id="2-使用markdown编辑器打开并进行编辑文章"><a href="#2-使用markdown编辑器打开并进行编辑文章" class="headerlink" title="2.使用markdown编辑器打开并进行编辑文章"></a>2.使用markdown编辑器打开并进行编辑文章</h4><h4 id="3-使用下面的命令进行生成和部署，成功后便可在https-yourName-github-io访问您的博文"><a href="#3-使用下面的命令进行生成和部署，成功后便可在https-yourName-github-io访问您的博文" class="headerlink" title="3.使用下面的命令进行生成和部署，成功后便可在https://yourName.github.io访问您的博文"></a>3.使用下面的命令进行生成和部署，成功后便可在<a href="https://yourName.github.io访问您的博文" target="_blank" rel="noopener">https://yourName.github.io访问您的博文</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   // 生成</span><br><span class="line">hexo d   // 部署</span><br></pre></td></tr></table></figure><h5 id="注：若提示-deloyer-not-found-git-则说明缺少一个扩展，运行-npm-install-save-hexo-deployer-git-命令即可解决"><a href="#注：若提示-deloyer-not-found-git-则说明缺少一个扩展，运行-npm-install-save-hexo-deployer-git-命令即可解决" class="headerlink" title="注：若提示 deloyer not found:git 则说明缺少一个扩展，运行 npm install --save hexo-deployer-git 命令即可解决"></a>注：若提示 <code>deloyer not found:git</code> 则说明缺少一个扩展，运行 <code>npm install --save hexo-deployer-git</code> 命令即可解决</h5><h3 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h3><p>hexo提供了许许多多的主题，我们可以轻松的修改一个自己喜欢的主题，具体方法如下：</p><h4 id="1-在-Hexo-中有两份主要的配置文件，其名称都是-config-yml。-其中，一份位于站点根目录下，主要包含-Hexo-本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。-为了描述方便，在以下说明中，将前者称为-站点配置文件，-后者称为-主题配置文件。在文件夹的themes中使用-git-clone-命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用"><a href="#1-在-Hexo-中有两份主要的配置文件，其名称都是-config-yml。-其中，一份位于站点根目录下，主要包含-Hexo-本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。-为了描述方便，在以下说明中，将前者称为-站点配置文件，-后者称为-主题配置文件。在文件夹的themes中使用-git-clone-命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用" class="headerlink" title="1.在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。在文件夹的themes中使用 git clone 命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用"></a>1.在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 <em>站点配置文件</em>， 后者称为 <em>主题配置文件</em>。在文件夹的themes中使用 <code>git clone</code> 命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h4 id="2-启用主题-与所有-Hexo-主题启用的模式一样。-当-克隆-下载-完成后，打开-站点配置文件，-找到-theme-字段，并将其值更改为-next。-启用-NexT-主题"><a href="#2-启用主题-与所有-Hexo-主题启用的模式一样。-当-克隆-下载-完成后，打开-站点配置文件，-找到-theme-字段，并将其值更改为-next。-启用-NexT-主题" class="headerlink" title="2.启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题"></a>2.启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，检查站点是否正确运行。 当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。选择 Scheme Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line">Mist - Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">Pisces - 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面</span><br></pre></td></tr></table></figure></p><p>注释 # 即可。 选择 Pisce Scheme<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure></p><p>5）<strong>设置语言</strong> 编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">语言</th><th style="text-align:center">代码</th><th style="text-align:center">设定实例</th></tr></thead><tbody><tr><td style="text-align:center">English</td><td style="text-align:center">en</td><td style="text-align:center">language: en</td></tr><tr><td style="text-align:center">简体中文</td><td style="text-align:center">zh-Hans</td><td style="text-align:center">language:zh-Hans</td></tr><tr><td style="text-align:center">Français</td><td style="text-align:center">fr-FR</td><td style="text-align:center">language:fr-FR</td></tr><tr><td style="text-align:center">Português</td><td style="text-align:center">pt</td><td style="text-align:center">language:pt</td></tr><tr><td style="text-align:center">繁體中文</td><td style="text-align:center">zh-hk或者zh-tw</td><td style="text-align:center">language:zh-hk</td></tr><tr><td style="text-align:center">Русский язык</td><td style="text-align:center">ru</td><td style="text-align:center">language:ru</td></tr><tr><td style="text-align:center">Deutsch</td><td style="text-align:center">de</td><td style="text-align:center">language:de</td></tr><tr><td style="text-align:center">日本語</td><td style="text-align:center">ja</td><td style="text-align:center">language:ja</td></tr><tr><td style="text-align:center">Indonesian</td><td style="text-align:center">id</td><td style="text-align:center">language:id</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      本文是我在网上查找了部分搭建博客的教程，以及使用github+hexo搭建博客时的流程以及遇到的一些问题的总结
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>在搭建报名系统时遇到的django报错</title>
    <link href="http://yoursite.com/2018/03/13/%E5%9C%A8%E6%90%AD%E5%BB%BA%E6%8A%A5%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84django%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2018/03/13/在搭建报名系统时遇到的django报错/</id>
    <published>2018-03-13T07:51:14.000Z</published>
    <updated>2018-04-19T16:35:10.754Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="报错1："><a href="#报错1：" class="headerlink" title="报错1："></a>报错1：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The view sign_up.views.new_user didn<span class="string">'t return an HttpResponse object. It returned None instead.</span></span><br></pre></td></tr></table></figure><h4 id="views-py代码"><a href="#views-py代码" class="headerlink" title="views.py代码"></a>views.py代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = UserInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = UserInfoForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">        context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'new_user.html'</span>,context)</span><br></pre></td></tr></table></figure><h4 id="models-py代码"><a href="#models-py代码" class="headerlink" title="models.py代码"></a>models.py代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User_info</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    student_id = models.CharField(max_length=<span class="number">9</span>)</span><br><span class="line">    college = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    date_added = models.DateField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><h4 id="new-user-html代码"><a href="#new-user-html代码" class="headerlink" title="new_user.html代码"></a>new_user.html代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'sign_up/index.html' %&#125;</span><br><span class="line">&#123;% block header %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>请填写信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'sign_up:new_user' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% form.as_p %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Add user<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>错误原因：当时报错时查询各种资料以及函数都没有解决。。。最后发现是由于views.py文件中的没有返回值，return错位导致。</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = UserInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = UserInfoForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'new_user.html'</span>,context)</span><br></pre></td></tr></table></figure><hr><h3 id="报错2："><a href="#报错2：" class="headerlink" title="报错2："></a>报错2：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invalid block tag on line 8: 'form.as_p', expected 'endblock'. Did you forget to register or load this tag?</span><br></pre></td></tr></table></figure><p>错误原因：前端模版中form.as_p应该放在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125;</span><br><span class="line">```中，而不是`&#123;% %&#125;`中</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">### 报错3：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">no such table: sign_up_actor_info</span><br></pre></td></tr></table></figure></p><p>错误原因：应当使用<code>python manage.py makemigrations</code>以及<code>python manage.py migrate</code>来迁移数据库以及修改数据库即可</p><hr><h3 id="报错4："><a href="#报错4：" class="headerlink" title="报错4："></a>报错4：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Specifying a namespace <span class="keyword">in</span> include() without providing an app_name</span><br></pre></td></tr></table></figure><p>错误原因：python3 Django 环境下，如果你遇到namespace没有注册以及在根目录下urls.py中的include方法的第二个参数namespace添加之后就出错的问题。请在[app_name]目录下的urls.py中的urlpatterns前面加上app_name=’[app_name]’， [app_name]代表你的应用的名称。</p><hr><h3 id="报错5："><a href="#报错5：" class="headerlink" title="报错5："></a>报错5：</h3><p>错误原因：将根目录下的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^users/$&apos;,include(&apos;users.urls&apos;,namespace=&apos;users&apos;)),</span><br></pre></td></tr></table></figure></p><p>中的<code>$</code>删除</p><hr><h3 id="报错6："><a href="#报错6：" class="headerlink" title="报错6："></a>报错6：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_actor</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = ActorInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = ActorInfoForm(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            new_actor = form.save()</span><br><span class="line">            new_actor.owner = request.user</span><br><span class="line">            new_actor.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'sign_up/new_actor.html'</span>, context)</span><br></pre></td></tr></table></figure><p>错误原因：在第一次form.save时应该是用参数commit=False，使其不上传到数据库，因为后面还要对其信息进行添加</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_actor</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = ActorInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = ActorInfoForm(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            new_actor = form.save(commit=<span class="keyword">False</span>) <span class="comment">#commit=False指不要提交到数据库</span></span><br><span class="line">            new_actor.owner = request.user</span><br><span class="line">            new_actor.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'sign_up/new_actor.html'</span>, context)</span><br></pre></td></tr></table></figure><hr><h3 id="报错7："><a href="#报错7：" class="headerlink" title="报错7："></a>报错7：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'QuerySet'</span> object has no attribute <span class="string">'owner'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.filter(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>,args=&#123;<span class="string">'actor_id'</span>:actor_id&#125;))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure><p>错误原因：应该使用get而不是filter</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.get(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>,args=[actor_id]))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure><hr><h3 id="报错8："><a href="#报错8：" class="headerlink" title="报错8："></a>报错8：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Reverse <span class="keyword">for</span> <span class="string">'actor'</span> <span class="keyword">with</span> no arguments <span class="keyword">not</span> found. <span class="number">1</span> pattern(s) tried: [<span class="string">'actors/(?P&lt;actor_id&gt;\\d+)/$'</span>]</span><br><span class="line">Request Method:POST</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.get(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>),args=[actor_id])</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure><p>错误原因：args为reverse函数的参数，而不是HttpResponseRedirect的参数</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.get(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>,args=[actor_id]))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文是对在搭建报名系统时遇到的django报错的一些问题的总结
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>flask使用orm连接数据库</title>
    <link href="http://yoursite.com/2018/02/12/flask%E4%BD%BF%E7%94%A8orm%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/02/12/flask使用orm连接数据库/</id>
    <published>2018-02-12T12:14:40.000Z</published>
    <updated>2018-04-19T16:17:15.436Z</updated>
    
    <content type="html"><![CDATA[<p>注：使用前请安装flask_sqlalchemy包，由于python-mysql不适用于python3.6，所以我们使用pymysql进行替代</p><hr><h1 id="1-flask的app文件中输入以下代码"><a href="#1-flask的app文件中输入以下代码" class="headerlink" title="1.flask的app文件中输入以下代码"></a>1.flask的app文件中输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(文件名为：learn_flask_mysql_orm.py)</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">"SQLALCHEMY_DATABASE_URI"</span>]=<span class="string">"mysql+pymysql://root:@127.0.0.1:3306/learn_flask_mysql"</span></span><br><span class="line"><span class="comment">#注：请勿忘记添加'+pymysql'，否则将会出现没有安装mysqldb的报错</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><hr><h1 id="2-在flask文件夹中新建一个models-py文件，并输入以下代码"><a href="#2-在flask文件夹中新建一个models-py文件，并输入以下代码" class="headerlink" title="2.在flask文件夹中新建一个models.py文件，并输入以下代码"></a>2.在flask文件夹中新建一个models.py文件，并输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> learn_flask_mysql_orm <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line">    user_id = db.Column(db.INT,primary_key=<span class="keyword">True</span>)</span><br><span class="line">    user_name = db.Column(db.TEXT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,user_id,user_name)</span>:</span></span><br><span class="line">        self.user_id = user_id</span><br><span class="line">        self.user_name = user_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id:&#123;&#125;    name:&#123;&#125;"</span>.format(self.user_id,self.user_name)</span><br></pre></td></tr></table></figure><hr><h1 id="3-在flask中新建一个manage-py文件，输入以下代码"><a href="#3-在flask中新建一个manage-py文件，输入以下代码" class="headerlink" title="3.在flask中新建一个manage.py文件，输入以下代码"></a>3.在flask中新建一个manage.py文件，输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> learn_flask_mysql_orm <span class="keyword">import</span> app,db</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">11</span>,<span class="string">'zhangjia11'</span>)</span><br><span class="line">    db.session.add(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query.all()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p>之后使用<code>python manage.py save</code>即可保存数据，使用<code>python manage.py qurey_all</code>即可查询数据</p>]]></content>
    
    <summary type="html">
    
      本文是对flask使用orm连接数据库的总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>flask连接mysql数据库</title>
    <link href="http://yoursite.com/2018/02/12/flask%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/02/12/flask连接mysql数据库/</id>
    <published>2018-02-12T12:05:45.000Z</published>
    <updated>2018-04-19T16:15:27.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在flask所在文件夹中新建一个models-py文件，输入以下代码"><a href="#在flask所在文件夹中新建一个models-py文件，输入以下代码" class="headerlink" title="在flask所在文件夹中新建一个models.py文件，输入以下代码"></a>在flask所在文件夹中新建一个models.py文件，输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line">    host = <span class="string">"127.0.0.1"</span></span><br><span class="line">    port = <span class="number">3306</span>     <span class="comment">#注：此处应该使用数字而不是字符串</span></span><br><span class="line">    db = <span class="string">'learn_flask_mysql'</span></span><br><span class="line">    user = <span class="string">'root'</span></span><br><span class="line">    password = <span class="string">''</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=host,</span><br><span class="line">        user=user,</span><br><span class="line">        password=password,</span><br><span class="line">        port=port,</span><br><span class="line">        db=db,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,user_id,user_name)</span>:</span></span><br><span class="line">        self.user_id = user_id</span><br><span class="line">        self.user_name = user_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = get_conn()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql = <span class="string">"INSERT INTO user(user_id, user_name) VALUES (%s,%s)"</span></span><br><span class="line">        cursor.execute(sql,(self.user_id,self.user_name))</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">        conn = get_conn()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql = <span class="string">"SELECT * from user"</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        rows = cursor.fetchall()</span><br><span class="line">        users = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            user = User(row[<span class="number">0</span>],row[<span class="number">1</span>])</span><br><span class="line">            users.append(user)</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> users</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id:&#123;&#125;  name:&#123;&#125;"</span>.format(self.user_id,self.user_name)</span><br></pre></td></tr></table></figure><h1 id="2-在flask新建文件夹中新建一个manage-py，并输入以下代码"><a href="#2-在flask新建文件夹中新建一个manage-py，并输入以下代码" class="headerlink" title="2.在flask新建文件夹中新建一个manage.py，并输入以下代码"></a>2.在flask新建文件夹中新建一个manage.py，并输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_mysql <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'csdn'</span>)</span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query_all()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p>之后使用<code>python manage.py save</code>即可保存数据，使用<code>python manage.py qurey_all</code>即可查询数据</p>]]></content>
    
    <summary type="html">
    
      本文是对使用flask连接mysql数据库的总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Flask扩展flask-script文档中文翻译</title>
    <link href="http://yoursite.com/2018/02/12/Flask%E6%89%A9%E5%B1%95flask-script%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/"/>
    <id>http://yoursite.com/2018/02/12/Flask扩展flask-script文档中文翻译/</id>
    <published>2018-02-12T08:40:29.000Z</published>
    <updated>2018-04-19T16:12:53.049Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自<a href="https://my.oschina.net/lijsf/blog/158828" target="_blank" rel="noopener">https://my.oschina.net/lijsf/blog/158828</a></p><hr><hr><h1 id="Flask扩展flask-script文档中文翻译"><a href="#Flask扩展flask-script文档中文翻译" class="headerlink" title="Flask扩展flask-script文档中文翻译"></a>Flask扩展flask-script文档中文翻译</h1><hr><h5 id="Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的-Python-shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。"><a href="#Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的-Python-shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。" class="headerlink" title="Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的 Python shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。"></a>Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的 Python shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。</h5><h5 id="Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。"><a href="#Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。" class="headerlink" title="Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。"></a>Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># manage.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><h5 id="只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们："><a href="#只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们：" class="headerlink" title="只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们："></a>只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们：</h5><blockquote><p>python manage.py hello</p></blockquote><p>Flask-Script的源代码和bug追踪见 <a href="https://github.com/smurfix/flask-script" target="_blank" rel="noopener">GitHub</a></p><hr><hr><h1 id="安装Flask-Script"><a href="#安装Flask-Script" class="headerlink" title="安装Flask-Script"></a>安装Flask-Script</h1><hr><h5 id="可以使用pip或者easy-install安装："><a href="#可以使用pip或者easy-install安装：" class="headerlink" title="可以使用pip或者easy_install安装："></a>可以使用pip或者easy_install安装：</h5><blockquote><p>pip install Flask-Script</p></blockquote><h5 id="或者下载最新开发版本："><a href="#或者下载最新开发版本：" class="headerlink" title="或者下载最新开发版本："></a>或者下载最新开发版本：</h5><blockquote><p>git clone <a href="https://github.com/techniq/flask-script.git" target="_blank" rel="noopener">https://github.com/techniq/flask-script.git</a><br>cd flask-script<br>python setup.py develop</p></blockquote><h5 id="如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下"><a href="#如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下" class="headerlink" title="如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下"></a>如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下</h5><hr><hr><h1 id="创建并且运行命令"><a href="#创建并且运行命令" class="headerlink" title="创建并且运行命令"></a>创建并且运行命令</h1><hr><h5 id="首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage-py。"><a href="#首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage-py。" class="headerlink" title="首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage.py。"></a>首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage.py。</h5><h5 id="无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。"><a href="#无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。" class="headerlink" title="无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。"></a>无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。</h5><h5 id="在你的manage-py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行-情况"><a href="#在你的manage-py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行-情况" class="headerlink" title="在你的manage.py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行 情况:"></a>在你的manage.py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行 情况:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># configure your app</span></span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><h5 id="调用-manager-run-将启动Manger实例接收命令行中的命令。"><a href="#调用-manager-run-将启动Manger实例接收命令行中的命令。" class="headerlink" title="调用 manager.run()将启动Manger实例接收命令行中的命令。"></a>调用 manager.run()将启动Manger实例接收命令行中的命令。</h5><h5 id="Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。"><a href="#Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。" class="headerlink" title="Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。"></a>Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。</h5><h5 id="其次，创建并且加入命令。有三种方法可创建命令："><a href="#其次，创建并且加入命令。有三种方法可创建命令：" class="headerlink" title="其次，创建并且加入命令。有三种方法可创建命令："></a>其次，创建并且加入命令。有三种方法可创建命令：</h5><h5 id="创建Command的子类"><a href="#创建Command的子类" class="headerlink" title="创建Command的子类"></a>创建Command的子类</h5><h5 id="使用-command-修饰符"><a href="#使用-command-修饰符" class="headerlink" title="使用 @command 修饰符"></a>使用 @command 修饰符</h5><h5 id="使用-option-修饰符"><a href="#使用-option-修饰符" class="headerlink" title="使用 @option 修饰符"></a>使用 @option 修饰符</h5><h5 id="下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello-word”。"><a href="#下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello-word”。" class="headerlink" title="下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello word”。"></a>下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello word”。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Command</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(Command)</span>:</span></span><br><span class="line">    <span class="string">"prints hello world"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><h5 id="再把上面创建的Hello命令加入Manager实例："><a href="#再把上面创建的Hello命令加入Manager实例：" class="headerlink" title="再把上面创建的Hello命令加入Manager实例："></a>再把上面创建的Hello命令加入Manager实例：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.add_command(<span class="string">'hello'</span>, Hello())</span><br></pre></td></tr></table></figure><h5 id="很明显，上面的语句需要在manager-run-之前运行。现在执行下面的命令："><a href="#很明显，上面的语句需要在manager-run-之前运行。现在执行下面的命令：" class="headerlink" title="很明显，上面的语句需要在manager.run()之前运行。现在执行下面的命令："></a>很明显，上面的语句需要在manager.run()之前运行。现在执行下面的命令：</h5><blockquote><p>python manage.py hello<br>hello world</p></blockquote><h5 id="也可传给Command实例的run方法一个字典："><a href="#也可传给Command实例的run方法一个字典：" class="headerlink" title="也可传给Command实例的run方法一个字典："></a>也可传给Command实例的run方法一个字典：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.run(&#123;<span class="string">'hello'</span> : Hello()&#125;)</span><br></pre></td></tr></table></figure><h5 id="Command-class-必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。"><a href="#Command-class-必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。" class="headerlink" title="Command class 必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。"></a>Command class 必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。</h5><h5 id="运行下面的命令获取可以使用的命令及其描述的列表："><a href="#运行下面的命令获取可以使用的命令及其描述的列表：" class="headerlink" title="运行下面的命令获取可以使用的命令及其描述的列表："></a>运行下面的命令获取可以使用的命令及其描述的列表：</h5><blockquote><p>python manage.py</p></blockquote><h5 id="通过运行下面的命令获取一个特定命令的帮助-这将输出这个命令的docstring。"><a href="#通过运行下面的命令获取一个特定命令的帮助-这将输出这个命令的docstring。" class="headerlink" title="通过运行下面的命令获取一个特定命令的帮助,这将输出这个命令的docstring。"></a>通过运行下面的命令获取一个特定命令的帮助,这将输出这个命令的docstring。</h5><blockquote><p>python manage.py runserver -h</p></blockquote><h5 id="上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的-command修饰符。"><a href="#上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的-command修饰符。" class="headerlink" title="上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的@command修饰符。"></a>上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的@command修饰符。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"Just say hello"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><h5 id="这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。"><a href="#这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。" class="headerlink" title="这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。"></a>这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。</h5><blockquote><p>python manage.py hello<br>hello</p></blockquote><h5 id="如果用Comman类来实现，下面的命令将输出manage类的docstring："><a href="#如果用Comman类来实现，下面的命令将输出manage类的docstring：" class="headerlink" title="如果用Comman类来实现，下面的命令将输出manage类的docstring："></a>如果用Comman类来实现，下面的命令将输出manage类的docstring：</h5><blockquote><p>python manage.py -h<br>Just say hello</p></blockquote><h5 id="最后，-option修饰符适用于更精细的命令行控制："><a href="#最后，-option修饰符适用于更精细的命令行控制：" class="headerlink" title="最后，@option修饰符适用于更精细的命令行控制："></a>最后，@option修饰符适用于更精细的命令行控制：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.option('-n', '--name', help='Your name')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br></pre></td></tr></table></figure><h5 id="后面会有更详细的对-option的介绍。"><a href="#后面会有更详细的对-option的介绍。" class="headerlink" title="后面会有更详细的对@option的介绍。"></a>后面会有更详细的对@option的介绍。</h5><hr><hr><h1 id="增加命令行参数"><a href="#增加命令行参数" class="headerlink" title="增加命令行参数"></a>增加命令行参数</h1><hr><p>#####大多数命令都带有参数。还是上面的例子，如果不仅仅是打印”hello world”，还想输出一个额外的名字，如：</p><blockquote><p>python manage.py hello –name=Joe<br>hello Joe</p></blockquote><h5 id="或者短参数："><a href="#或者短参数：" class="headerlink" title="或者短参数："></a>或者短参数：</h5><blockquote><p>python manage.py hello -n Joe</p></blockquote><h5 id="为实现这一功能，需要使用Command类的option-list属性。"><a href="#为实现这一功能，需要使用Command类的option-list属性。" class="headerlink" title="为实现这一功能，需要使用Command类的option_list属性。"></a>为实现这一功能，需要使用Command类的option_list属性。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Command, Manager, Option</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(Command)</span>:</span></span><br><span class="line"></span><br><span class="line">    option_list = (</span><br><span class="line">        Option(<span class="string">'--name'</span>, <span class="string">'-n'</span>, dest=<span class="string">'name'</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello %s"</span> % name</span><br></pre></td></tr></table></figure><h5 id="长参数和短参数都是存储在Option实例中。详见API部分。"><a href="#长参数和短参数都是存储在Option实例中。详见API部分。" class="headerlink" title="长参数和短参数都是存储在Option实例中。详见API部分。"></a>长参数和短参数都是存储在Option实例中。详见API部分。</h5><h5 id="另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。"><a href="#另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。" class="headerlink" title="另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。"></a>另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(Command)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, default_name=<span class="string">'Joe'</span>)</span>:</span></span><br><span class="line">        self.default_name=default_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_options</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            Option(<span class="string">'-n'</span>, <span class="string">'--name'</span>, dest=<span class="string">'name'</span>, default=self.default_name),</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello"</span>,  name</span><br></pre></td></tr></table></figure><h5 id="若使用-command修饰符，参数将直接自动的从函数的参数中获取："><a href="#若使用-command修饰符，参数将直接自动的从函数的参数中获取：" class="headerlink" title="若使用@command修饰符，参数将直接自动的从函数的参数中获取："></a>若使用@command修饰符，参数将直接自动的从函数的参数中获取：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">&gt; python manage.py hello Joe</span><br><span class="line">&gt; hello Joe</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 或者使用可选参数：</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=<span class="string">"Fred"</span>)</span></span></span><br><span class="line">print hello, name</span><br></pre></td></tr></table></figure><h5 id="调用方法如下："><a href="#调用方法如下：" class="headerlink" title="调用方法如下："></a>调用方法如下：</h5><blockquote><p>python manage.py hello –name=Joe<br>hello Joe</p></blockquote><h5 id="或者："><a href="#或者：" class="headerlink" title="或者："></a>或者：</h5><blockquote><p>python manage.py hello -n Joe<br>hello Joe</p></blockquote><h5 id="这里需要注意："><a href="#这里需要注意：" class="headerlink" title="这里需要注意："></a>这里需要注意：</h5><h5 id="n-是由参数的第一个字母决定的。所以”name”-gt-“-n”"><a href="#n-是由参数的第一个字母决定的。所以”name”-gt-“-n”" class="headerlink" title="-n 是由参数的第一个字母决定的。所以”name” &gt; “-n”"></a>-n 是由参数的第一个字母决定的。所以”name” &gt; “-n”</h5><h5 id="其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。"><a href="#其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。" class="headerlink" title="其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。"></a>其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。</h5><h5 id="同时，需要注意选项参数是boolean值，例如："><a href="#同时，需要注意选项参数是boolean值，例如：" class="headerlink" title="同时，需要注意选项参数是boolean值，例如："></a>同时，需要注意选项参数是boolean值，例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manage.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(verified=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Checks if verified</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"VERIFIED?"</span>, <span class="string">"YES"</span> <span class="keyword">if</span> verified <span class="keyword">else</span> <span class="string">"NO"</span></span><br></pre></td></tr></table></figure><h5 id="只能这样调用："><a href="#只能这样调用：" class="headerlink" title="只能这样调用："></a>只能这样调用：</h5><blockquote><p>python manage.py verify<br>VERIFIED? NO</p></blockquote><blockquote><p>python manage.py verify -v<br>VERIFIED? YES</p></blockquote><blockquote><p>python manage.py verify –verified<br>VERIFIED? YES</p></blockquote><h5 id="command修饰符随便简单好用，但在复杂情况下，-option是更好的选择："><a href="#command修饰符随便简单好用，但在复杂情况下，-option是更好的选择：" class="headerlink" title="@command修饰符随便简单好用，但在复杂情况下，@option是更好的选择："></a>@command修饰符随便简单好用，但在复杂情况下，@option是更好的选择：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.option('-n', '--name', dest='name', default='joe')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br><span class="line">```    </span><br><span class="line"><span class="comment">##### 可以增加更多的选项参数：</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">@manager.option('-n', '--name', dest='name', default='joe')</span></span><br><span class="line"><span class="meta">@manager.option('-u', '--url', dest='url', default=None)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name, url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello"</span>, name, <span class="string">"from"</span>, url</span><br></pre></td></tr></table></figure><h5 id="可以这样调用："><a href="#可以这样调用：" class="headerlink" title="可以这样调用："></a>可以这样调用：</h5><blockquote><p>python manage.py hello -n Joe -u reddit.com hello Joe from reddit.com</p></blockquote><h5 id="或者：-1"><a href="#或者：-1" class="headerlink" title="或者："></a>或者：</h5><blockquote><p>python manage.py hello –name=Joe –url=reddit.com<br>hello Joe from reddit.com</p></blockquote><hr><hr><h1 id="向manager加入配置项"><a href="#向manager加入配置项" class="headerlink" title="向manager加入配置项"></a>向manager加入配置项</h1><hr><h5 id="配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标-志来为你的应用设置配置文件。例如："><a href="#配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标-志来为你的应用设置配置文件。例如：" class="headerlink" title="配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标 志来为你的应用设置配置文件。例如："></a>配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标 志来为你的应用设置配置文件。例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">(config=None)</span>:</span></span><br><span class="line"></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    <span class="keyword">if</span> config <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        app.config.from_pyfile(config)</span><br><span class="line">    <span class="comment"># configure your app...</span></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><h5 id="可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。"><a href="#可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。" class="headerlink" title="可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。"></a>可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。</h5><h5 id="为实现传配置参数，可以使用add-option-方法，这和Option的参数一样。"><a href="#为实现传配置参数，可以使用add-option-方法，这和Option的参数一样。" class="headerlink" title="为实现传配置参数，可以使用add_option()方法，这和Option的参数一样。"></a>为实现传配置参数，可以使用add_option()方法，这和Option的参数一样。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.add_option(&apos;-c&apos;, &apos;--config&apos;, dest=&apos;config&apos;, required=False)</span><br></pre></td></tr></table></figure><h5 id="同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager-run-之前执行。"><a href="#同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager-run-之前执行。" class="headerlink" title="同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager.run()之前执行。"></a>同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager.run()之前执行。</h5><h5 id="假设你有下面的命令："><a href="#假设你有下面的命令：" class="headerlink" title="假设你有下面的命令："></a>假设你有下面的命令：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    uppercase = app.config.get(<span class="string">'USE_UPPERCASE'</span>, <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> uppercase:</span><br><span class="line">        name = name.upper()</span><br><span class="line">    <span class="keyword">print</span> hello, name</span><br></pre></td></tr></table></figure><blockquote><p>python manage.py hello joe -c dev.cfg<br>hello JOE</p></blockquote><h5 id="注意，”config“选项并没有传给上面的hello命令。"><a href="#注意，”config“选项并没有传给上面的hello命令。" class="headerlink" title="注意，”config“选项并没有传给上面的hello命令。"></a>注意，”config“选项并没有传给上面的hello命令。</h5><h5 id="为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示-例。"><a href="#为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示-例。" class="headerlink" title="为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示 例。"></a>为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示 例。</h5><hr><hr><h1 id="获取用户输入"><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h1><hr><h5 id="Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如："><a href="#Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如：" class="headerlink" title="Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如："></a>Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager, prompt_bool</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropdb</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> prompt_bool(</span><br><span class="line">        <span class="string">"Are you sure you want to lose all your data"</span>):</span><br><span class="line">        db.drop_all()</span><br></pre></td></tr></table></figure><h5 id="执行如下："><a href="#执行如下：" class="headerlink" title="执行如下："></a>执行如下：</h5><blockquote><p>python manage.py dropdb<br>Are you sure you want to lose all your data ? [N]</p></blockquote><p>#####从下文API中获取更多关于prompt functions的内容。</p><hr><hr><h1 id="默认命令"><a href="#默认命令" class="headerlink" title="默认命令"></a>默认命令</h1><hr><h5 id="Flask-Script拥有一对预设的命令，你可以加入或者定制：Server-and-Shell。"><a href="#Flask-Script拥有一对预设的命令，你可以加入或者定制：Server-and-Shell。" class="headerlink" title="Flask-Script拥有一对预设的命令，你可以加入或者定制：Server and Shell。"></a>Flask-Script拥有一对预设的命令，你可以加入或者定制：Server and Shell。</h5><h5 id="Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。"><a href="#Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。" class="headerlink" title="Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。"></a>Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Server, Manager</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> create_app</span><br><span class="line"></span><br><span class="line">manager = Manager(create_app)</span><br><span class="line">manager.add_command(<span class="string">"runserver"</span>, Server())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><h5 id="运行如下："><a href="#运行如下：" class="headerlink" title="运行如下："></a>运行如下：</h5><blockquote><p>python manage.py runserver</p></blockquote><h5 id="Server命令有一组命令行参数，运行python-manage-py-runserver-h-获取详细信息。你也可以在构造函数中重新定义默认-行为："><a href="#Server命令有一组命令行参数，运行python-manage-py-runserver-h-获取详细信息。你也可以在构造函数中重新定义默认-行为：" class="headerlink" title="Server命令有一组命令行参数，运行python manage.py runserver -h 获取详细信息。你也可以在构造函数中重新定义默认 行为："></a>Server命令有一组命令行参数，运行python manage.py runserver -h 获取详细信息。你也可以在构造函数中重新定义默认 行为：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server = Server(host=&quot;0.0.0.0&quot;, port=9000)</span><br></pre></td></tr></table></figure><h5 id="无需赘言，开发Server不是为生产环境准备的。"><a href="#无需赘言，开发Server不是为生产环境准备的。" class="headerlink" title="无需赘言，开发Server不是为生产环境准备的。"></a>无需赘言，开发Server不是为生产环境准备的。</h5><h5 id="Shell名令启动一个Python-shell。可以穿进去一个make-context参数，这个参数必须是一个字典。默认情况下，将返回你的-Flask应用实例。"><a href="#Shell名令启动一个Python-shell。可以穿进去一个make-context参数，这个参数必须是一个字典。默认情况下，将返回你的-Flask应用实例。" class="headerlink" title="Shell名令启动一个Python shell。可以穿进去一个make_context参数，这个参数必须是一个字典。默认情况下，将返回你的 Flask应用实例。"></a>Shell名令启动一个Python shell。可以穿进去一个make_context参数，这个参数必须是一个字典。默认情况下，将返回你的 Flask应用实例。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Shell, Manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_make_context</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> dict(app=app, db=db, models=models)</span><br><span class="line"></span><br><span class="line">manager = Manager(create_app)</span><br><span class="line">manager.add_command(<span class="string">"shell"</span>, Shell(make_context=_make_context))</span><br></pre></td></tr></table></figure><h5 id="这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。"><a href="#这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。" class="headerlink" title="这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。"></a>这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。</h5><h5 id="Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python-shell。你可以用两种方法关闭这一-行为：传use-ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。"><a href="#Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python-shell。你可以用两种方法关闭这一-行为：传use-ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。" class="headerlink" title="Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python shell。你可以用两种方法关闭这一 行为：传use_ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。"></a>Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python shell。你可以用两种方法关闭这一 行为：传use_ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell = Shell(use_ipython=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h5 id="也有一个shell修饰符，你可以在函数上下文中使用。"><a href="#也有一个shell修饰符，你可以在函数上下文中使用。" class="headerlink" title="也有一个shell修饰符，你可以在函数上下文中使用。"></a>也有一个shell修饰符，你可以在函数上下文中使用。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.shell</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_shell_context</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> dict(app=app, db=db, models=models)</span><br></pre></td></tr></table></figure><h5 id="这将使这个命令成为shell的默认执行的命令。"><a href="#这将使这个命令成为shell的默认执行的命令。" class="headerlink" title="这将使这个命令成为shell的默认执行的命令。"></a>这将使这个命令成为shell的默认执行的命令。</h5><blockquote><p>python manage.py shell</p></blockquote><h5 id="默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写-add-command-或者修饰符。若你传给Manager的构造器一个with-default-commands-False参数，则这些命令不会被载入。"><a href="#默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写-add-command-或者修饰符。若你传给Manager的构造器一个with-default-commands-False参数，则这些命令不会被载入。" class="headerlink" title="默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写 add_command()或者修饰符。若你传给Manager的构造器一个with_default_commands=False参数，则这些命令不会被载入。"></a>默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写 add_command()或者修饰符。若你传给Manager的构造器一个with_default_commands=False参数，则这些命令不会被载入。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager = Manager(app, with_default_commands=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的Python shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>flask的外部脚本的使用</title>
    <link href="http://yoursite.com/2018/02/12/flask%E7%9A%84%E5%A4%96%E9%83%A8%E8%84%9A%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/02/12/flask的外部脚本的使用/</id>
    <published>2018-02-12T08:12:55.000Z</published>
    <updated>2018-04-19T16:06:41.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码"><a href="#1-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码" class="headerlink" title="1.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码"></a>1.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><hr><p>在终端中使用<code>python manage.py hello</code>即可运行该脚本<br><img src="http://img.blog.csdn.net/20180212161135261?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h1 id="2-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码"><a href="#2-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码" class="headerlink" title="2.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码"></a>2.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option('-m','--msg',dest='msg_val',default='world')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(msg_val)</span>:</span></span><br><span class="line">    print(<span class="string">'hello '</span>+msg_val)</span><br></pre></td></tr></table></figure><p>在终端中使用<code>python manage.py hello -m csdn</code>或者<code>python manage.py hello --msg_val=csdn</code>即可运行该脚本<br>运行结果为<code>hello csdn</code></p>]]></content>
    
    <summary type="html">
    
      本文是对flask的外部脚本的使用的总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>flask连接sqlite3数据库</title>
    <link href="http://yoursite.com/2018/02/12/flask%E8%BF%9E%E6%8E%A5sqlite3%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/02/12/flask连接sqlite3数据库/</id>
    <published>2018-02-12T08:00:56.000Z</published>
    <updated>2018-04-19T16:04:26.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-在flask文件夹中新建一个models-py文件用来定义模型，内部代码如下"><a href="#1-在flask文件夹中新建一个models-py文件用来定义模型，内部代码如下" class="headerlink" title="1.在flask文件夹中新建一个models.py文件用来定义模型，内部代码如下"></a>1.在flask文件夹中新建一个models.py文件用来定义模型，内部代码如下</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3 <span class="comment">#导入sqlite3包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#定义该函数用来连接数据库</span></span><br><span class="line">    <span class="keyword">return</span> sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,id,name)</span>:</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        sql = <span class="string">"insert into user VALUES (?,?)"</span><span class="comment">#sql语句</span></span><br><span class="line">        conn = get_conn()<span class="comment">#连接数据库</span></span><br><span class="line">        cursor = conn.cursor()<span class="comment">#定义一个游标</span></span><br><span class="line">        cursor.execute(sql,(self.id,self.name))<span class="comment">#执行sql语句</span></span><br><span class="line">        conn.commit()<span class="comment">#提交数据库改动</span></span><br><span class="line">        cursor.close()<span class="comment">#关闭游标</span></span><br><span class="line">        conn.close()<span class="comment">#关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    staticmethod相当于一个定义在类里面的函数，所以如果一个方法既不跟实例</span></span><br><span class="line"><span class="string">    相关也不跟特定的类相关，推荐将其定义为一个staticmethod，这样不仅使代</span></span><br><span class="line"><span class="string">    码一目了然，而且似的利于维护代码。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">()</span>:</span></span><br><span class="line">        sql = <span class="string">"select * from user"</span></span><br><span class="line">        conn = get_conn()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        rows = cursor.execute(sql)</span><br><span class="line">        users = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            user = User(row[<span class="number">0</span>],row[<span class="number">1</span>])</span><br><span class="line">            users.append(user)</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> users</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'id:&#123;&#125;--name:&#123;&#125;'</span>.format(self.id,self.name)<span class="comment">#注此处的是点不是逗号</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="2-在flask文件夹中新建一个manage-py文件"><a href="#2-在flask文件夹中新建一个manage-py文件" class="headerlink" title="2.在flask文件夹中新建一个manage.py文件"></a>2.在flask文件夹中新建一个manage.py文件</h1><hr><p>###（1）导入flask_script包，导入sqlite3包，导入models.py中定义的模型，导入flask中的应用，所以最终头部代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br></pre></td></tr></table></figure></p><hr><p>###（2）创建数据库，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    sql = <span class="string">"create table user (id INT,name TEXT)"</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure></p><hr><p>###（3）保存数据，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'csdn'</span>)</span><br><span class="line">    user.save()</span><br></pre></td></tr></table></figure></p><hr><p>###（4）查询数据，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br></pre></td></tr></table></figure></p><hr><h3 id="整体代码如下"><a href="#整体代码如下" class="headerlink" title="整体代码如下"></a>整体代码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    sql = <span class="string">"create table user (id INT,name TEXT)"</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'zhangjia'</span>)</span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><hr><hr><h1 id="3-在终端中使用命令即可运行数据库的创建，添加以及查询"><a href="#3-在终端中使用命令即可运行数据库的创建，添加以及查询" class="headerlink" title="3.在终端中使用命令即可运行数据库的创建，添加以及查询"></a>3.在终端中使用命令即可运行数据库的创建，添加以及查询</h1>]]></content>
    
    <summary type="html">
    
      本文是flask连接sqlite3数据库的总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>flask路由，消息提醒，以及异常处理</title>
    <link href="http://yoursite.com/2018/02/11/flask%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%B6%88%E6%81%AF%E6%8F%90%E9%86%92%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/02/11/flask路由，消息提醒，以及异常处理/</id>
    <published>2018-02-11T13:37:46.000Z</published>
    <updated>2018-04-19T16:02:21.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建一个小的flask应用"><a href="#1-创建一个小的flask应用" class="headerlink" title="1.创建一个小的flask应用"></a>1.创建一个小的flask应用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">（文件名为app.py）</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>上述代码便是一个最简单的flask应用，使用<code>python app.py</code>即可运行，命令行运行情况如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python app.py</span><br><span class="line"> * Running on http://127.0.0.1:5000/</span><br></pre></td></tr></table></figure></p><hr><hr><h1 id="2-flask的路由"><a href="#2-flask的路由" class="headerlink" title="2.flask的路由"></a>2.flask的路由</h1><hr><p>###（1）下面的代码表示在<a href="http://127.0.0.1:5000/hello路径下可以在网页中看到返回值`hello`" target="_blank" rel="noopener">http://127.0.0.1:5000/hello路径下可以在网页中看到返回值`hello`</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure></p><hr><p>###（2）下面的代码表示可以在获取路由中的值，如在路径中输入路径<a href="http://127.0.0.1:5000/hello/123，页面中将会显示返回值`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello/123，页面中将会显示返回值`hello</a> 123`<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello/&lt;id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+id)</span><br></pre></td></tr></table></figure></p><hr><p>###（3）下面的代码同样可以获取路由中的值，如在路径中输入<a href="http://127.0.0.1:5000/hello?id=123，页面将会显示返回值`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello?id=123，页面将会显示返回值`hello</a> 123`<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    id = request.args.get(<span class="string">'id'</span>)</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+id)</span><br></pre></td></tr></table></figure></p><hr><hr><h1 id="3-flask反向路由"><a href="#3-flask反向路由" class="headerlink" title="3.flask反向路由"></a>3.flask反向路由</h1><hr><h4 id="第二个函数将会通过url-for函数来获取函数名为hello的函数的路由，即在路径中输入http-127-0-0-1-5000-hello-url，网页将会显示-hello-hello"><a href="#第二个函数将会通过url-for函数来获取函数名为hello的函数的路由，即在路径中输入http-127-0-0-1-5000-hello-url，网页将会显示-hello-hello" class="headerlink" title="第二个函数将会通过url_for函数来获取函数名为hello的函数的路由，即在路径中输入http://127.0.0.1:5000/hello_url，网页将会显示`hello /hello`"></a>第二个函数将会通过url_for函数来获取函数名为hello的函数的路由，即在路径中输入<a href="http://127.0.0.1:5000/hello_url，网页将会显示`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello_url，网页将会显示`hello</a> /hello`</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#反向路由</span></span><br><span class="line"><span class="meta">@app.route('/hello_url')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+url_for(<span class="string">'hello'</span>))</span><br></pre></td></tr></table></figure><hr><hr><h1 id="4-前后端数据传输"><a href="#4-前后端数据传输" class="headerlink" title="4.前后端数据传输"></a>4.前后端数据传输</h1><hr><p>###（1）后端向前端传输数据</p><h4 id="下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可看到页面返回了"><a href="#下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可看到页面返回了" class="headerlink" title="下面的代码最后在在路径中输入http://127.0.0.1:5000/hello即可看到页面返回了"></a>下面的代码最后在在路径中输入<a href="http://127.0.0.1:5000/hello即可看到页面返回了" target="_blank" rel="noopener">http://127.0.0.1:5000/hello即可看到页面返回了</a></h4><p><code>hello csdn</code><br><code>hello 1</code></p><h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">"csdn"</span>)</span><br><span class="line">    context = &#123;<span class="string">"user"</span>:user&#125;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>,context=context)</span><br><span class="line">    <span class="comment">#注意，此处的传参数方式与Django中的不同，前一个context指传到前端的参数名</span></span><br></pre></td></tr></table></figure><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>user_index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; context.user.user_name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; context.user.user_id &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>###（2）前端向后端提交数据</p><h4 id="下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可返回一个表单，-if-request-method-‘GET’-用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理"><a href="#下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可返回一个表单，-if-request-method-‘GET’-用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理" class="headerlink" title="下面的代码最后在在路径中输入http://127.0.0.1:5000/hello即可返回一个表单，`if request.method == ‘GET’:`用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理"></a>下面的代码最后在在路径中输入<a href="http://127.0.0.1:5000/hello即可返回一个表单，`if" target="_blank" rel="noopener">http://127.0.0.1:5000/hello即可返回一个表单，`if</a> request.method == ‘GET’:`用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理</h4><h4 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request,flash</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/hello",methods=['POST','GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = request.form</span><br><span class="line">        user_name = form.get(<span class="string">"user_name"</span>)</span><br><span class="line">        password = form.get(<span class="string">"password"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_name:</span><br><span class="line">            flash(<span class="string">"Please input username"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> password:</span><br><span class="line">            flash(<span class="string">"Please input password"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user_name == <span class="string">"csdn"</span> <span class="keyword">and</span> password == <span class="string">"12345678"</span>:</span><br><span class="line">            flash(<span class="string">"Login succeed"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">"username or password is wrong"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br></pre></td></tr></table></figure><h4 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; get_flashed_messages()[0] &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="5-消息提醒"><a href="#5-消息提醒" class="headerlink" title="5.消息提醒"></a>5.消息提醒</h1><hr><p>####（1）使用消息提示是需要配置secret_key</p><p>####（2）flash获得的为一个列表，所以前端使用<code>get_flashed_messages()[0]</code>来获得消息提醒</p><h4 id="后端代码-2"><a href="#后端代码-2" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,render_template,flash</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = &apos;123&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/hello&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    flash(&quot;csdn&quot;)</span><br><span class="line">    return render_template(&quot;hello.html&quot;)</span><br></pre></td></tr></table></figure><h4 id="前端代码-2"><a href="#前端代码-2" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; get_flashed_messages()[0] &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6.异常处理"></a>6.异常处理</h1><hr><p>###（1）404错误</p><h4 id="当路由中输入错误路径，将会返回404页面"><a href="#当路由中输入错误路径，将会返回404页面" class="headerlink" title="当路由中输入错误路径，将会返回404页面"></a>当路由中输入错误路径，将会返回404页面</h4><h4 id="后端代码-3"><a href="#后端代码-3" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"404.html"</span>)</span><br></pre></td></tr></table></figure><h4 id="前端代码-3"><a href="#前端代码-3" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（文件名为404.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>抱歉您找的页面不存在<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>###（2）有条件的跳转到404页面</p><h4 id="当在路由中输入http-127-0-0-1-5000-error-login-1是返回登录成功页面，反之返回404页面"><a href="#当在路由中输入http-127-0-0-1-5000-error-login-1是返回登录成功页面，反之返回404页面" class="headerlink" title="当在路由中输入http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面"></a>当在路由中输入<a href="http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面" target="_blank" rel="noopener">http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面</a></h4><p>####后端代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,abort</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/hello/&lt;id&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> int(id) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br></pre></td></tr></table></figure></p><h4 id="前端代码-4"><a href="#前端代码-4" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>您已登录成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      flask路由，消息提醒，以及异常处理是flask中很重要的部分，本文对此进行了总结
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Django网站部署前期准备</title>
    <link href="http://yoursite.com/2018/02/10/Django%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2018/02/10/Django网站部署前期准备/</id>
    <published>2018-02-10T13:52:08.000Z</published>
    <updated>2018-04-19T13:30:50.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="建立虚拟环境"><a href="#建立虚拟环境" class="headerlink" title="建立虚拟环境"></a>建立虚拟环境</h3><hr><p>####（1）创建一个空文件夹，并命名为learning_log</p><p>####（2）在终端中切换到该文件夹中使用<code>virtualenv ll_env</code>创建一个虚拟环境，如创建失败请使用<code>pip install virtualenv</code>命令来安装virtualenv包</p><p>####（3）完成上述命令后learning_log文件加如下所示<br><img src="http://img.blog.csdn.net/20180210205316970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180210205350743?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><hr><p>####（1）使用<code>source ll_env/bin/activate</code>命令激活虚拟环境，激活后终端前将出现（ll_env）<br><img src="http://img.blog.csdn.net/20180210205632917?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h5 id="注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境"><a href="#注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境" class="headerlink" title="注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境"></a>注：如果需要停止虚拟环境，请使用<code>deactivate</code>命令来关闭虚拟环境</h5><hr><hr><h3 id="安装，新建Django项目"><a href="#安装，新建Django项目" class="headerlink" title="安装，新建Django项目"></a>安装，新建Django项目</h3><hr><p>####（1）创建并激活虚拟环境之后，我们就可以安装Django了安装命令为<code>pip install django</code></p><p>####（2）使用<code>django-admin.py startproject learning_log .</code>来新建项目（注意不要忽略.，如没有.则manage.py文件将不与ll_env文件夹在同一目录，会影响后期部署）<br><img src="http://img.blog.csdn.net/20180210210451199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><hr><p>####（1）使用命令<code>python manage.py migrate</code>来修改数据库，我们将这称为迁移数据库，首次执行将新建一个必要的数据表<br><img src="http://img.blog.csdn.net/20180210211321732?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="查看项目"><a href="#查看项目" class="headerlink" title="查看项目"></a>查看项目</h3><hr><p>####（1）使用<code>python manage.py runserver</code>来启动该项目，启动之后便可在<a href="http://127.0.0.1:8000/打开该网站，若8000端口被占用可使用`python" target="_blank" rel="noopener">http://127.0.0.1:8000/打开该网站，若8000端口被占用可使用`python</a> manage.py runserver 8001`使网站在8001端口打开，如仍被占用，请继续向后增加，直至成功，关闭请按ctrl+c<br><img src="http://img.blog.csdn.net/20180210211543833?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180210212037748?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><hr><h3 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h3><hr><p>####（1）使用<code>python manage.py startapp learning_logs</code>命令创建一个名为learning_logs的app,运行后文件夹中将出现learning_logs文件夹</p><hr><hr><h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><hr><p>####（1）打开models.py文件添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br></pre></td></tr></table></figure></p><h5 id="DateTimeField-auto-now-add-True-是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串"><a href="#DateTimeField-auto-now-add-True-是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串" class="headerlink" title="DateTimeField(auto_now_add=True)是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串"></a><code>DateTimeField(auto_now_add=True)</code>是指日期自动添加，<strong>str</strong>函数表示了该模型的简单显示，该模型的返回值等于text字符串</h5><hr><hr><p>###激活模型</p><hr><p>####（1）在settings.py文件中将learning_logs这个app添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#我的应用</span></span><br><span class="line">    <span class="string">'learning_logs'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>####（2）我们使用<code>python manage.py makemigrations</code>命令，makemigrations是Django确认数据库如何修改，输出表示django创建了一个0001_initial.py的迁移文件，之后使用<code>python manage.py migrate</code>这种迁移数据库来修改数据库<br><img src="http://img.blog.csdn.net/20180210213835645?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>#####注：管理数据的正常顺序为：修改models.py，对修改使用makemigrations，最后使用migrate来迁移数据</p><hr><hr><p>###Django管理网站</p><hr><p>####（1）创建超级用户，命令为<code>python manage.py createsuperuser</code></p><p>####（2）向管理网站注册模型，在admin.py文件中添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic,Entry</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br></pre></td></tr></table></figure></p><p>####之后登录<a href="http://127.0.0.1:8000/admin通过Django的后台来进行网站管理，在这个网站中寻在Topic模型，可以在这里添加Topic" target="_blank" rel="noopener">http://127.0.0.1:8000/admin通过Django的后台来进行网站管理，在这个网站中寻在Topic模型，可以在这里添加Topic</a></p><p>####（3）同理我们可以定义一个Entry模型，models.py文件中添加的代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    topic = models.ForeignKey(Topic)</span><br><span class="line">    text = models.TextField()</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name_plural = <span class="string">'entries'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text[:<span class="number">50</span>] + <span class="string">'...'</span></span><br></pre></td></tr></table></figure></p><h4 id="这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys"><a href="#这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys" class="headerlink" title="这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys"></a>这里的<strong>str</strong>指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys</h4><p>####（4）进行数据迁移</p><p>####（5）向管理网站注册entry，在admin.py中添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.site.register(Entry)</span><br></pre></td></tr></table></figure></p><hr><hr>]]></content>
    
    <summary type="html">
    
      本文总结了Django进行开发的常见前期追被工作
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow由于未初始化变量所导致的错误</title>
    <link href="http://yoursite.com/2017/12/07/tensorflow%E7%94%B1%E4%BA%8E%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%98%E9%87%8F%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2017/12/07/tensorflow由于未初始化变量所导致的错误/</id>
    <published>2017-12-07T07:51:52.000Z</published>
    <updated>2018-04-19T15:58:47.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">train_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'train'</span>)</span><br><span class="line">train_input_data = np.array(train_input_data).ravel()</span><br><span class="line">train_input_data = list(train_input_data)</span><br><span class="line">train_input_data = tf.constant(train_input_data,dtype=tf.float32)</span><br><span class="line">train_output_data = train_input_data</span><br><span class="line"></span><br><span class="line">test_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'test'</span>)</span><br><span class="line">test_input_data = np.array(test_input_data).ravel()</span><br><span class="line">test_input_data = list(test_input_data)</span><br><span class="line">test_input_data = tf.constant(test_input_data,shape=[<span class="number">270</span>,<span class="number">1</span>],dtype=tf.float32)</span><br><span class="line">test_output_data = test_input_data</span><br><span class="line"></span><br><span class="line">print(type(train_input_data))</span><br><span class="line"></span><br><span class="line">fc_mean, fc_var = tf.nn.moments(train_input_data,axes=[<span class="number">0</span>])</span><br><span class="line">scale = tf.Variable(tf.ones([<span class="number">1</span>]))</span><br><span class="line">shift = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">epslion = <span class="number">0.001</span></span><br><span class="line">train_input_data = tf.nn.batch_normalization(train_input_data,fc_mean,fc_var,shift,scale,epslion)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(train_input_data)</span><br></pre></td></tr></table></figure><h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1327</span>, <span class="keyword">in</span> _do_call</span><br><span class="line">    <span class="keyword">return</span> fn(*args)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1306</span>, <span class="keyword">in</span> _run_fn</span><br><span class="line">    status, run_metadata)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/contextlib.py"</span>, line <span class="number">89</span>, <span class="keyword">in</span> __exit__</span><br><span class="line">    next(self.gen)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py"</span>, line <span class="number">466</span>, <span class="keyword">in</span> raise_exception_on_not_ok_status</span><br><span class="line">    pywrap_tensorflow.TF_GetCode(status))</span><br><span class="line">tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized value Variable_1</span><br><span class="line"> [[Node: Variable_1/read = Identity[T=DT_FLOAT, _class=[<span class="string">"loc:@Variable_1"</span>], _device=<span class="string">"/job:localhost/replica:0/task:0/cpu:0"</span>](Variable_1)]]</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/zhangjia/PycharmProjects/太阳能预测/test.py"</span>, line <span class="number">30</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a = sess.run(train_input_data)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">895</span>, <span class="keyword">in</span> run</span><br><span class="line">    run_metadata_ptr)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1124</span>, <span class="keyword">in</span> _run</span><br><span class="line">    feed_dict_tensor, options, run_metadata)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1321</span>, <span class="keyword">in</span> _do_run</span><br><span class="line">    options, run_metadata)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1340</span>, <span class="keyword">in</span> _do_call</span><br><span class="line">    <span class="keyword">raise</span> type(e)(node_def, op, message)</span><br><span class="line">tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized value Variable_1</span><br><span class="line"> [[Node: Variable_1/read = Identity[T=DT_FLOAT, _class=[<span class="string">"loc:@Variable_1"</span>], _device=<span class="string">"/job:localhost/replica:0/task:0/cpu:0"</span>](Variable_1)]]</span><br><span class="line"></span><br><span class="line">Caused by op <span class="string">'Variable_1/read'</span>, defined at:</span><br><span class="line">  File <span class="string">"/Users/zhangjia/PycharmProjects/太阳能预测/test.py"</span>, line <span class="number">21</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    shift = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/ops/variables.py"</span>, line <span class="number">199</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    expected_shape=expected_shape)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/ops/variables.py"</span>, line <span class="number">330</span>, <span class="keyword">in</span> _init_from_args</span><br><span class="line">    self._snapshot = array_ops.identity(self._variable, name=<span class="string">"read"</span>)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py"</span>, line <span class="number">1400</span>, <span class="keyword">in</span> identity</span><br><span class="line">    result = _op_def_lib.apply_op(<span class="string">"Identity"</span>, input=input, name=name)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py"</span>, line <span class="number">767</span>, <span class="keyword">in</span> apply_op</span><br><span class="line">    op_def=op_def)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/ops.py"</span>, line <span class="number">2630</span>, <span class="keyword">in</span> create_op</span><br><span class="line">    original_op=self._default_original_op, op_def=op_def)</span><br><span class="line">  File <span class="string">"/Users/zhangjia/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/ops.py"</span>, line <span class="number">1204</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    self._traceback = self._graph._extract_stack()  <span class="comment"># pylint: disable=protected-access</span></span><br><span class="line"></span><br><span class="line">FailedPreconditionError (see above <span class="keyword">for</span> traceback): Attempting to use uninitialized value Variable_1</span><br><span class="line"> [[Node: Variable_1/read = Identity[T=DT_FLOAT, _class=[<span class="string">"loc:@Variable_1"</span>], _device=<span class="string">"/job:localhost/replica:0/task:0/cpu:0"</span>](Variable_1)]]</span><br></pre></td></tr></table></figure><h2 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h2><h4 id="在初始的代码中，由于没有使用tf-global-variables-initializer-函数来对变量初始化，导致代码出现错误"><a href="#在初始的代码中，由于没有使用tf-global-variables-initializer-函数来对变量初始化，导致代码出现错误" class="headerlink" title="在初始的代码中，由于没有使用tf.global_variables_initializer()函数来对变量初始化，导致代码出现错误"></a>在初始的代码中，由于没有使用<code>tf.global_variables_initializer()</code>函数来对变量初始化，导致代码出现错误</h4><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><h4 id="在代码中加入tf-global-variables-initializer-函数来对数据进行初始化之后便可解决"><a href="#在代码中加入tf-global-variables-initializer-函数来对数据进行初始化之后便可解决" class="headerlink" title="在代码中加入tf.global_variables_initializer()函数来对数据进行初始化之后便可解决"></a>在代码中加入<code>tf.global_variables_initializer()</code>函数来对数据进行初始化之后便可解决</h4><h2 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">train_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'train'</span>)</span><br><span class="line">train_input_data = np.array(train_input_data).ravel()</span><br><span class="line">train_input_data = list(train_input_data)</span><br><span class="line">train_input_data = tf.constant(train_input_data,dtype=tf.float32)</span><br><span class="line">train_output_data = train_input_data</span><br><span class="line"></span><br><span class="line">test_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'test'</span>)</span><br><span class="line">test_input_data = np.array(test_input_data).ravel()</span><br><span class="line">test_input_data = list(test_input_data)</span><br><span class="line">test_input_data = tf.constant(test_input_data,shape=[<span class="number">270</span>,<span class="number">1</span>],dtype=tf.float32)</span><br><span class="line">test_output_data = test_input_data</span><br><span class="line"></span><br><span class="line">fc_mean, fc_var = tf.nn.moments(train_input_data,axes=[<span class="number">0</span>])</span><br><span class="line">scale = tf.Variable(tf.ones([<span class="number">1</span>]))</span><br><span class="line">shift = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">epslion = <span class="number">0.001</span></span><br><span class="line">train_input_data = tf.nn.batch_normalization(train_input_data,fc_mean,fc_var,shift,scale,epslion)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用tensorflow由于没有初始化会遇到各种各样的问题，本文对此进行了总结
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>使用Tensorflow实现CNN进行MNIST数字识别</title>
    <link href="http://yoursite.com/2017/11/18/%E4%BD%BF%E7%94%A8Tensorflow%E5%AE%9E%E7%8E%B0CNN%E8%BF%9B%E8%A1%8CMNIST%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>http://yoursite.com/2017/11/18/使用Tensorflow实现CNN进行MNIST数字识别/</id>
    <published>2017-11-18T12:07:57.000Z</published>
    <updated>2018-04-19T15:56:31.498Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="comment"># number 1 to 10 data</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_accuracy</span><span class="params">(v_xs, v_ys)</span>:</span><span class="comment">#返回准确度</span></span><br><span class="line">    <span class="keyword">global</span> prediction</span><br><span class="line">    y_pre = sess.run(prediction, feed_dict=&#123;xs: v_xs, keep_prob: <span class="number">1</span>&#125;)</span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(y_pre,<span class="number">1</span>), tf.argmax(v_ys,<span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">    result = sess.run(accuracy, feed_dict=&#123;xs: v_xs, ys: v_ys, keep_prob: <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span><span class="comment">#定义weight</span></span><br><span class="line">    initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span><span class="comment">#定义bias</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span><span class="comment">#定义卷积层</span></span><br><span class="line">    <span class="comment"># stride [1, x_movement, y_movement, 1]</span></span><br><span class="line">    <span class="comment"># Must have strides[0] = strides[3] = 1</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span><span class="comment">#定义池化层</span></span><br><span class="line">    <span class="comment"># stride [1, x_movement, y_movement, 1]</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define placeholder for inputs to network</span></span><br><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])/<span class="number">255.</span>   <span class="comment"># 28x28</span></span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line">x_image = tf.reshape(xs, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])<span class="comment">#-1指将所有图片的例子维度不管他，之后再加上所有的维度，然后将xs图片信息转变成28x28的矩阵，1指只有一个通道，即黑白的图片</span></span><br><span class="line"><span class="comment"># print(x_image.shape)  # [n_samples, 28,28,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## conv1 layer ##</span></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>,<span class="number">5</span>, <span class="number">1</span>,<span class="number">32</span>]) <span class="comment"># 指筛选器 5x5, 步数 1, 深度 32</span></span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1) <span class="comment"># output size 28x28x32</span></span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)                                         <span class="comment"># output size 14x14x32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## conv2 layer ##</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>,<span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>]) <span class="comment"># patch 5x5, in size 32, out size 64</span></span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2) <span class="comment"># output size 14x14x64，激活去线性化</span></span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)                                         <span class="comment"># output size 7x7x64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## fc1 layer ##</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>, <span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="number">1024</span>])</span><br><span class="line"><span class="comment"># [n_samples, 7, 7, 64] -&gt;&gt; [n_samples, 7*7*64]</span></span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment">## fc2 layer ##</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line">prediction = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the error between prediction and real data</span></span><br><span class="line">cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),</span><br><span class="line">                                              reduction_indices=[<span class="number">1</span>]))       <span class="comment"># loss</span></span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># important step</span></span><br><span class="line"><span class="comment"># tf.initialize_all_variables() no long valid from</span></span><br><span class="line"><span class="comment"># 2017-03-02 if using tensorflow &gt;= 0.12</span></span><br><span class="line"><span class="keyword">if</span> int((tf.__version__).split(<span class="string">'.'</span>)[<span class="number">1</span>]) &lt; <span class="number">12</span> <span class="keyword">and</span> int((tf.__version__).split(<span class="string">'.'</span>)[<span class="number">0</span>]) &lt; <span class="number">1</span>:</span><br><span class="line">    init = tf.initialize_all_variables()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;xs: batch_xs, ys: batch_ys, keep_prob: <span class="number">0.5</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        print(compute_accuracy(</span><br><span class="line">            mnist.test.images[:<span class="number">1000</span>], mnist.test.labels[:<span class="number">1000</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文使用tensorflow实现CNN进行MNIST数字识别
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Python常用的程序调试方法</title>
    <link href="http://yoursite.com/2017/11/17/Python%E5%B8%B8%E7%94%A8%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/17/Python常用的程序调试方法/</id>
    <published>2017-11-17T08:01:01.000Z</published>
    <updated>2018-04-24T11:44:35.207Z</updated>
    
    <content type="html"><![CDATA[<h4 id="程序能一次写完并正常运行的概率很小，基本不超过1-，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法"><a href="#程序能一次写完并正常运行的概率很小，基本不超过1-，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法" class="headerlink" title="程序能一次写完并正常运行的概率很小，基本不超过1%，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法"></a>程序能一次写完并正常运行的概率很小，基本不超过1%，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法</h4><hr><h2 id="1-断点打印法"><a href="#1-断点打印法" class="headerlink" title="1. 断点打印法"></a>1. 断点打印法</h2><h4 id="第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看："><a href="#第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看：" class="headerlink" title="第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看："></a>第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看：</h4><h4 id="err-py"><a href="#err-py" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">n = int(s)</span><br><span class="line">print &apos;&gt;&gt;&gt; n = %d&apos; % n</span><br><span class="line">return 10 / n</span><br><span class="line">def main():</span><br><span class="line">foo(&apos;0&apos;)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h4 id="执行后在输出中查找打印的变量值："><a href="#执行后在输出中查找打印的变量值：" class="headerlink" title="执行后在输出中查找打印的变量值："></a>执行后在输出中查找打印的变量值：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">&gt;&gt;&gt; n = 0</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。"><a href="#用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。" class="headerlink" title="用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。"></a>用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。</h4><hr><h2 id="2-断言"><a href="#2-断言" class="headerlink" title="2. 断言"></a>2. 断言</h2><p>####凡是用print来辅助查看的地方，都可以用断言（assert）来替代：</p><h4 id="err-py-1"><a href="#err-py-1" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">n = int(s)</span><br><span class="line">assert n != 0, &apos;n is zero!&apos;</span><br><span class="line">return 10 / n</span><br><span class="line">def main():</span><br><span class="line">foo(&apos;0&apos;)</span><br></pre></td></tr></table></figure><h4 id="assert的意思是，表达式n-0应该是True，否则，后面的代码就会出错。"><a href="#assert的意思是，表达式n-0应该是True，否则，后面的代码就会出错。" class="headerlink" title="assert的意思是，表达式n != 0应该是True，否则，后面的代码就会出错。"></a>assert的意思是，表达式n != 0应该是True，否则，后面的代码就会出错。</h4><h4 id="如果断言失败，assert语句本身就会抛出AssertionError："><a href="#如果断言失败，assert语句本身就会抛出AssertionError：" class="headerlink" title="如果断言失败，assert语句本身就会抛出AssertionError："></a>如果断言失败，assert语句本身就会抛出AssertionError：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">AssertionError: n is zero!</span><br></pre></td></tr></table></figure><h4 id="程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert："><a href="#程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert：" class="headerlink" title="程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert："></a>程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python -O err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="关闭后，你可以把所有的assert语句当成pass来看。"><a href="#关闭后，你可以把所有的assert语句当成pass来看。" class="headerlink" title="关闭后，你可以把所有的assert语句当成pass来看。"></a>关闭后，你可以把所有的assert语句当成pass来看。</h4><hr><h2 id="3-logging日志"><a href="#3-logging日志" class="headerlink" title="3. logging日志"></a>3. logging日志</h2><h4 id="把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件："><a href="#把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件：" class="headerlink" title="把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件："></a>把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件：</h4><p>####err.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">s = &apos;0&apos;</span><br><span class="line">n = int(s)</span><br><span class="line">logging.info(&apos;n = %d&apos; % n)</span><br><span class="line">print 10 / n</span><br></pre></td></tr></table></figure></p><h4 id="logging-info-就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？"><a href="#logging-info-就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？" class="headerlink" title="logging.info()就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？"></a>logging.info()就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？</h4><h4 id="别急，在import-logging之后添加一行配置再试试："><a href="#别急，在import-logging之后添加一行配置再试试：" class="headerlink" title="别急，在import logging之后添加一行配置再试试："></a>别急，在import logging之后添加一行配置再试试：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br></pre></td></tr></table></figure><h4 id="看到输出了："><a href="#看到输出了：" class="headerlink" title="看到输出了："></a>看到输出了：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">INFO:root:n = 0</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File &quot;err.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">  print 10 / n</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level-INFO时，logging-debug就不起作用了。同理，指定level-WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。"><a href="#这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level-INFO时，logging-debug就不起作用了。同理，指定level-WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。" class="headerlink" title="这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。"></a>这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。</h4><h4 id="logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。"><a href="#logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。" class="headerlink" title="logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。"></a>logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。</h4><hr><h2 id="4-pdb调试"><a href="#4-pdb调试" class="headerlink" title="4. pdb调试"></a>4. pdb调试</h2><h4 id="第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序："><a href="#第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：" class="headerlink" title="第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序："></a>第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：</h4><h4 id="err-py-2"><a href="#err-py-2" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;0&apos;</span><br><span class="line">n = int(s)</span><br><span class="line">print 10 / n</span><br></pre></td></tr></table></figure><h4 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pdb err.py</span><br><span class="line">&gt; /Users/PythonTab/Github/sicp/err.py(2)&lt;module&gt;()</span><br><span class="line">-&gt; s = &apos;0&apos;</span><br></pre></td></tr></table></figure><h4 id="以参数-m-pdb启动后，pdb定位到下一步要执行的代码-gt-s-‘0’。输入命令l来查看代码："><a href="#以参数-m-pdb启动后，pdb定位到下一步要执行的代码-gt-s-‘0’。输入命令l来查看代码：" class="headerlink" title="以参数-m pdb启动后，pdb定位到下一步要执行的代码-&gt; s = ‘0’。输入命令l来查看代码："></a>以参数-m pdb启动后，pdb定位到下一步要执行的代码-&gt; s = ‘0’。输入命令l来查看代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) l</span><br><span class="line"> 1   # err.py</span><br><span class="line"> 2 -&gt; s = &apos;0&apos;</span><br><span class="line"> 3   n = int(s)</span><br><span class="line"> 4   print 10 / n</span><br><span class="line">[EOF]</span><br></pre></td></tr></table></figure><h4 id="输入命令n可以单步执行代码："><a href="#输入命令n可以单步执行代码：" class="headerlink" title="输入命令n可以单步执行代码："></a>输入命令n可以单步执行代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) n</span><br><span class="line">/Users/PythonTab/Github/sicp/err.py(3)&lt;module&gt;()</span><br><span class="line">-&gt; n = int(s)</span><br><span class="line">(Pdb) n</span><br><span class="line">/Users/PythonTab/Github/sicp/err.py(4)&lt;module&gt;()</span><br><span class="line">-&gt; print 10 / n</span><br></pre></td></tr></table></figure><h4 id="任何时候都可以输入命令p-变量名来查看变量："><a href="#任何时候都可以输入命令p-变量名来查看变量：" class="headerlink" title="任何时候都可以输入命令p 变量名来查看变量："></a>任何时候都可以输入命令p 变量名来查看变量：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p s</span><br><span class="line">&apos;0&apos;</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="输入命令q结束调试，退出程序："><a href="#输入命令q结束调试，退出程序：" class="headerlink" title="输入命令q结束调试，退出程序："></a>输入命令q结束调试，退出程序：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) n</span><br><span class="line">ZeroDivisionError: &apos;integer division or modulo by zero&apos;</span><br><span class="line">&gt; /Users/PythonTab/Github/sicp/err.py(4)&lt;module&gt;()</span><br><span class="line">-&gt; print 10 / n</span><br><span class="line">(Pdb) q</span><br></pre></td></tr></table></figure><h4 id="这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。"><a href="#这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。" class="headerlink" title="这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。"></a>这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。</h4><h4 id="pdb-set-trace"><a href="#pdb-set-trace" class="headerlink" title="pdb.set_trace()"></a><code>pdb.set_trace()</code></h4><h4 id="这个方法也是用pdb，但是不需要单步执行，我们只需要import-pdb，然后，在可能出错的地方放一个pdb-set-trace-，就可以设置一个断点："><a href="#这个方法也是用pdb，但是不需要单步执行，我们只需要import-pdb，然后，在可能出错的地方放一个pdb-set-trace-，就可以设置一个断点：" class="headerlink" title="这个方法也是用pdb，但是不需要单步执行，我们只需要import pdb，然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点："></a>这个方法也是用pdb，但是不需要单步执行，我们只需要import pdb，然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点：</h4><h4 id="err-py-3"><a href="#err-py-3" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pdb</span><br><span class="line">s = &apos;0&apos;</span><br><span class="line">n = int(s)</span><br><span class="line">pdb.set_trace() # 运行到这里会自动暂停</span><br><span class="line">print 10 / n</span><br></pre></td></tr></table></figure><h4 id="运行代码，程序会自动在pdb-set-trace-暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行："><a href="#运行代码，程序会自动在pdb-set-trace-暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行：" class="headerlink" title="运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行："></a>运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py </span><br><span class="line">&gt; /Users/PythonTab/Github/sicp/err.py(7)&lt;module&gt;()</span><br><span class="line">-&gt; print 10 / n</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br><span class="line">(Pdb) c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File &quot;err.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">  print 10 / n</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。"><a href="#这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。" class="headerlink" title="这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。"></a>这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。</h4><h2 id="5-IDE调试"><a href="#5-IDE调试" class="headerlink" title="5. IDE调试"></a>5. IDE调试</h2><h4 id="如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python-IDE有PyCharm，"><a href="#如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python-IDE有PyCharm，" class="headerlink" title="如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python IDE有PyCharm，"></a>如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python IDE有PyCharm，</h4><h4 id="另外，Eclipse加上pydev插件也可以调试Python程序。"><a href="#另外，Eclipse加上pydev插件也可以调试Python程序。" class="headerlink" title="另外，Eclipse加上pydev插件也可以调试Python程序。"></a>另外，Eclipse加上pydev插件也可以调试Python程序。</h4><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h4 id="写程序花费的时间往往要小于调试的时间，这个是基本规律。"><a href="#写程序花费的时间往往要小于调试的时间，这个是基本规律。" class="headerlink" title="写程序花费的时间往往要小于调试的时间，这个是基本规律。"></a>写程序花费的时间往往要小于调试的时间，这个是基本规律。</h4><h4 id="虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！"><a href="#虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！" class="headerlink" title="虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！"></a>虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！</h4><hr><h6 id="本文章为转载，原文章链接：http-www-pythontab-com-html-2017-pythonhexinbiancheng-1115-1182-html-ref-myread"><a href="#本文章为转载，原文章链接：http-www-pythontab-com-html-2017-pythonhexinbiancheng-1115-1182-html-ref-myread" class="headerlink" title="本文章为转载，原文章链接：http://www.pythontab.com/html/2017/pythonhexinbiancheng_1115/1182.html?ref=myread"></a>本文章为转载，原文章链接：<a href="http://www.pythontab.com/html/2017/pythonhexinbiancheng_1115/1182.html?ref=myread" target="_blank" rel="noopener">http://www.pythontab.com/html/2017/pythonhexinbiancheng_1115/1182.html?ref=myread</a></h6>]]></content>
    
    <summary type="html">
    
      程序能一次写完并正常运行的概率很小，基本不超过1%，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow卷积神经网络常用结构</title>
    <link href="http://yoursite.com/2017/11/17/Tensorflow%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B8%B8%E7%94%A8%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/11/17/Tensorflow卷积神经网络常用结构/</id>
    <published>2017-11-17T07:36:51.000Z</published>
    <updated>2018-04-19T15:52:08.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-卷积层"><a href="#1-卷积层" class="headerlink" title="1.卷积层"></a>1.卷积层</h2><h3 id="Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。"><a href="#Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。" class="headerlink" title="Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。"></a>Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">filter_weight = tf.get_variable(</span><br><span class="line"></span><br><span class="line"><span class="comment">#前两个维度代表过滤器的尺寸，第三个维度表示当前层的深度，</span></span><br><span class="line"><span class="comment">#第四个表示过滤器的深度。</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'weight'</span>,[<span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">16</span>],</span><br><span class="line">initializer=tf.truncated_normal_initializer(stddev=<span class="number">0.1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">biases = tf.get_variable(</span><br><span class="line"><span class="comment">#由于当前过滤器的深度为16，所以偏置相为16，也是神经网络中下一层节点矩阵深度</span></span><br><span class="line">    <span class="string">'biases'</span>,[<span class="number">16</span>],initializer=tf.constant_initializer(<span class="number">0.1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">conv = tf.nn.conv2d(</span><br><span class="line">input,filter_weight,strides=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">bias = tf.nn.bias_add(conv,biases)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过ReLU函数激活，去线性化</span></span><br><span class="line">actived_conv = tf.nn.relu(bias)</span><br></pre></td></tr></table></figure><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><h4 id="1-tf-nn-conv2d提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input-0-指输入第一张图片，input-1-指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。"><a href="#1-tf-nn-conv2d提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input-0-指输入第一张图片，input-1-指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。" class="headerlink" title="1.tf.nn.conv2d提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input[0,:,:,:]指输入第一张图片，input[1,:,:,:]指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。"></a>1.<code>tf.nn.conv2d</code>提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input[0,:,:,:]指输入第一张图片，input[1,:,:,:]指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。</h4><h4 id="2-tf-nn-bias-add提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。"><a href="#2-tf-nn-bias-add提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。" class="headerlink" title="2.tf.nn.bias_add提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。"></a>2.<code>tf.nn.bias_add</code>提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。</h4><h2 id="2-池化层"><a href="#2-池化层" class="headerlink" title="2.池化层"></a>2.池化层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pool = tf.nn.max_pool(actived_conv,ksize=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br></pre></td></tr></table></figure><h4 id="tf-nn-max-pool实现了最大池化层的前向传播，他的参数和tf-nn-conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。"><a href="#tf-nn-max-pool实现了最大池化层的前向传播，他的参数和tf-nn-conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。" class="headerlink" title="tf.nn.max_pool实现了最大池化层的前向传播，他的参数和tf.nn.conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。"></a>tf.nn.max_pool实现了最大池化层的前向传播，他的参数和tf.nn.conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。</h4>]]></content>
    
    <summary type="html">
    
      Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow持久化原理及数据格式</title>
    <link href="http://yoursite.com/2017/11/16/Tensorflow%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/11/16/Tensorflow持久化原理及数据格式/</id>
    <published>2017-11-16T11:23:24.000Z</published>
    <updated>2018-04-19T15:50:15.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tensorflow持久化原理及数据格式"><a href="#Tensorflow持久化原理及数据格式" class="headerlink" title="Tensorflow持久化原理及数据格式"></a>Tensorflow持久化原理及数据格式</h1><hr><h4 id="Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义"><a href="#Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义" class="headerlink" title="Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义"></a>Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message MetaGraphDef&#123;</span><br><span class="line">MeatInfoDef meta_info_def = <span class="number">1</span>;</span><br><span class="line">GraphDef graph_def = <span class="number">2</span>;</span><br><span class="line">SaverDef saver_def = <span class="number">3</span>;</span><br><span class="line">map&lt;string,CollectionDef&gt; collection_def = <span class="number">4</span>;</span><br><span class="line">map&lt;string,SignatureDef&gt; signature_def = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="保存MetaGraphDef信息的文件默认以-meta为后缀名，在之前的例子中文件test-ckpt-meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export-meta-graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码"><a href="#保存MetaGraphDef信息的文件默认以-meta为后缀名，在之前的例子中文件test-ckpt-meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export-meta-graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码" class="headerlink" title="保存MetaGraphDef信息的文件默认以.meta为后缀名，在之前的例子中文件test.ckpt.meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export_meta_graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码"></a>保存MetaGraphDef信息的文件默认以.meta为后缀名，在之前的例子中文件test.ckpt.meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export_meta_graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">1.0</span>, shape=[<span class="number">1</span>]), name =<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(tf.constant(<span class="number">2.0</span>, shape=[<span class="number">1</span>]), name =<span class="string">"v2"</span>)</span><br><span class="line">result1 = v1 + v2</span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"><span class="comment">#通过export_meta_graph函数导出Tensorflow的计算图的元图，并保存为json格式</span></span><br><span class="line">saver.export_meta_graph(<span class="string">"test/test.ckpt.json"</span>, as_text=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="meta-info-def-属性"><a href="#meta-info-def-属性" class="headerlink" title="meta_info_def 属性"></a>meta_info_def 属性</h2><h4 id="meta-info-def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义"><a href="#meta-info-def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义" class="headerlink" title="meta_info_def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义"></a>meta_info_def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message MetaInfoDef&#123;</span><br><span class="line"><span class="comment">#saver没有特殊指定，默认属性都为空。meta_info_def属性里只有stripped_op_list属性不能为空。</span></span><br><span class="line">string meta_graph_version = <span class="number">1</span>;<span class="comment">#该属性不能为空</span></span><br><span class="line">OpList stripped_op_list = <span class="number">2</span>;<span class="comment">#该属性记录了计算图中使用到的所有运算方法的信息，该函数只记录运算信息，不记录计算的次数</span></span><br><span class="line">google.protobuf.Any any_info = <span class="number">3</span>;</span><br><span class="line">repeated string tags = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="元数据包括计算图的版本号（meta-graph-version属性）以及用户指定的一些标签（tags属性）。"><a href="#元数据包括计算图的版本号（meta-graph-version属性）以及用户指定的一些标签（tags属性）。" class="headerlink" title="元数据包括计算图的版本号（meta_graph_version属性）以及用户指定的一些标签（tags属性）。"></a>元数据包括计算图的版本号（meta_graph_version属性）以及用户指定的一些标签（tags属性）。</h4><hr><h4 id="OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义："><a href="#OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义：" class="headerlink" title="OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义："></a>OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">message opDef&#123;</span><br><span class="line">string name = <span class="number">1</span>;<span class="comment">#定义了运算的名称</span></span><br><span class="line">repeated ArgDef input_arg = <span class="number">2</span>; <span class="comment">#定义了输入，属性是列表</span></span><br><span class="line">repeated ArgDef output_arg =<span class="number">3</span>; <span class="comment">#定义了输出，属性是列表</span></span><br><span class="line">repeated AttrDef attr = <span class="number">4</span>;<span class="comment">#给出了其他运算的参数信息</span></span><br><span class="line">string summary = <span class="number">5</span>;</span><br><span class="line">string description = <span class="number">6</span>;</span><br><span class="line">OpDeprecation deprecation = <span class="number">8</span>;</span><br><span class="line">bool is_commutative = <span class="number">18</span>;</span><br><span class="line">bool is_aggregate = <span class="number">16</span></span><br><span class="line">bool is_stateful = <span class="number">17</span>;</span><br><span class="line">bool allows_uninitialized_input = <span class="number">19</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。"><a href="#下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。" class="headerlink" title="下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。"></a>下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">op &#123;</span><br><span class="line">name: <span class="string">"Add"</span></span><br><span class="line">input_arg&#123;</span><br><span class="line">name: <span class="string">"x"</span></span><br><span class="line">type_attr:<span class="string">"T"</span></span><br><span class="line">&#125;</span><br><span class="line">input_arg&#123;</span><br><span class="line">name: <span class="string">"y"</span></span><br><span class="line">type_attr:<span class="string">"T"</span></span><br><span class="line">&#125;</span><br><span class="line">output_arg&#123;</span><br><span class="line">name: <span class="string">"z"</span></span><br><span class="line">type_attr:<span class="string">"T"</span></span><br><span class="line">&#125;</span><br><span class="line">attr&#123;</span><br><span class="line">name:<span class="string">"T"</span></span><br><span class="line">type:<span class="string">"type"</span></span><br><span class="line">allow_values&#123;</span><br><span class="line">list&#123;</span><br><span class="line">type:DT_HALF</span><br><span class="line">type:DT_FLOAT</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面给出的是名称为Add的运算。这个运算的输入有两个，输出有一个，输入输出属性均指定了属性typr_attr，并且这个属性的值为T。在OpDef的attr的属性中。必须要出现名称（name）为T的属性。以上样例中，这个属性指定了运算输入输出允许的参数类型 （allowed_values）。</p><hr><h2 id="graph-def属性"><a href="#graph-def属性" class="headerlink" title="graph_def属性"></a>graph_def属性</h2><h4 id="graph-def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta-info-def中已经包含所有运算的具体信息，所以graph-def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息："><a href="#graph-def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta-info-def中已经包含所有运算的具体信息，所以graph-def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息：" class="headerlink" title="graph_def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta_info_def中已经包含所有运算的具体信息，所以graph_def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息："></a>graph_def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta_info_def中已经包含所有运算的具体信息，所以graph_def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">message GraphDef&#123;</span><br><span class="line"><span class="comment">#GraphDef的主要信息存储在node属性中，他记录了Tensorflow计算图上所有的节点信息。</span></span><br><span class="line">repeated NodeDef node = <span class="number">1</span>;</span><br><span class="line">VersionDef versions = <span class="number">4</span>; <span class="comment">#主要储存了Tensorflow的版本号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message NodeDef&#123;</span><br><span class="line"><span class="comment">#NodeDef类型中有一个名称属性name，他是一个节点的唯一标识符，在程序中，通过节点的名称来获得相应的节点。</span></span><br><span class="line">string name = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">op属性给出了该节点使用的Tensorflow运算方法的名称。</span></span><br><span class="line"><span class="string">通过这个名称可以在TensorFlow计算图元图的meta_info_def属性中找到该运算的具体信息。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">string op = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">input属性是一个字符串列表，他定义了运算的输入。每个字符串饿的取值格式为弄的：src_output</span></span><br><span class="line"><span class="string">node部分给出节点名称，src_output表明了这个输入是指定节点的第几个输出。</span></span><br><span class="line"><span class="string">src_output=0时可以省略src_output部分</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">repeated string input = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#制定了处理这个运算的设备，可以是本地或者远程的CPU or GPU。属性为空时自动选择</span></span><br><span class="line">string device = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#制定了和当前运算有关的配置信息</span></span><br><span class="line">map&lt;string, AttrValue&gt; attr = <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="下面列举test-ckpt-meta-json具体介绍graph-def属性"><a href="#下面列举test-ckpt-meta-json具体介绍graph-def属性" class="headerlink" title="下面列举test.ckpt.meta.json具体介绍graph_def属性"></a>下面列举test.ckpt.meta.json具体介绍graph_def属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">graph def &#123;</span><br><span class="line">node &#123;</span><br><span class="line">name: <span class="string">"v1"</span></span><br><span class="line">op: <span class="string">"Variable"</span></span><br><span class="line">attr &#123;</span><br><span class="line">key:<span class="string">"_output_shapes"</span></span><br><span class="line">value &#123;</span><br><span class="line">list&#123; shape &#123; dim &#123; size: <span class="number">1</span> &#125; &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">attr &#123; </span><br><span class="line">key :<span class="string">"dtype"</span></span><br><span class="line">value &#123;</span><br><span class="line">type: DT_FLOAT</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">node &#123;</span><br><span class="line">name :<span class="string">"add"</span></span><br><span class="line">op :<span class="string">"Add"</span></span><br><span class="line">input :<span class="string">"v1/read"</span> <span class="comment">#read指读取变量v1的值</span></span><br><span class="line">input: <span class="string">"v2/read"</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">node &#123;</span><br><span class="line">name: <span class="string">"save/control_dependency"</span> <span class="comment">#指系统在完成tensorflow模型持久化过程中自动生成一个运算。</span></span><br><span class="line">op:<span class="string">"Identity"</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">versions &#123;</span><br><span class="line">producer :<span class="number">9</span> <span class="comment">#给出了文件使用时的Tensorflow版本号。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="saver-def属性"><a href="#saver-def属性" class="headerlink" title="saver_def属性"></a>saver_def属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">message SaverDef &#123;</span><br><span class="line">string filename_tensor_name = <span class="number">1</span>;</span><br><span class="line">string save_tensor_name = <span class="number">2</span>;</span><br><span class="line">string restore_op_name = <span class="number">3</span>;</span><br><span class="line">int32 max_to_keep = <span class="number">4</span>;</span><br><span class="line">bool sharded = <span class="number">5</span>;</span><br><span class="line">float keep_checkpoint_every_n_hours = <span class="number">6</span>;</span><br><span class="line">enum CheckpointFormatVersion &#123;</span><br><span class="line">LEGACY = <span class="number">0</span>;</span><br><span class="line">V1 = <span class="number">1</span>;</span><br><span class="line">V2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">CheckpointFormatVersion version = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下面给出test-ckpt-meta-json文件中saver-def属性的内容。"><a href="#下面给出test-ckpt-meta-json文件中saver-def属性的内容。" class="headerlink" title="下面给出test.ckpt.meta.json文件中saver_def属性的内容。"></a>下面给出test.ckpt.meta.json文件中saver_def属性的内容。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">saver_def &#123;</span><br><span class="line">filename_tensor_name :<span class="string">"save/Const:0”</span></span><br><span class="line"><span class="string">#给出了保存文件的张量名，这个张量就是节点save/Const的第一个输出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">save_tensor_name :"</span>save/control_dependency: <span class="number">0</span>”</span><br><span class="line"><span class="comment">#给出了持久化模型运算所对应的节点名称</span></span><br><span class="line"></span><br><span class="line">restore_op_name: <span class="string">"save/restore_all"</span></span><br><span class="line"><span class="comment">#和持久性模型运算对应的是加载模型的运算的名称</span></span><br><span class="line"></span><br><span class="line">max_to_keep:<span class="number">5</span></span><br><span class="line">keep_checkpoint_every_n_hours :<span class="number">10000.0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">上面两个属性设定了tf.train.Saver类清理之前保存的模型的策略。比如当max_to_keep为5时，第六次调用</span></span><br><span class="line"><span class="string">saver.save时，第一次保存的模型就会被自动删除，通过设置keep_checkpoint_every_n_hours，每n小</span></span><br><span class="line"><span class="string">时可以在max_to_keep的基础上保存一个模型</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h2 id="collection-def属性"><a href="#collection-def属性" class="headerlink" title="collection_def属性"></a>collection_def属性</h2><h4 id="collection-def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef-Protocol-Buffer。以下代码给出CollectionDef类型的定义"><a href="#collection-def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef-Protocol-Buffer。以下代码给出CollectionDef类型的定义" class="headerlink" title="collection_def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef Protocol Buffer。以下代码给出CollectionDef类型的定义"></a>collection_def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef Protocol Buffer。以下代码给出CollectionDef类型的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">message CollectionDef &#123;</span><br><span class="line">message Nodelist &#123;</span><br><span class="line"><span class="comment">#用于维护计算图上的节点集合</span></span><br><span class="line">repeated string value = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message BytesList &#123;</span><br><span class="line"><span class="comment">#维护字符串或者系列化之后的Procotol Buffer的集合。例如张量是通过Protocol Buffer表示的，而张量的集合是通过BytesList维护的。</span></span><br><span class="line">repeated bytes value = <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Int64List &#123;</span><br><span class="line">repeated int64 value = <span class="number">1</span>[packed = true];</span><br><span class="line">&#125;</span><br><span class="line">message FloatList &#123;</span><br><span class="line">repeated float value = <span class="number">1</span>[packed = true] ;</span><br><span class="line">&#125;</span><br><span class="line">message AnyList &#123;</span><br><span class="line">repeated google.protobuf.Any value= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">oneof kind &#123;</span><br><span class="line">NodeList node_list = <span class="number">1</span>;</span><br><span class="line">BytesList bytes_lista = <span class="number">2</span>;</span><br><span class="line">Int64List int64_list = <span class="number">3</span>;</span><br><span class="line">Floatlist float_list = <span class="number">4</span>;</span><br><span class="line">AnyList any_list = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下面给出了test-ckpt-meta-json文件中的collection-def属性的内容"><a href="#下面给出了test-ckpt-meta-json文件中的collection-def属性的内容" class="headerlink" title="下面给出了test.ckpt.meta.json文件中的collection_def属性的内容"></a>下面给出了test.ckpt.meta.json文件中的collection_def属性的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">collection_def &#123;</span><br><span class="line"><span class="comment">#可训练变量的集合</span></span><br><span class="line">key: <span class="string">"trainable_variables"</span></span><br><span class="line">value &#123;</span><br><span class="line">bytes_list &#123;</span><br><span class="line">value; <span class="string">"\n\004v1:0\022\tv1/Assign\032\tv1/read:0"</span></span><br><span class="line">value: <span class="string">"\n\004v2:0\022\tv2/Assign\032\cv2/read:0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">collection_def &#123;</span><br><span class="line"><span class="comment">#所有变量的集合</span></span><br><span class="line">key: <span class="string">"variables"</span></span><br><span class="line">value &#123;</span><br><span class="line">bytes_list &#123;</span><br><span class="line">value:<span class="string">"\n\004v1:0\022\tv1/Assign\032\tv1/read:0"</span></span><br><span class="line">value:<span class="string">"\n\004v2:0\022\tv2/Assign\032\tv2/read:0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow模型持久化的代码实现</title>
    <link href="http://yoursite.com/2017/11/16/Tensorflow%E6%A8%A1%E5%9E%8B%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/11/16/Tensorflow模型持久化的代码实现/</id>
    <published>2017-11-16T06:01:19.000Z</published>
    <updated>2018-04-19T15:47:54.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-存储模型"><a href="#1-存储模型" class="headerlink" title="1.存储模型"></a>1.存储模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">1.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(tf.constant(<span class="number">2.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v2"</span>)</span><br><span class="line">result = v1 + v2</span><br><span class="line"></span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line">saver = tf.train.Saver()<span class="comment">#声明tf.train.Saver()类用于保存模型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">sess.run(init_op)</span><br><span class="line">saver.save(sess, <span class="string">"test/test.ckpt"</span>)<span class="comment">#将模型保存于test文件夹中</span></span><br></pre></td></tr></table></figure><h3 id="运行该程序后，将在test文件中出现以下的文件"><a href="#运行该程序后，将在test文件中出现以下的文件" class="headerlink" title="运行该程序后，将在test文件中出现以下的文件"></a>运行该程序后，将在test文件中出现以下的文件</h3><p><img src="http://img.blog.csdn.net/20171116133008913?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h1 id="2-加载模型"><a href="#2-加载模型" class="headerlink" title="2.加载模型"></a>2.加载模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">1.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(tf.constant(<span class="number">4.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v2"</span>)</span><br><span class="line">result = v1 + v2</span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">saver.restore(sess, <span class="string">"test/test.ckpt"</span>)<span class="comment">#加载已经保存的模型，并通过已经保存的模型中的变量的值来计算加法</span></span><br><span class="line">print(sess.run(result))</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算输出结果为[3.]不是[5.]是因为该程序加载了之前保存的模型，所以计算的变量也是保存的模型中的变量</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171116133553267?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzg1NDIwODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="如果不希望重复定义变量以及运算，可以直接加载已经持久化的图"><a href="#如果不希望重复定义变量以及运算，可以直接加载已经持久化的图" class="headerlink" title="如果不希望重复定义变量以及运算，可以直接加载已经持久化的图"></a>如果不希望重复定义变量以及运算，可以直接加载已经持久化的图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">saver = tf.train.import_meta_graph(<span class="string">"test/test.ckpt.meta"</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">saver.restore(sess, <span class="string">"test/test.ckpt"</span>)</span><br><span class="line"><span class="comment">#通过张量的名称来获取张量</span></span><br><span class="line">print(sess.run(tf.get_default_graph().get_tensor_by_name(<span class="string">"add:0"</span>)))</span><br><span class="line"><span class="comment">#输出[3.]</span></span><br></pre></td></tr></table></figure><p>该程序默认保存和加载了Tensorflow计算图中定义的全部变量。</p><hr><h1 id="3-加载或者保存部分变量"><a href="#3-加载或者保存部分变量" class="headerlink" title="3.加载或者保存部分变量"></a>3.加载或者保存部分变量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">saver = tf.train.Saver([v1])<span class="comment">#该命令只用来加载变量v1</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-加载或者保存时对变量重命名"><a href="#4-加载或者保存时对变量重命名" class="headerlink" title="4.加载或者保存时对变量重命名"></a>4.加载或者保存时对变量重命名</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里声明的变量名称和已经保存的模型中变量的名称不同</span></span><br><span class="line">V1=tf.Variable(tf.constant(<span class="number">1.0</span>,shape=[<span class="number">1</span>]),name=<span class="string">"other-v1"</span>)</span><br><span class="line">V2=tf.variable(tf.constant (<span class="number">2.0</span>，shape=[<span class="number">1</span>]),name=<span class="string">"other-v2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果直接使用tf.train.Saver () 来加载模型会报变量找不到的错误。下面显示了报错信息:</span></span><br><span class="line"><span class="comment"># tensorflow.python.framewotk.erors.NotFoundError: Tensor name "other-v2"</span></span><br><span class="line"><span class="comment"># not found in checkpoint files /test/test.ckpt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一个字典(aictionary) 来重命名变量可以就可以加载原来的模型了。这个字典指定了</span></span><br><span class="line"><span class="comment"># 原来名称为v1的变量现在加载到变量v1中(名称为other-v1),名称为v2的变量</span></span><br><span class="line"><span class="comment"># 加载到变量v2 中(名称为other-v2)。</span></span><br><span class="line">saver=tf.train.Saver(&#123;<span class="string">"v1"</span>=v1,<span class="string">"v2"</span>:v2&#125;)</span><br></pre></td></tr></table></figure><h4 id="如果直接通过saver-tf-train-Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。"><a href="#如果直接通过saver-tf-train-Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。" class="headerlink" title="如果直接通过saver=tf.train.Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。"></a>如果直接通过saver=tf.train.Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。</h4>]]></content>
    
    <summary type="html">
    
      tensorflow模型持久化在实际使用中用处极大，本文对此进行了总结
    
    </summary>
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
</feed>
