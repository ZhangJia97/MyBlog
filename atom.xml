<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随我的博客</title>
  
  <subtitle>记录学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suiwo.xyz/"/>
  <updated>2020-05-26T06:16:28.504Z</updated>
  <id>http://suiwo.xyz/</id>
  
  <author>
    <name>随我</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flume初识</title>
    <link href="http://suiwo.xyz/2020/05/24/Flume%E5%88%9D%E8%AF%86/"/>
    <id>http://suiwo.xyz/2020/05/24/Flume初识/</id>
    <published>2020-05-24T14:54:21.000Z</published>
    <updated>2020-05-26T06:16:28.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是尚硅谷Flume课程随手笔记</p></blockquote><hr><h3 id="一、安装Flume并实现一个简易端口监控"><a href="#一、安装Flume并实现一个简易端口监控" class="headerlink" title="一、安装Flume并实现一个简易端口监控"></a>一、安装Flume并实现一个简易端口监控</h3><blockquote><p>实现监控端口案例，通过Flume来监听端口数据，并将数据打印到控制台</p></blockquote><hr><h4 id="1-首先进入官网下载Flume源码包"><a href="#1-首先进入官网下载Flume源码包" class="headerlink" title="1. 首先进入官网下载Flume源码包"></a>1. 首先进入官网下载Flume源码包</h4><hr><h4 id="2-修改flume-env-sh文件"><a href="#2-修改flume-env-sh文件" class="headerlink" title="2. 修改flume-env.sh文件"></a>2. 修改flume-env.sh文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure><hr><h4 id="3-添加配置文件"><a href="#3-添加配置文件" class="headerlink" title="3. 添加配置文件"></a>3. 添加配置文件</h4><p>创建Flume Agent配置文件flume-netcat-logger.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为netcat端口类型</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line"># 表示a1的监听的主机</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line"># 表示a1的监听的端口号</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="4-启动Flume"><a href="#4-启动Flume" class="headerlink" title="4. 启动Flume"></a>4. 启动Flume</h4><p>启动终端，在终端中属于下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf/ --name a1 --conf-file job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>使用下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc localhost 44444</span><br></pre></td></tr></table></figure></p><p>通过netcat发送数据，发现此时flume日志中显示接收到数据</p><hr><hr><h3 id="二、-实时监控单个追加文件"><a href="#二、-实时监控单个追加文件" class="headerlink" title="二、 实时监控单个追加文件"></a>二、 实时监控单个追加文件</h3><blockquote><p>实时监控 Hive 日志，并上传到 HDFS 中</p></blockquote><hr><h4 id="1-添加配置文件"><a href="#1-添加配置文件" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h4><p>创建本次程序的配置文件，创建 flume-file-logger.conf 文件，根据官网添加一下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为exec source类型</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line"># 监控文件</span><br><span class="line">a1.sources.r1.command = tail -F /Users/user/Library/Hive/logs/hive.log</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-启动Flume"><a href="#2-启动Flume" class="headerlink" title="2. 启动Flume"></a>2. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-flume-logger.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后启动该任务，并且可以监听hive的日志文件</p><hr><hr><h3 id="三、-实时监控单个追加文件到HDFS"><a href="#三、-实时监控单个追加文件到HDFS" class="headerlink" title="三、 实时监控单个追加文件到HDFS"></a>三、 实时监控单个追加文件到HDFS</h3><blockquote><p>Flume监控Hive实时更新日志然后上传到HDFS</p></blockquote><hr><h4 id="1-添加相关依赖包"><a href="#1-添加相关依赖包" class="headerlink" title="1. 添加相关依赖包"></a>1. 添加相关依赖包</h4><p>首先将需要使用的相关Jar包放入Flume的lib目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">commons-configuration-1.6.jar、</span><br><span class="line">hadoop-auth-2.7.2.jar、</span><br><span class="line">hadoop-common-2.7.2.jar、</span><br><span class="line">hadoop-hdfs-2.7.2.jar、</span><br><span class="line">commons-io-2.4.jar、</span><br><span class="line">htrace-core-3.1.0-incubating.jar</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-添加配置文件"><a href="#2-添加配置文件" class="headerlink" title="2.添加配置文件"></a>2.添加配置文件</h4><p>创建本次程序的配置文件，创建 flume-file-hdfs.conf 文件，根据官网添加一下配置，因为这里与上一节区别主要在sink部分，所以只需要在上一节配置的基础上对sink相关的部分进行修改即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为exec source类型</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line"># 监控文件</span><br><span class="line">a1.sources.r1.command = tail -F /Users/user/Library/Hive/logs/hive.log</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"></span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://localhost:9000/flume/%Y%m%d/%H</span><br><span class="line"># 上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logs- </span><br><span class="line"># 是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round = true </span><br><span class="line"># 多少时间单位创建一个新的文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"># 重新定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"># 积攒多少个 Event 才 flush 到 HDFS 一次</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"># 设置文件类型，可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"># 多久生成一个新的文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"># 设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"># 文件的滚动与 Event 数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-启动Flume"><a href="#3-启动Flume" class="headerlink" title="3. 启动Flume"></a>3. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-file-hdfs.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后启动该任务，并且可以监听文件的追加</p><hr><hr><h3 id="四、-实时监控目录下的多个新文件至HDFS"><a href="#四、-实时监控目录下的多个新文件至HDFS" class="headerlink" title="四、 实时监控目录下的多个新文件至HDFS"></a>四、 实时监控目录下的多个新文件至HDFS</h3><blockquote><p>当监控的目录下有新文件时，进行上传</p></blockquote><hr><h4 id="1-添加配置文件-1"><a href="#1-添加配置文件-1" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h4><p>写下如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为spooldir类型</span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line"># 监控文件的路径</span><br><span class="line">a1.sources.r1.spoolDir = /Users/user/Library/Flume/upload</span><br><span class="line"># 上传完成文件后缀</span><br><span class="line">a1.sources.r1.fileSuffix = .COMPLETED</span><br><span class="line"># 忽略所有以.tmp 结尾的文件，不上传</span><br><span class="line">a1.sources.r1.ignorePattern = ([^ ]*\.tmp)</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"></span><br><span class="line"># 表示a1的输出目的地是控制台hdfs类型</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://localhost:9000/flume/%Y%m%d/%H</span><br><span class="line"># 上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = upload- </span><br><span class="line"># 是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round = true </span><br><span class="line"># 多少时间单位创建一个新的文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"># 重新定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"># 积攒多少个 Event 才 flush 到 HDFS 一次</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"># 设置文件类型，可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"># 多久生成一个新的文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"># 设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"># 文件的滚动与 Event 数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-启动Flume-1"><a href="#2-启动Flume-1" class="headerlink" title="2. 启动Flume"></a>2. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-dir-hdfs.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后我们向upload文件夹添加文件，发现成功上传至HDFS。</p><blockquote><p>注： 但是它并不能监控动态变化的数据，在使用 Spooling Directory Source 时，不要在监控目录中创建并持续修改文件，上传完成的文件会以.COMPLETED 结尾，被监控文件夹每 500 毫秒扫描一次文件变动。</p></blockquote><hr><hr><h3 id="五、-实时监控目录下的多个追加文件"><a href="#五、-实时监控目录下的多个追加文件" class="headerlink" title="五、 实时监控目录下的多个追加文件"></a>五、 实时监控目录下的多个追加文件</h3><blockquote><p>Exec source 适用于监控一个实时追加的文件，但不能保证数据不丢失;Spooldir Source 能够保证数据不丢失，且能够实现断点续传，但延迟较高，不能实时监控;而 Taildir Source 既能够实现断点续传，又可以保证数据不丢失，还能够进行实时监控。</p></blockquote><hr><h4 id="1-添加配置文件-2"><a href="#1-添加配置文件-2" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">#表示a1的输入源类型为TAILDIR类型</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line"># 指定position_file位置</span><br><span class="line">a1.sources.r1.positionFile = /Users/user/Library/Flume/upload/tail_dir.json</span><br><span class="line"># 文件组</span><br><span class="line">a1.sources.r1.filegroups = f1 f2</span><br><span class="line"># f1文件组</span><br><span class="line">a1.sources.r1.filegroups.f1 = /Users/user/Library/Flume/upload/dict1/a.log</span><br><span class="line"># f2文件组</span><br><span class="line">a1.sources.r1.filegroups.f2 = /Users/user/Library/Flume/upload/dict2/.*.txt</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"></span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://localhost:9000/flume/%Y%m%d/%H</span><br><span class="line"># 上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = upload- </span><br><span class="line"># 是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round = true </span><br><span class="line"># 多少时间单位创建一个新的文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"># 重新定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"># 积攒多少个 Event 才 flush 到 HDFS 一次</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"># 设置文件类型，可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"># 多久生成一个新的文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"># 设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"># 文件的滚动与 Event 数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><hr><h4 id="2-启动Flume-2"><a href="#2-启动Flume-2" class="headerlink" title="2. 启动Flume"></a>2. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-taildir-hdfs.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后我们对监控的文件组中的文件进行追加，发现成功监听。</p><blockquote><p>注： 在查看tail_dir.json中可以发现监听记录，同时每条记录都存在inode字段和pos字段，inode字段为文件唯一标识符，不随文件名称的变化而变化，pos则是上传文件的偏移量，正是通过这个来实现断点续传。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Flume" scheme="http://suiwo.xyz/tags/Flume/"/>
    
  </entry>
  
  <entry>
    <title>Hive初识</title>
    <link href="http://suiwo.xyz/2020/05/24/Hive%E5%88%9D%E8%AF%86/"/>
    <id>http://suiwo.xyz/2020/05/24/Hive初识/</id>
    <published>2020-05-24T12:54:16.000Z</published>
    <updated>2020-05-26T06:15:13.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-安装Hive并启动"><a href="#一、-安装Hive并启动" class="headerlink" title="一、 安装Hive并启动"></a>一、 安装Hive并启动</h3><hr><h4 id="1-下载源码包"><a href="#1-下载源码包" class="headerlink" title="1. 下载源码包"></a>1. 下载源码包</h4><p>解压源码包后，配置hive-env.sh<br>(a)配置 <code>HADOOP_HOME</code> 路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=$&#123;Hadoop的路径&#125;</span><br></pre></td></tr></table></figure></p><p>(b)配置 <code>HIVE_CONF_DIR</code> 路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_CONF_DIR=$&#123;Hive配置文件路径&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-启动hadoop"><a href="#2-启动hadoop" class="headerlink" title="2. 启动hadoop"></a>2. 启动hadoop</h4><hr><h4 id="3-启动Hive客户端"><a href="#3-启动Hive客户端" class="headerlink" title="3. 启动Hive客户端"></a>3. 启动Hive客户端</h4><p>调用bin/hive进入Hive的客户端</p><blockquote><p>启动Hive后会发现Hive源码包中多了<code>derby.log</code>和<code>metastore_db</code>这个就是Hive默认的元数据</p></blockquote><hr><h4 id="4-创建数据表"><a href="#4-创建数据表" class="headerlink" title="4. 创建数据表"></a>4. 创建数据表</h4><p>在Hive客户端中创建一个数据表，并数据表中插入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student(id int, name string);</span><br><span class="line">hive&gt; insert into student values(1000,<span class="string">"ss"</span>);</span><br></pre></td></tr></table></figure></p><p>此时我们可以发现在hdfs中出现了<code>user/hive/warehouse</code>文件夹下存在一个与表名同名的文件夹，这个文件夹中存储的就是数据表的数据</p><hr><hr><h3 id="二、-尝试在文件系统中加载数据"><a href="#二、-尝试在文件系统中加载数据" class="headerlink" title="二、 尝试在文件系统中加载数据"></a>二、 尝试在文件系统中加载数据</h3><hr><h4 id="1-创建测试数据"><a href="#1-创建测试数据" class="headerlink" title="1. 创建测试数据"></a>1. 创建测试数据</h4><p>创建一个<code>student.txt</code>文件（id与姓名之间用tab隔开）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1001    zhangsan</span><br><span class="line">1002    lisi</span><br><span class="line">1003    wangwu</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-使用load导入数据"><a href="#2-使用load导入数据" class="headerlink" title="2. 使用load导入数据"></a>2. 使用load导入数据</h4><p>在hive中执行以下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; load data <span class="built_in">local</span> inpath <span class="string">'文件路径'</span> into table student;</span><br></pre></td></tr></table></figure></p><p>此时我们可以发现<code>user/hive/warehouse/student</code>文件夹下多了一个student.txt文件，所以可以理解这其实就是一个上传操作，但是使用select语句查询时发现查询结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NULLNULL</span><br><span class="line">NULLNULL</span><br><span class="line">NULLNULL</span><br></pre></td></tr></table></figure></p><p>这是因为我们在创建表时并未声明文件分隔符，所以我们重新创建数据表，并声明分隔符为’\t’<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student(id int, name string) ROW FORMAT DELIMITED FIELDS TERMINATED BY <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure></p><p>之后重新导入后数据发现可以正常查询了。</p><hr><h4 id="3-通过上传文件导入数据"><a href="#3-通过上传文件导入数据" class="headerlink" title="3. 通过上传文件导入数据"></a>3. 通过上传文件导入数据</h4><p>现在我们再创建一个student1.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1004    zhaoliu</span><br><span class="line">1005    chenba</span><br><span class="line">1006    sunjiu</span><br></pre></td></tr></table></figure></p><p>然后直接上传到hdfs的<code>user/hive/warehouse/student</code>路径下<br>之后在查询，可以发现我们上传的<code>student1.txt</code>文件中的数据也可以查询到了。</p><blockquote><p>在实际开发中，可以选择使用load指令或者直接上传两种方式，如果我们想使用load指令加载hdfs下的数据，同样可以使用load指令，此时可以理解成将该文件移动到数据表所对应的文件之下<br>hive&gt; load data inpath ‘文件路径’ into table student;</p></blockquote><hr><hr><h3 id="三、-配置Hive元数据至MySQL"><a href="#三、-配置Hive元数据至MySQL" class="headerlink" title="三、 配置Hive元数据至MySQL"></a>三、 配置Hive元数据至MySQL</h3><blockquote><p>我们会发现一个问题同一时间只能启动一个Hive客户端。这就是数据derby数据库的原因，所以我们接下来要将我们的元数据转移到MySQL中，MySQL安装在此不做赘述。</p></blockquote><hr><h4 id="1-添加MySQL连接驱动"><a href="#1-添加MySQL连接驱动" class="headerlink" title="1. 添加MySQL连接驱动"></a>1. 添加MySQL连接驱动</h4><p>安装好MySQL后，首先我们需要下载mysql连接驱动也就是<code>mysql-connector-java-5.1.47.jar</code>（这个jar包可以在maven的本地仓库中找到，如果之前在maven中使用过这个依赖）文件放入到hive的lib目录中。</p><hr><h4 id="2-配置hive-site-xml"><a href="#2-配置hive-site-xml" class="headerlink" title="2. 配置hive-site.xml"></a>2. 配置<code>hive-site.xml</code></h4><p>按照官方配置，将下列数据拷贝到文件中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop102:3306/metastore?createDatabaseI fNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>000000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置完毕后，如果启动 hive 异常，可以重启hadoop，此时我们可以看到mysql中创建了相关的数据库。</p><hr><h4 id="3-创建数据表"><a href="#3-创建数据表" class="headerlink" title="3. 创建数据表"></a>3. 创建数据表</h4><p>然后我们创建一个数据表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student1(id int, name string);</span><br></pre></td></tr></table></figure></p><p>这时我们在数据库中的TBLS数据表中会发现我们创建者条数据的记录，在DBS表中可以看到我们的数据库路径。</p>]]></content>
    
    <summary type="html">
    
      Hive是一个数据仓库基础工具在Hadoop中用来处理结构化数据。它架构在Hadoop之上，总归为大数据，并使得查询和分析方便。并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="Hive" scheme="http://suiwo.xyz/tags/Hive/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>YARN集群搭建</title>
    <link href="http://suiwo.xyz/2020/04/20/YARN%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://suiwo.xyz/2020/04/20/YARN集群搭建/</id>
    <published>2020-04-20T13:21:40.000Z</published>
    <updated>2020-04-20T13:45:50.885Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要是记录集群搭建流程，具体细节较为简略</p></blockquote><h3 id="一、YARN简介"><a href="#一、YARN简介" class="headerlink" title="一、YARN简介"></a>一、YARN简介</h3><p>Apache Hadoop YARN （Yet Another Resource Negotiator，另一种资源协调者）是一种新的 Hadoop 资源管理器，它是一个通用资源管理系统，可为上层应用提供统一的资源管理和调度，它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。</p><h3 id="二、集群规划"><a href="#二、集群规划" class="headerlink" title="二、集群规划"></a>二、集群规划</h3><table><thead><tr><th>主机名</th><th>作用</th></tr></thead><tbody><tr><td>hadoop11</td><td>NameNode &amp; DataNode &amp; NodeManager</td></tr><tr><td>hadoop12</td><td>DataNode &amp; ResourceManager &amp; NodeManager</td></tr><tr><td>hadoop13</td><td>NameNode &amp; DataNode &amp; NodeManager</td></tr></tbody></table><h3 id="三、搭建集群"><a href="#三、搭建集群" class="headerlink" title="三、搭建集群"></a>三、搭建集群</h3><ol><li>修改主机名以及<code>host</code>映射并重启机器</li><li>配置<code>ssh</code>免密登录</li><li>配置<code>JAVA</code>环境变量</li><li>安装Hadoop<br>(1). 修改<code>hadoop-env.sh</code><br>(2). 修改<code>core-site.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop11:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/zhangjia/hadoop-2.9.2/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>(3). 修改<code>hdfs-site.xml</code><br>不需要修改，默认配置即可<br>(4). 修改mapred-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(5). 修改<code>yarn-site.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop12<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(6). 配置<code>slaves</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop11</span><br><span class="line">hadoop12</span><br><span class="line">hadoop13</span><br></pre></td></tr></table></figure></p><p>(7). 格式化NameNode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure></p><p>(8). 启动HDFS集群<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></p><p>(9). 启动YARN集群(只可以在ResourceManager节点启动)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure></p><p>(10). 可以在 <a href="http://hadoop12:8088查看当前YARN启动情况" target="_blank" rel="noopener">http://hadoop12:8088查看当前YARN启动情况</a></p>]]></content>
    
    <summary type="html">
    
      Apache Hadoop YARN （Yet Another Resource Negotiator，另一种资源协调者）是一种新的 Hadoop 资源管理器，它是一个通用资源管理系统，可为上层应用提供统一的资源管理和调度，它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
      <category term="YARN" scheme="http://suiwo.xyz/tags/YARN/"/>
    
  </entry>
  
  <entry>
    <title>HDFS高可用集群搭建</title>
    <link href="http://suiwo.xyz/2020/04/20/HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://suiwo.xyz/2020/04/20/HDFS高可用集群搭建/</id>
    <published>2020-04-20T03:19:10.000Z</published>
    <updated>2020-04-20T13:36:11.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>环境</p><ul><li>CentOS 7</li><li>JAVA 1.8</li><li>Zookeeper 2.9.2</li><li>Hadoop 3.4.14</li></ul></blockquote><hr><h3 id="一、简单HDFS集群中存在的问题及解决办法"><a href="#一、简单HDFS集群中存在的问题及解决办法" class="headerlink" title="一、简单HDFS集群中存在的问题及解决办法"></a>一、简单HDFS集群中存在的问题及解决办法</h3><ol><li><p>如何解决NameNode的单节点问题</p><p> 多个NameNode备份原NameNode数据</p></li><li><p>如何解决多个NameNode是集群脑裂问题<br> 使用QJM，<code>QJM（Quorum Journal Manager）</code>是Hadoop专门为Namenode共享存储开发的组件。其集群运行一组<code>Journal Node</code>，每个Journal 节点暴露一个简单的RPC接口，允许Namenode读取和写入数据，数据存放在Journal节点的本地磁盘。当Namenode写入<code>edit log</code>时，它向集群的所有Journal Node发送写入请求，当多数节点回复确认成功写入之后，edit log就认为是成功写入。例如有3个Journal Node，Namenode如果收到来自2个节点的确认消息，则认为写入成功。<br> 而在故障自动转移的处理上，引入了监控Namenode状态的ZookeeperFailController（ZKFC）。ZKFC一般运行在Namenode的宿主机器上，与Zookeeper集群协作完成故障的自动转移。整个集群架构图如下：<br> <img src="/images/HDFS高可用集群搭建/SouthEast.png" alt="img"></p></li><li><p>在HA集群中如何ZK与<code>NameNode active</code>出现网络延迟问题这种情况，ZK会自动将<code>NameNode standby</code>切换为活跃节点，这个时候就出现了多个active节点，也就意味着现有集群面临脑裂问题<br> 使用JournalNode</p><ol><li>负责NameNode的edit log同步</li><li>JournalNode隔离机制，保证在一个时刻只有一个NameNode active，使用ssh登录到NameNode节点使用kill命令杀死NameNode。</li></ol></li></ol><hr><h3 id="二、集群规划"><a href="#二、集群规划" class="headerlink" title="二、集群规划"></a>二、集群规划</h3><h4 id="1-相关要求："><a href="#1-相关要求：" class="headerlink" title="1. 相关要求："></a>1. 相关要求：</h4><ul><li>节点个数最好是奇数个 3个节点</li><li>每个zookeeper服务会启动至少三个端口<ul><li>1.client处理</li><li>2.内部数据原子广播</li><li>3.内部选举投票端口</li></ul></li></ul><h4 id="2-服务器相关信息"><a href="#2-服务器相关信息" class="headerlink" title="2. 服务器相关信息"></a>2. 服务器相关信息</h4><table><thead><tr><th>hostname</th><th>所运行服务</th><th>IP地址</th></tr></thead><tbody><tr><td>zk1</td><td>zkNode1</td><td>按照实际IP地址</td></tr><tr><td>zk2</td><td>zkNode2</td><td>按照实际IP地址</td></tr><tr><td>zk3</td><td>zkNode3</td><td>按照实际IP地址</td></tr><tr><td>hadoop1</td><td>NameNode(active) &amp; DataNode &amp; JournalNode &amp; ZKFC</td><td>按照实际IP地址</td></tr><tr><td>hadoop2</td><td>NameNode(standby) &amp; DataNode &amp; JournalNode &amp; ZKFC</td><td>按照实际IP地址</td></tr><tr><td>hadoop3</td><td>DataNode &amp; JournalNode &amp; ZKFC</td><td>按照实际IP地址</td></tr></tbody></table><h4 id="3-共同配置"><a href="#3-共同配置" class="headerlink" title="3. 共同配置"></a>3. 共同配置</h4><p>(1) 修改所有机器hostname<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure></p><p>(2) 配置hosts文件，将ip地址与主机名进行映射<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure></p><p>(3) 重启机器</p><p>(4) 配置ssh免密登录，实现start-dfs.sh执行的机器可以免密登录其他的NameNode和DataNode节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. hadoop1: ssh-keygen -t -rsa</span><br><span class="line">2. hadoop1: ssh-copy-id hadoop1</span><br><span class="line">3. hadoop1: ssh-copy-id hadoop2</span><br><span class="line">4. hadoop1: ssh-copy-id hadoop3</span><br></pre></td></tr></table></figure></p><p>(5) 配置JAVA环境</p><p>(6) 修改环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入配置文件</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_251-amd64</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p><hr><h3 id="三、zk集群搭建"><a href="#三、zk集群搭建" class="headerlink" title="三、zk集群搭建"></a>三、zk集群搭建</h3><h4 id="1-解压zookeeper文件"><a href="#1-解压zookeeper文件" class="headerlink" title="1. 解压zookeeper文件"></a>1. 解压zookeeper文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper文件</span><br></pre></td></tr></table></figure><h4 id="2-在每一个zk节点上创建zk的数据目录"><a href="#2-在每一个zk节点上创建zk的数据目录" class="headerlink" title="2. 在每一个zk节点上创建zk的数据目录"></a>2. 在每一个zk节点上创建zk的数据目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/zkdata</span><br></pre></td></tr></table></figure><h4 id="3-在每一个节点存放zk数据的目录中必须创建一个myid文件"><a href="#3-在每一个节点存放zk数据的目录中必须创建一个myid文件" class="headerlink" title="3. 在每一个节点存放zk数据的目录中必须创建一个myid文件"></a>3. 在每一个节点存放zk数据的目录中必须创建一个myid文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zk1: <span class="built_in">echo</span> <span class="string">"1"</span> &gt;&gt; /home/zkdata/myid</span><br><span class="line">zk2: <span class="built_in">echo</span> <span class="string">"2"</span> &gt;&gt; /home/zkdata/myid</span><br><span class="line">zk3: <span class="built_in">echo</span> <span class="string">"3"</span> &gt;&gt; /home/zkdata/myid</span><br></pre></td></tr></table></figure><h4 id="4-创建zookeeper的基础配置文件zoo-cfg"><a href="#4-创建zookeeper的基础配置文件zoo-cfg" class="headerlink" title="4. 创建zookeeper的基础配置文件zoo.cfg"></a>4. 创建zookeeper的基础配置文件zoo.cfg</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/zkdata/zoo.cfg</span><br></pre></td></tr></table></figure><p>配置内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 3001为client端口</span><br><span class="line"># 3002为原子广播端口</span><br><span class="line"># 3003为选举投票端口</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/zkdata</span><br><span class="line">clientPort=3001</span><br><span class="line">server.1=zk1:3002:3003</span><br><span class="line">server.2=zk2:3002:3003</span><br><span class="line">server.3=zk3:3002:3003</span><br></pre></td></tr></table></figure></p><h4 id="5-启动zk节点，进入zk文件的bin目录下执行以下命令"><a href="#5-启动zk节点，进入zk文件的bin目录下执行以下命令" class="headerlink" title="5. 启动zk节点，进入zk文件的bin目录下执行以下命令"></a>5. 启动zk节点，进入zk文件的bin目录下执行以下命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start /home/zkdata/zoo.cfg</span><br></pre></td></tr></table></figure><h4 id="6-执行jps命令发现已成功启动QuorumPeerMain进程"><a href="#6-执行jps命令发现已成功启动QuorumPeerMain进程" class="headerlink" title="6. 执行jps命令发现已成功启动QuorumPeerMain进程"></a>6. 执行jps命令发现已成功启动QuorumPeerMain进程</h4><h4 id="7-查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower"><a href="#7-查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower" class="headerlink" title="7. 查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower"></a>7. 查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status /home/zkdata/zoo.cfg</span><br></pre></td></tr></table></figure><h4 id="8-zk集群搭建完毕"><a href="#8-zk集群搭建完毕" class="headerlink" title="8. zk集群搭建完毕"></a>8. zk集群搭建完毕</h4><hr><h3 id="四、HDFS集群搭建"><a href="#四、HDFS集群搭建" class="headerlink" title="四、HDFS集群搭建"></a>四、HDFS集群搭建</h3><h4 id="1-在所有hadoop节点添加Cent-OS依赖"><a href="#1-在所有hadoop节点添加Cent-OS依赖" class="headerlink" title="1. 在所有hadoop节点添加Cent OS依赖"></a>1. 在所有hadoop节点添加Cent OS依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install psmisc -y</span><br></pre></td></tr></table></figure><h4 id="2-安装hadoop-配置Hadoop环境变量-非必须"><a href="#2-安装hadoop-配置Hadoop环境变量-非必须" class="headerlink" title="2. 安装hadoop(配置Hadoop环境变量 非必须)"></a>2. 安装hadoop(配置Hadoop环境变量 非必须)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/home/hadoop-2.9.2</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>(1) 配置<code>hadoop-env.sh</code><br>修改JAVA相关配置</p><p>(2) 配置<code>core-site.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop-2.9.2/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置zk集群节点数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>zk1:3001,zk2:3001,zk3:3001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(3) 配置<code>hdfs-site.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定hdfs的nameservices为ns，需要与core-site.xml中保持一致 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ns下面有两个nameNode分别是nn1，nn2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn1的rpc通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn1的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn2的rpc通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop2:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop2:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定nameNode的元数据在JournalNode上的存放位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hadoop1:8485;hadoop2:8485;hadoop3:8485/ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定journalNode在本地磁盘中存放数据的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/zhangjia/journal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启nameNode故障时自动切换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置隔离机制。如果ssh默认是22端口，value直接写sshfence即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用隔离机制需要ssh免登陆 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(4) 配置<code>slaves</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop1</span><br><span class="line">hadoop2</span><br><span class="line">hadoop3</span><br></pre></td></tr></table></figure></p><p>(5) 启动集群</p><p>(6) 在任意NameNode节点格式化Zk<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure></p><p>(7) 出现下面这句话则说明格式化成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ha.ActiveStandbyElector: Successfully created /hadoop-ha/ns in ZK.</span><br></pre></td></tr></table></figure></p><p>(8) 启动JournalNode节点</p><blockquote><p>因为Journal在HA中需要同步edit log，所以他需要在edit log没有生成之前启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop1: hadoop-daemon.sh start journalnode</span><br><span class="line">hadoop2: hadoop-daemon.sh start journalnode</span><br><span class="line">hadoop3: hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure></p></blockquote><p>(9) 使用jps发现JournalNode进程已启动并且在根文件夹出现journal文件夹</p><p>(10) 格式化NameNode,在选中的active的节点上执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format ns</span><br></pre></td></tr></table></figure></p><p>(11) 启动hdfs集群<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></p><p>(12) 在standby 的 NameNode节点上执行如下命令进行同步active节点的edit log<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -bootstrapStandby</span><br></pre></td></tr></table></figure></p><p>(13) 启动standby节点的NameNode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemon.sh start namenode</span><br></pre></td></tr></table></figure></p><p>此时进入两个NameNode节点的图形化界面 <a href="http://hadoop1:50070" target="_blank" rel="noopener">http://hadoop1:50070</a> 可以发现一个为active一个为standby</p><p>(14) 此时HA集群搭建完毕</p>]]></content>
    
    <summary type="html">
    
      Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。本文尝试通过使用Zookeeper来搭建一个高可用的集群。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
      <category term="Zookeeper" scheme="http://suiwo.xyz/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>汉诺塔问题总结</title>
    <link href="http://suiwo.xyz/2020/01/04/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://suiwo.xyz/2020/01/04/汉诺塔问题总结/</id>
    <published>2020-01-04T15:27:30.000Z</published>
    <updated>2020-01-05T09:43:43.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本递归实现"><a href="#一、基本递归实现" class="headerlink" title="一、基本递归实现"></a>一、基本递归实现</h2><p>下面是普遍的汉诺塔问题的递归解法代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, String x, String y, String z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(x + <span class="string">" -&gt; "</span> + z);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            hanoi(n - <span class="number">1</span>, x, z, y);</span><br><span class="line">            System.out.println(x + <span class="string">" -&gt; "</span> + z);</span><br><span class="line">            hanoi(n - <span class="number">1</span>, y, x, z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        hanoi(<span class="number">3</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x -&gt; z</span><br><span class="line">x -&gt; y</span><br><span class="line">z -&gt; y</span><br><span class="line">x -&gt; z</span><br><span class="line">y -&gt; x</span><br><span class="line">y -&gt; z</span><br><span class="line">x -&gt; z</span><br></pre></td></tr></table></figure><hr><hr><h2 id="二、基本非递归实现"><a href="#二、基本非递归实现" class="headerlink" title="二、基本非递归实现"></a>二、基本非递归实现</h2><p>非递归实现的方式本质就是尝试使用栈来模拟递归</p><h4 id="1-创建一个保存状态的类"><a href="#1-创建一个保存状态的类" class="headerlink" title="1.创建一个保存状态的类"></a>1.创建一个保存状态的类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> n; <span class="comment">// 当前层数</span></span><br><span class="line">    <span class="keyword">public</span> String x; <span class="comment">// 起始柱</span></span><br><span class="line">    <span class="keyword">public</span> String y; <span class="comment">// 辅助柱</span></span><br><span class="line">    <span class="keyword">public</span> String z; <span class="comment">// 目标柱</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">State</span><span class="params">(<span class="keyword">int</span> n, String x, String y, String z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-实现主程序"><a href="#2-实现主程序" class="headerlink" title="2.实现主程序"></a>2.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, String x, String y, String z)</span> </span>&#123;</span><br><span class="line">        Stack&lt;State&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        s.push(<span class="keyword">new</span> State(n, x, y, z));</span><br><span class="line">        State state;</span><br><span class="line">        <span class="keyword">while</span> (!s.empty() &amp;&amp; (state = s.pop()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.n == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(state.x + <span class="string">" -&gt; "</span> + state.y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 栈结构先进后出，所以需要逆序进栈，这部分是理解重点，用栈模拟递归</span></span><br><span class="line">                s.push(<span class="keyword">new</span> State(state.n - <span class="number">1</span>, state.y, state.x, state.z));</span><br><span class="line">                s.push(<span class="keyword">new</span> State(<span class="number">1</span>, state.x, state.y, state.z));</span><br><span class="line">                s.push(<span class="keyword">new</span> State(state.n - <span class="number">1</span>, state.x, state.z, state.y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"非递归方式："</span>);</span><br><span class="line">        Hanoi.hanoi(<span class="number">3</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-输出结果"><a href="#3-输出结果" class="headerlink" title="3.输出结果"></a>3.输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">非递归方式：</span><br><span class="line">x -&gt; z</span><br><span class="line">x -&gt; y</span><br><span class="line">z -&gt; y</span><br><span class="line">x -&gt; z</span><br><span class="line">y -&gt; x</span><br><span class="line">y -&gt; z</span><br><span class="line">x -&gt; z</span><br></pre></td></tr></table></figure><hr><hr><h2 id="三、汉诺塔问题扩展"><a href="#三、汉诺塔问题扩展" class="headerlink" title="三、汉诺塔问题扩展"></a>三、汉诺塔问题扩展</h2><p>我们尝试更改一下题目要求，不只是需要输出交换步骤，我们还需要记录交换过程中的三个柱子的圆盘存在情况</p><h4 id="1-创建柱子类"><a href="#1-创建柱子类" class="headerlink" title="1.创建柱子类"></a>1.创建柱子类</h4><p>该类用于表示汉诺塔的每一个柱子，并且这个类将记录每个柱子上的圆盘情况<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HanoiPillar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> n; <span class="comment">// 记录传递hanoi的圆盘数量</span></span><br><span class="line">    <span class="keyword">public</span> String name; <span class="comment">// 柱子名称</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">//用于记录当前柱子上所存在的圆盘</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化A柱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HanoiPillar</span><span class="params">(<span class="keyword">int</span> n, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">this</span>.arr.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化B柱和C柱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HanoiPillar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断该柱子上方是否为顶部盘子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!arr.isEmpty() &amp;&amp; arr.size() != <span class="number">0</span> &amp;&amp; arr.get(arr.size() - <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveTo</span><span class="params">(HanoiPillar hanoiPillar)</span> </span>&#123;</span><br><span class="line">        hanoiPillar.arr.add(<span class="keyword">this</span>.getDiskSize());</span><br><span class="line">        <span class="keyword">this</span>.arr.remove(<span class="keyword">this</span>.arr.size() - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">" -&gt; "</span> + hanoiPillar.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到当前柱子的圆盘的列表，转化为String</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.arr.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.arr.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                result.append(<span class="keyword">this</span>.arr.get(i)).append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.length() == <span class="number">0</span> ? <span class="string">"null"</span> : result.toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到该柱子中最小的圆盘的数值。以1、2、3、4、......、n来表示各个圆盘的大小。并且方便比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDiskSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.arr.get(<span class="keyword">this</span>.arr.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-实现主程序-1"><a href="#2-实现主程序-1" class="headerlink" title="2.实现主程序"></a>2.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> step;</span><br><span class="line">    <span class="keyword">private</span> HanoiPillar a;</span><br><span class="line">    <span class="keyword">private</span> HanoiPillar b;</span><br><span class="line">    <span class="keyword">private</span> HanoiPillar c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, String a, String b, String c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.step = (<span class="keyword">int</span>) (Math.pow(<span class="number">2</span>, n) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="keyword">new</span> HanoiPillar(n, a);</span><br><span class="line">        <span class="keyword">this</span>.b = <span class="keyword">new</span> HanoiPillar(b);</span><br><span class="line">        <span class="keyword">this</span>.c = <span class="keyword">new</span> HanoiPillar(c);</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            HanoiPillar tmp = <span class="keyword">this</span>.b;</span><br><span class="line">            <span class="keyword">this</span>.b = <span class="keyword">this</span>.c;</span><br><span class="line">            <span class="keyword">this</span>.c = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.step &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 进行top的移动</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.a.top()) &#123;</span><br><span class="line">                list();</span><br><span class="line">                <span class="keyword">this</span>.a.moveTo(<span class="keyword">this</span>.b);</span><br><span class="line">                <span class="keyword">this</span>.step--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.b.top()) &#123;</span><br><span class="line">                list();</span><br><span class="line">                <span class="keyword">this</span>.b.moveTo(<span class="keyword">this</span>.c);</span><br><span class="line">                <span class="keyword">this</span>.step--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.c.top()) &#123;</span><br><span class="line">                list();</span><br><span class="line">                <span class="keyword">this</span>.c.moveTo(<span class="keyword">this</span>.a);</span><br><span class="line">                <span class="keyword">this</span>.step--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 因为step为奇数，而最后完成后step=0；</span></span><br><span class="line">            <span class="comment">// 同时可以理解为最后一次移动一定是top移动，所以需要进行一次循环判断</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.step == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行第二步移动</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.a.top()) &#123;</span><br><span class="line">                move2(<span class="keyword">this</span>.b, <span class="keyword">this</span>.c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.b.top()) &#123;</span><br><span class="line">                move2(<span class="keyword">this</span>.a, <span class="keyword">this</span>.c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.c.top()) &#123;</span><br><span class="line">                move2(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">this</span>.a.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.a.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.b.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.b.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.c.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.c.getStore() + <span class="string">""</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(<span class="keyword">this</span>.a.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.a.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.c.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.c.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.b.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.b.getStore() + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行第二部移动</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">move2</span><span class="params">(HanoiPillar a, HanoiPillar b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.arr.size() == <span class="number">0</span>) &#123; <span class="comment">// a柱为空，则将b上层的盘子移到a</span></span><br><span class="line">            list();</span><br><span class="line">            b.moveTo(a);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b.arr.size() == <span class="number">0</span>) &#123; <span class="comment">// b柱为空，则将a上层的盘子移到b</span></span><br><span class="line">            list();</span><br><span class="line">            a.moveTo(b);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.getDiskSize() &gt; b.getDiskSize()) &#123; <span class="comment">// 由于b盘子小于a盘子，所以将b的top盘子移动到a的top盘子</span></span><br><span class="line">            list();</span><br><span class="line">            b.moveTo(a);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 由于a盘子小于b盘子，所以将a的top盘子移动到b的top盘子</span></span><br><span class="line">            list();</span><br><span class="line">            a.moveTo(b);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        Hanoi.hanoi(<span class="number">3</span>, <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-输出结果-1"><a href="#3-输出结果-1" class="headerlink" title="3.输出结果"></a>3.输出结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A柱：<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,B柱：<span class="keyword">null</span>C柱：<span class="keyword">null</span>       A -&gt; C</span><br><span class="line">A柱：<span class="number">2</span>,<span class="number">3</span>,B柱：<span class="keyword">null</span>C柱：<span class="number">1</span>,    A -&gt; B</span><br><span class="line">A柱：<span class="number">3</span>,        B柱：<span class="number">2</span>,        C柱：<span class="number">1</span>,    C -&gt; B</span><br><span class="line">A柱：<span class="number">3</span>,        B柱：<span class="number">1</span>,<span class="number">2</span>,C柱：<span class="keyword">null</span>A -&gt; C</span><br><span class="line">A柱：<span class="keyword">null</span>B柱：<span class="number">1</span>,<span class="number">2</span>,C柱：<span class="number">3</span>,    B -&gt; A</span><br><span class="line">A柱：<span class="number">1</span>,        B柱：<span class="number">2</span>,        C柱：<span class="number">3</span>,    B -&gt; C</span><br><span class="line">A柱：<span class="number">1</span>,        B柱：<span class="keyword">null</span>C柱：<span class="number">2</span>,<span class="number">3</span>,    A -&gt; C</span><br><span class="line">A柱：<span class="keyword">null</span>B柱：<span class="keyword">null</span>C柱：<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br></pre></td></tr></table></figure><hr><hr><h2 id="四、汉诺塔问题改编（递归实现）"><a href="#四、汉诺塔问题改编（递归实现）" class="headerlink" title="四、汉诺塔问题改编（递归实现）"></a>四、汉诺塔问题改编（递归实现）</h2><p>今天在做《程序员代码面试指南：IT名企算法与数据结构题目最优解（第二版）》时，遇到了一个稍微复杂一些的汉诺塔问题，但是理解之后发现本体只是在上面简易递归的基础上进行优化。</p><h4 id="1-题目要求"><a href="#1-题目要求" class="headerlink" title="1.题目要求"></a>1.题目要求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">【题目】</span><br><span class="line"> *  汉诺塔问题比较经典，这里修改一下游戏规则：</span><br><span class="line"> *  现在限制不能从最左侧的塔直接移动到最右侧，也不能从最右侧直接移动到最左侧，而是必须经过中间。</span><br><span class="line"> *  求当塔有N层的时候，打印最优移动过程和最优移动总步数。</span><br><span class="line"> *  1.如果希望从“左”移到“中”，打印“Move 1 from left to mid”。</span><br><span class="line"> *  2.如果希望从“中”移到“左”，打印“Move 1 from mid to left”。</span><br><span class="line"> *  3.如果希望从“中”移到“右”，打印“Move 1 from mid to right”。</span><br><span class="line"> *  4.如果希望从“右”移到“中”，打印“Move 1 from right to mid”。</span><br><span class="line"> *  5.如果希望从“左”移到“右”，打印“Move 1 from left to mid”和“Move 1 from mid to right”。</span><br><span class="line"> *  6.如果希望从“右”移到“左”，打印“Move 1 from right to mid”和“Move 1 from mid to left”。</span><br><span class="line"> *</span><br><span class="line"> *  例如，当塔数为两层时，最上层的塔记为1，最下层的塔记为2，则打印：</span><br><span class="line"> *  Move 1 from left to mid</span><br><span class="line"> *  Move 1 from mid to right</span><br><span class="line"> *  Move 2 from left to mid</span><br><span class="line"> *  Move 1 from right to mid</span><br><span class="line"> *  Move 1 from mid to left</span><br><span class="line"> *  Move 2 from mid to right</span><br><span class="line"> *  Move 1 from left to mid</span><br><span class="line"> *  Move 1 from mid to right</span><br><span class="line"> *  It wi11 move 8 steps.</span><br></pre></td></tr></table></figure><hr><h4 id="2-情况分析"><a href="#2-情况分析" class="headerlink" title="2.情况分析"></a>2.情况分析</h4><p>首先我们尝试使用递归方式实现，然后进行常见情况分析</p><ol><li>假设剩余N层塔都在<code>左</code>，希望全都移到<code>中</code>，则有下面三个步骤<ol><li>将1~N-1层从<code>左</code>移到<code>右</code>，该过程为递归</li><li>将N层从<code>左</code>移到<code>中</code></li><li>将1~N-1层从<code>右</code>移到<code>中</code>，该过程为递归</li></ol></li></ol><ol start="2"><li>假设剩余N层塔都是从<code>中</code>移到<code>右</code>，或者从<code>中</code>移到<code>左</code>，或者从有<code>右</code>到<code>中</code>，其实原理与情况1相同，所以不做赘述</li></ol><ol start="3"><li>假设剩余N层塔都在<code>左</code>，希望都移到<code>右</code>，则有下面五个步骤<ol><li>将1~N-1层从<code>左</code>移到<code>右</code>，该过程为递归</li><li>将N层从<code>左</code>移到<code>中</code></li><li>将1~N-1层从<code>右</code>移到<code>左</code>，此过程为递归</li><li>将N层从<code>中</code>移到<code>右</code></li><li>将1~N-1层从<code>左</code>移到<code>右</code>，此过程为递归</li></ol></li></ol><hr><h4 id="3-实现主程序"><a href="#3-实现主程序" class="headerlink" title="3.实现主程序"></a>3.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hanoiProblem</span> <span class="params">(<span class="keyword">int</span> num, String left, String mid,</span></span></span><br><span class="line"><span class="function"><span class="params">                              String right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> process(num, left, mid, right, left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> num, String left, String mid, String right,</span></span></span><br><span class="line"><span class="function"><span class="params">                       String from, String to)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (from.equals(mid) || to.equals(mid)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Move 1 from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"Move 1 from "</span> + from + <span class="string">" to "</span> + mid);</span><br><span class="line">                System.out.println(<span class="string">"Move 1 from "</span> + mid + <span class="string">" to "</span> + to);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (from.equals(mid) || to.equals(mid)) &#123;</span><br><span class="line">            String another = (from.equals(left) || to.equals(left)) ? right : left;</span><br><span class="line">            <span class="keyword">int</span> part1 = process(num - <span class="number">1</span>, left, mid, right, from, another);</span><br><span class="line">            <span class="keyword">int</span> part2 = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + num + <span class="string">" from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">            <span class="keyword">int</span> part3 = process(num - <span class="number">1</span>, left, mid, right, another, to);</span><br><span class="line">            <span class="keyword">return</span> part1 + part2 + part3;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> part1 = process(num - <span class="number">1</span>, left, mid, right, from, to);</span><br><span class="line">            <span class="keyword">int</span> part2 = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + num + <span class="string">" from "</span> + from + <span class="string">" to "</span> + mid);</span><br><span class="line">            <span class="keyword">int</span> part3 = process(num - <span class="number">1</span>, left, mid, right, to, from);</span><br><span class="line">            <span class="keyword">int</span> part4 = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + num + <span class="string">" from "</span> + mid + <span class="string">" to "</span> + to);</span><br><span class="line">            <span class="keyword">int</span> part5 = process(num - <span class="number">1</span>, left, mid, right, from, to);</span><br><span class="line">            <span class="keyword">return</span> part1 + part2 + part3 + part4 + part5;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        hanoi.hanoiProblem(<span class="number">3</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-输出结果"><a href="#4-输出结果" class="headerlink" title="4.输出结果"></a>4.输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 2 from x to y</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 2 from y to z</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 3 from x to y</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 2 from z to y</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 2 from y to x</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 3 from y to z</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 2 from x to y</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 2 from y to z</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br></pre></td></tr></table></figure><hr><hr><h2 id="五、汉诺塔问题改编（非递归实现）"><a href="#五、汉诺塔问题改编（非递归实现）" class="headerlink" title="五、汉诺塔问题改编（非递归实现）"></a>五、汉诺塔问题改编（非递归实现）</h2><h4 id="1-题目分析"><a href="#1-题目分析" class="headerlink" title="1.题目分析"></a>1.题目分析</h4><blockquote><p>我们把左、中、右三个地点抽象成栈，依次记为LS、MS和RS。最初所有的塔都在LS上。那么如上4个动作就可以看作是：某一个栈（from）把栈顶元素弹出，然后压入到另一个栈里（to），作为这一个栈（to）的栈顶。</p></blockquote><blockquote><p>例如，如果是7层塔，在最初时所有的塔都在LS上，LS从栈顶到栈底就依次是1～7，如果现在发生了“左”到“中”的动作，这个动作对应的操作是LS栈将栈顶元素1弹出，然后1压入到MS栈中，成为MS的栈顶。其他操作同理。</p></blockquote><p>一个动作能发生的先决条件是<em>不违反小压大的原则</em>。<br>from栈弹出的元素num如果想压入到to栈中，那么num的值必须小于当前to栈的栈顶。还有一个原则不是很明显，但也是非常重要的，叫<em>相邻不可逆原则</em>，解释如下：</p><ol><li>我们把4个动作依次定义为：<code>L-＞M</code>、<code>M-＞L</code>、<code>M-＞R</code>和<code>R-＞M</code>。</li><li>很明显，<code>L-＞M</code>和<code>M-＞L</code>过程互为逆过程，<code>M-＞R</code>和<code>R-＞M</code>互为逆过程。</li><li>在修改后的汉诺塔游戏中，如果想走出最少步数，那么任何两个相邻的动作都不是互为逆过程的。举个例子：如果上一步的动作是 <code>L-＞M</code>，那么这一步绝不可能是 <code>M-＞L</code>，直观地解释为：你在上一步把一个栈顶数从“左”移动到“中”，这一步为什么又要移回去呢？这必然不是取得最小步数的走法。同理，<code>M-＞R</code>动作和<code>R-＞M</code>动作也不可能相邻发生。</li></ol><p>有了小压大和相邻不可逆原则后，可以推导出两个十分有用的结论–非递归的方法核心结论：</p><ol><li>游戏的第一个动作一定是<code>L-＞M</code>，这是显而易见的。</li><li>在走出最少步数过程中的任何时刻，4个动作中只有一个动作不违反小压大和相邻不可逆原则，另外三个动作一定都会违反。</li></ol><p>对于结论2，现在进行简单的证明。<br>因为游戏的第一个动作已经确定是<code>L-＞M</code>，则以后的每一步都会有前一步的动作。</p><h5 id="假设前一步的动作是L-＞M："><a href="#假设前一步的动作是L-＞M：" class="headerlink" title="假设前一步的动作是L-＞M："></a>假设前一步的动作是<code>L-＞M</code>：</h5><ol><li>根据小压大原则，<code>L-＞M</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>M-＞L</code>的动作也不该发生。</li><li>根据小压大原则，<code>M-＞R</code>和<code>R-＞M</code>只会有一个达标。</li></ol><h5 id="假设前一步的动作是M-＞L："><a href="#假设前一步的动作是M-＞L：" class="headerlink" title="假设前一步的动作是M-＞L："></a>假设前一步的动作是<code>M-＞L</code>：</h5><ol><li>根据小压大原则，<code>M-＞L</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>L-＞M</code>的动作也不该发生。</li><li>根据小压大原则，<code>M-＞R</code>和<code>R-＞M</code>只会有一个达标。</li></ol><h5 id="假设前一步的动作是M-＞R："><a href="#假设前一步的动作是M-＞R：" class="headerlink" title="假设前一步的动作是M-＞R："></a>假设前一步的动作是<code>M-＞R</code>：</h5><ol><li>根据小压大原则，<code>M-＞R</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>R-＞M</code>的动作也不该发生。</li><li>根据小压大原则，<code>L-＞M</code>和<code>M-＞L</code>只会有一个达标。</li></ol><h5 id="假设前一步的动作是R-＞M："><a href="#假设前一步的动作是R-＞M：" class="headerlink" title="假设前一步的动作是R-＞M："></a>假设前一步的动作是<code>R-＞M</code>：</h5><ol><li>根据小压大原则，<code>R-＞M</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>M-＞R</code>的动作也不该发生。</li><li>根据小压大原则，<code>L-＞M</code>和<code>M-＞L</code>只会有一个达标。</li></ol><p>综上所述，每一步只会有一个动作达标。那么只要每走一步都根据这两个原则考查所有的动作就可以，哪个动作达标就走哪个动作，反正每次都只有一个动作满足要求，按顺序走下来即可</p><h4 id="2-实现主程序-2"><a href="#2-实现主程序-2" class="headerlink" title="2.实现主程序"></a>2.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hanoiProblem</span><span class="params">(<span class="keyword">int</span> num, String left, String mid, String right)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; lS = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; mS = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; rS = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化这四个栈，可以避免栈溢出问题，同时可以使while循环中的四个函数无论谁在前，都必定会限制性 l -&gt; m</span></span><br><span class="line">        lS.push(Integer.MAX_VALUE);<span class="comment">//最大值：2147483647(2的7次方-1)</span></span><br><span class="line">        mS.push(Integer.MAX_VALUE);</span><br><span class="line">        rS.push(Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num; i &gt; <span class="number">0</span>; i--) &#123;<span class="comment">//将数字(最小数字在栈顶)压入左栈[1,2,3]</span></span><br><span class="line">            lS.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用枚举，记录上一步操作 创建一个数组而不是直接创建一个Action对象是为了使用引用传递而不是值传递</span></span><br><span class="line">        Action[] record = &#123;Action.No&#125;;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//size();stack类从vector继承的方法；返回此向量中的组件数</span></span><br><span class="line">        <span class="keyword">while</span> (rS.size() != num + <span class="number">1</span>) &#123;<span class="comment">//当右栈未将数字全部存入时</span></span><br><span class="line">            <span class="comment">//按顺序移动,下面这四个函数顺序并不影响因为每次必定只会有一个函数是满足条件的</span></span><br><span class="line">            step += fStackToStack(record, Action.MToL, Action.LToM, lS, mS, left, mid);</span><br><span class="line">            step += fStackToStack(record, Action.LToM, Action.MToL, mS, lS, mid, left);</span><br><span class="line">            step += fStackToStack(record, Action.RToM, Action.MToR, mS, rS, mid, right);</span><br><span class="line">            step += fStackToStack(record, Action.MToR, Action.RToM, rS, mS, left, mid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fStackToStack</span><span class="params">(Action[] record,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Action preNoAet,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Action nowAct,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Stack&lt;Integer&gt; fStack,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Stack&lt;Integer&gt; tStack,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String from,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String to)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// fStack.peek() &lt; tStack.peek() 必然可以保证 record[0] != nowAct 两条件互斥</span></span><br><span class="line">        <span class="keyword">if</span> (record[<span class="number">0</span>] != preNoAet &amp;&amp; fStack.peek() &lt; tStack.peek()) &#123;<span class="comment">//发生移动且必须小的数字往大的数字上移动</span></span><br><span class="line">            tStack.push(fStack.pop());<span class="comment">//fStack 移动到 tStack 且删掉from的栈顶元素</span></span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + tStack.peek() + <span class="string">" from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">            record[<span class="number">0</span>] = nowAct;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi Hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        <span class="keyword">int</span> step = hanoi.hanoiProblem(<span class="number">3</span>, <span class="string">"左"</span>, <span class="string">"中"</span>, <span class="string">"右"</span>);</span><br><span class="line">        System.out.println(<span class="string">"总共需要"</span> + step + <span class="string">"步"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> Action &#123;</span><br><span class="line">        No, <span class="comment">// 无操作</span></span><br><span class="line">        LToM, <span class="comment">// 从左移到中</span></span><br><span class="line">        MToL, <span class="comment">// 从中移到左</span></span><br><span class="line">        MToR, <span class="comment">// 从中移到右</span></span><br><span class="line">        RToM <span class="comment">// 从右移到中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-输出结果-2"><a href="#3-输出结果-2" class="headerlink" title="3.输出结果"></a>3.输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 2 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 2 from 中 to 右</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 3 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 2 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 2 from 中 to 左</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 3 from 中 to 右</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 2 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 2 from 中 to 右</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">总共需要26步</span><br></pre></td></tr></table></figure><p>参考视频<br><a href="https://www.bilibili.com/video/av31023017?from=search&amp;seid=15595573244367663980" target="_blank" rel="noopener">https://www.bilibili.com/video/av31023017?from=search&amp;seid=15595573244367663980</a></p><p>参考文章<br><a href="https://blog.csdn.net/weixin_42636076/article/details/81031580" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42636076/article/details/81031580</a><br><a href="https://www.jb51.net/article/128701.htm" target="_blank" rel="noopener">https://www.jb51.net/article/128701.htm</a></p>]]></content>
    
    <summary type="html">
    
      很久之前曾经总结了郝斌老师的对汉诺塔问题的解析，当时还暂时不能彻底理解，今天又重温一下汉诺塔问题，并尝试使用递归与非递归两种方式来进行实现
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://suiwo.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://suiwo.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://suiwo.xyz/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="汉诺塔问题" scheme="http://suiwo.xyz/tags/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>HBase中使用过滤器筛选数据</title>
    <link href="http://suiwo.xyz/2019/12/17/HBase%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE/"/>
    <id>http://suiwo.xyz/2019/12/17/HBase中使用过滤器筛选数据/</id>
    <published>2019-12-17T13:49:08.000Z</published>
    <updated>2020-01-04T15:41:44.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、过滤器能干什么"><a href="#一、过滤器能干什么" class="headerlink" title="一、过滤器能干什么"></a>一、过滤器能干什么</h2><ul><li>HBase为筛选数据提供了一组过滤器，通过过滤器可以在HBase中的数据的多个维度(行，列，数据版本)上进行对数据的筛选操作。</li><li>通常来说，通过行键、列来筛选数据的应用场景较多。</li></ul><hr><h2 id="二、常见的过滤器"><a href="#二、常见的过滤器" class="headerlink" title="二、常见的过滤器"></a>二、常见的过滤器</h2><ol><li>基于行的过滤器<ul><li>PrefixFilter: 行的前缀匹配</li><li>PageFilter: 基于行的分页</li></ul></li></ol><ol start="2"><li>基于列的过滤器<ul><li>ColumnPrefixFilter: 列前缀匹配</li><li>FirstKeyOnlyFilter: 只返回每一行的第一列</li></ul></li></ol><ol start="3"><li>基于单元值的过滤器<ul><li>KeyOnlyFilter: 返回的数据不包括单元值，只包含行键与列</li><li>TimestampsFilter: 根据数据的时间戳版本进行过滤</li></ul></li></ol><ol start="4"><li>基于列和单元值的过滤器<ul><li>SingleColumnValueFilter: 对该列的单元值进行比较过滤</li><li>SingleColumnValueExcludeFilter: 对该列的单元值进行比较过滤</li></ul></li></ol><ol start="5"><li>比较过滤器<ul><li>比较过滤器通常需要一个比较运算符以及一个比较器来实现过滤</li><li>RowFilter、 FamilyFilter、 QualifierFilter、 ValueFilter</li></ul></li></ol><ol start="6"><li>常见过滤器总结</li></ol><table><thead><tr><th>过滤器(Filter)</th><th>功能</th></tr></thead><tbody><tr><td>RowFilter</td><td>筛选出匹配的所有的行</td></tr><tr><td>PrefixFilter</td><td>筛选出具有特定前缀的行键的数据</td></tr><tr><td>KeyOnlyFilter</td><td>只返回每行的行键，值全部为空</td></tr><tr><td>ColumnPrefixFilter</td><td>按照列名的前缀来筛选单元格</td></tr><tr><td>ValueFilter</td><td>按照具体的值来筛选单元格的过滤器</td></tr><tr><td>TimestampsFilter</td><td>根据数据的时间戳版本进行过滤</td></tr><tr><td>FilterList</td><td>用于综合使用多个过滤器</td></tr></tbody></table><hr><h2 id="三、开发演示"><a href="#三、开发演示" class="headerlink" title="三、开发演示"></a>三、开发演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseFilterTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/9 15:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 尝试使用过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseFilterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.createTable(<span class="string">"FileTable"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"fileInfo"</span>, <span class="string">"saveInfo"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFileDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file1.txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"1024"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo1"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file2.jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"2048"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo3"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file3.jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"2048"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey1</span></span><br><span class="line"><span class="comment">     * fileName = file1.txt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rowFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> RowFilter(CompareFilter.CompareOp.EQUAL, <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(<span class="string">"rowkey1"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MUST_PASS_ALL指必须通过所有的Filter</span></span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line"></span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey2</span></span><br><span class="line"><span class="comment">     * fileName = file2.jpg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prefixFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> PrefixFilter(Bytes.toBytes(<span class="string">"rowkey2"</span>));</span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey1</span></span><br><span class="line"><span class="comment">     * fileName = </span></span><br><span class="line"><span class="comment">     * rowkey = rowkey2</span></span><br><span class="line"><span class="comment">     * fileName = </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyOnlyFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> KeyOnlyFilter(<span class="keyword">true</span>);</span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey1</span></span><br><span class="line"><span class="comment">     * fileName = file1.txt</span></span><br><span class="line"><span class="comment">     * fileType = null</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey2</span></span><br><span class="line"><span class="comment">     * fileName = file2.jpg</span></span><br><span class="line"><span class="comment">     * fileType = null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">columnPrefixFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> ColumnPrefixFilter(Bytes.toBytes(<span class="string">"nam"</span>));<span class="comment">// 前缀为nam</span></span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">                System.out.println(<span class="string">"fileType = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"type"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      HBase为筛选数据提供了一组过滤器，通过过滤器可以在HBase中的数据的多个维度(行，列，数据版本)上进行对数据的筛选操作。通常来说，通过行键、列来筛选数据的应用场景较多。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HBase" scheme="http://suiwo.xyz/tags/HBase/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>数据结构网课总结</title>
    <link href="http://suiwo.xyz/2019/12/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BD%91%E8%AF%BE%E6%80%BB%E7%BB%93/"/>
    <id>http://suiwo.xyz/2019/12/11/数据结构网课总结/</id>
    <published>2019-12-10T16:05:29.000Z</published>
    <updated>2019-12-10T16:38:24.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网课推荐"><a href="#网课推荐" class="headerlink" title="网课推荐"></a>网课推荐</h3><p>主要推荐下面的课有几个以及我个人觉得的优缺点</p><ol><li><p>郝斌老师的数据结构<br> 链接：<a href="https://www.bilibili.com/video/av6159200" target="_blank" rel="noopener">https://www.bilibili.com/video/av6159200</a><br> 优缺点：讲的非常的通俗易懂，但是课程只讲到了咱们课本的前面几章的知识，后面的图之类的知识没有涉及（排序讲了部分）。</p></li><li><p>小甲鱼老师的数据结构<br> 链接：<a href="https://study.163.com/course/courseMain.htm?courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseMain.htm?courseId=468002</a><br> 优缺点：基本他的课涉及到了我们考试的所有知识点，但是我当时学习的时候可能是由于老师的口音原因，所以有的时候听的时候会有些分心，还有我记得好像当时我听有一两个章节当时听得有点迷糊。总体来说虽然没有郝斌老师将的通俗易懂，但是也可以说是生动形象了。</p></li><li><p>浙江大学的数据结构<br> 链接：<a href="https://www.bilibili.com/video/av18586085?from=search&amp;seid=16468445350579187548" target="_blank" rel="noopener">https://www.bilibili.com/video/av18586085?from=search&amp;seid=16468445350579187548</a><br> 优缺点：这个课我认为优缺点是非常明显的，优点是每一节课比较短，可以让你对知识点有个简单地认识。缺点也是这个，就是讲的太短，缺少前期的知识由浅入深的代入。并且缺乏代码实战。不是很简易系统的看这个。我的建议是，如果你其他的网课对于某个知识点看不懂，可以尝试着看看这个课能否对你的理解有帮助，但是不要想着通过这个课学会。</p></li><li><p>严蔚敏老师的数据结构<br> 链接：<a href="https://www.bilibili.com/video/av6239731" target="_blank" rel="noopener">https://www.bilibili.com/video/av6239731</a><br> 优缺点：严蔚敏老师的数据结构我并没有系统的去看，只是在一些比较难的知识点部分尝试去听了严蔚敏老师的课。总体来说给我的感觉就是讲的真的非常的好，但是可能对于新学习一个知识没有小甲鱼老师将的生动。适合当你听了郝斌老师或者小甲鱼老师的课之后对这个知识已经一知半解但是还没有彻底理解的时候看。当然了严蔚敏老师的课也有一个很明显的缺点就是他每节课都讲的很久，如果想从头到尾的看肯定是来不及的。</p></li><li><p>慕课上的数据结构从入门到精通<br> 百度网盘链接：<a href="https://pan.baidu.com/s/1o36E3xrZ0pFx4-vjc89HsA" target="_blank" rel="noopener">https://pan.baidu.com/s/1o36E3xrZ0pFx4-vjc89HsA</a>  密码:0nbm<br> 优缺点：这个课，其实我觉得对于考试来说并不是一个比较好的课，我知识觉得他在第12章AVL树部分讲的还行，其他部分就不建议看了先。这个等你以后找工作的时候在系统的看一下吧。</p></li></ol><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li>我之前学习的时候是以郝斌老师以及小甲鱼老师的课为主，严蔚敏老师以及浙大的课为辅。慕课的那个avl树部分我觉得考试也不是重点，看不看都行。</li><li>数据结构这部分有的课不是一遍就能听懂的，可能需要两遍甚至三遍才能看懂，所以必要的时候可以多看一两遍。</li><li>数据结构，可能你们学的时候觉得很难，但是考试是真的很简单，所以不要把过多的备考精力放在数据结构这一门课上。</li></ul><hr><h3 id="其他建议"><a href="#其他建议" class="headerlink" title="其他建议"></a>其他建议</h3><blockquote><p>下面是我对部分个章节自己的一些想法（因为这个都是我凭借自己的记忆然后根据我记忆中老师当时给的重点写的建议，可能有些部分不是很准确，所以仅供参考。。。。。。）</p></blockquote><ol><li><p>线性表堆栈以及队列<br> 这部分整体内容比较简单，所以基本上大家都讲的不错，不过我觉得这部分直接看书就足够了，如果觉得看书还是不太懂，可以去我给你的课中针对的学习一下。</p></li><li><p>数组和字符串<br> 这部分我个人认为难的可能就是在KMP算法，不过期末考试也不知道会不会考KMP算法，下面是我总结的一些比较好的KMP算法的课</p><ol><li><p><a href="https://www.bilibili.com/video/av6239731/?p=11" target="_blank" rel="noopener">https://www.bilibili.com/video/av6239731/?p=11</a></p><p> 这个是严蔚敏老师的课，因为这个每个视频没有写讲的什么，然后我看了一下我以前的总结，P11讲的是KMP算法，这样你就不用一个一个找对应了。</p></li><li><p><a href="https://www.bilibili.com/video/av3246487?from=search&amp;seid=8682896714663607035" target="_blank" rel="noopener">https://www.bilibili.com/video/av3246487?from=search&amp;seid=8682896714663607035</a></p><p> 这个是一个印度程序员讲的kmp我觉得也是讲的很好地。</p></li><li><p><a href="https://study.163.com/course/courseLearn.htm?courseId=468002#/learn/video?lessonId=1023415&amp;courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=468002#/learn/video?lessonId=1023415&amp;courseId=468002</a></p><p> 这个就是小甲鱼讲的了。</p></li></ol></li><li><p>树<br> 这部分，我觉得郝斌的树讲的还是挺好的，不过他的课有一个缺点就是没有讲到哈弗曼树，哈弗曼树这部分，这部分可以补充着小甲鱼的课进行学习<br> 郝斌：<a href="https://www.bilibili.com/video/av6159200?p=51" target="_blank" rel="noopener">https://www.bilibili.com/video/av6159200?p=51</a><br> 小甲鱼：<a href="https://study.163.com/course/courseLearn.htm?courseId=468002&amp;from=study#/learn/video?lessonId=1482172&amp;courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=468002&amp;from=study#/learn/video?lessonId=1482172&amp;courseId=468002</a></p></li><li><p>集合搜索、搜索树、跳表以及散列表<br> 这部分我觉得不是特别难，也没有太多其他的多余的建议了。这部分，我记得是没有太多的考试占比好像，不知道现在变了没，但是我觉得看了小甲鱼的课以及浙大的那个课基本上对这个有个概念的认识就差不多了。</p></li><li><p>图<br> 这部分和上两章也是一样的，就是学的挺多的，但是考的不多，所以先把听网课把所有概念都搞懂，然后等老师给了考点，再把考点部分再认真的学就好了。</p></li><li><p>排序<br> 这部分是很重要的一部分，但是我也觉得这个相较而言并不是特别难。这个没有太多技巧，尝试自己多写几遍代码理解透彻就好了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      数据结构网课总结
    
    </summary>
    
      <category term="wqf" scheme="http://suiwo.xyz/categories/wqf/"/>
    
    
      <category term="数据结构" scheme="http://suiwo.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>使用Java操作HBase数据库</title>
    <link href="http://suiwo.xyz/2019/12/09/%E4%BD%BF%E7%94%A8Java%E6%93%8D%E4%BD%9CHBase%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://suiwo.xyz/2019/12/09/使用Java操作HBase数据库/</id>
    <published>2019-12-09T04:26:45.000Z</published>
    <updated>2020-01-04T15:41:42.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h2><p>首先我们在maven项目中添加下面两个依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hbase依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单元测试依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><hr><h2 id="二、连接HBase数据库"><a href="#二、连接HBase数据库" class="headerlink" title="二、连接HBase数据库"></a>二、连接HBase数据库</h2><h3 id="1-编写连接数据库的实现"><a href="#1-编写连接数据库的实现" class="headerlink" title="1. 编写连接数据库的实现"></a>1. 编写连接数据库的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseConnection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/8 20:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 连接HBase数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HBaseConnection INSTANCE = <span class="keyword">new</span> HBaseConnection();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HBaseConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(configuration == <span class="keyword">null</span>)&#123;</span><br><span class="line">                configuration = HBaseConfiguration.create();</span><br><span class="line">                configuration.set(<span class="string">"hbase.zookeeper.quorum"</span>, <span class="string">"localhost:2181"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span> || connection.isClosed())&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getHBaseConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Table <span class="title">getTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE.getConnection().getTable(TableName.valueOf(tableName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-编写数据库连接测试类"><a href="#2-编写数据库连接测试类" class="headerlink" title="2. 编写数据库连接测试类"></a>2. 编写数据库连接测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/8 21:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseConnectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnectionTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection hBaseConnection = HBaseConnection.getHBaseConnection();</span><br><span class="line">        System.out.println(hBaseConnection.isClosed());</span><br><span class="line">        HBaseConnection.closeConnection();</span><br><span class="line">        System.out.println(hBaseConnection.isClosed());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTableTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Table table = HBaseConnection.getTable(<span class="string">"US_POPULATION"</span>);</span><br><span class="line">            System.out.println(table.getName().getNameAsString());</span><br><span class="line">            table.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="三、使用Java实现HBase常见操作"><a href="#三、使用Java实现HBase常见操作" class="headerlink" title="三、使用Java实现HBase常见操作"></a>三、使用Java实现HBase常见操作</h2><h3 id="1-编写操作数据库的实现"><a href="#1-编写操作数据库的实现" class="headerlink" title="1. 编写操作数据库的实现"></a>1. 编写操作数据库的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/9 11:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 操作HBase工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建HBase表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfs 列族的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否创建成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">createTable</span><span class="params">(String tableName, String[] cfs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (HBaseAdmin admin = (HBaseAdmin)HBaseConnection.getHBaseConnection().getAdmin())&#123;</span><br><span class="line">            <span class="keyword">if</span>(admin.tableExists(tableName))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            HTableDescriptor tableDescriptor = <span class="keyword">new</span> HTableDescriptor(TableName.valueOf(tableName));</span><br><span class="line">            Arrays.stream(cfs).forEach(cf -&gt; &#123;</span><br><span class="line">                HColumnDescriptor columnDescriptor = <span class="keyword">new</span> HColumnDescriptor(cf);</span><br><span class="line">                columnDescriptor.setMaxVersions(<span class="number">1</span>);</span><br><span class="line">                tableDescriptor.addFamily(columnDescriptor);</span><br><span class="line">            &#125;);</span><br><span class="line">            admin.createTable(tableDescriptor);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除HBase表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteTable</span><span class="params">(String tableName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (HBaseAdmin admin = (HBaseAdmin)HBaseConnection.getHBaseConnection().getAdmin())&#123;</span><br><span class="line">            admin.disableTable(tableName);</span><br><span class="line">            admin.deleteTable(tableName);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HBase表中插入一条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roeKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfName 列族名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qualifier 列标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否插入成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">putRow</span><span class="params">(String tableName, String roeKey, String cfName, String qualifier, String data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Put put = <span class="keyword">new</span> Put(Bytes.toBytes(roeKey));</span><br><span class="line">            put.addColumn(Bytes.toBytes(cfName), Bytes.toBytes(qualifier), Bytes.toBytes(data));</span><br><span class="line">            table.put(put);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HBase表中批量插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> puts</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">putRows</span><span class="params">(String tableName, List&lt;Put&gt; puts)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            table.put(puts);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一表标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">getRow</span><span class="params">(String tableName, String rowKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line">            <span class="keyword">return</span> table.get(get);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据过滤器来获取单条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterList 过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">getRow</span><span class="params">(String tableName, String rowKey, FilterList filterList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line">            get.setFilter(filterList);</span><br><span class="line">            <span class="keyword">return</span> table.get(get);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过Scan来检索数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">getScanner</span><span class="params">(String tableName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.setCaching(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> table.getScanner(scan);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量检索数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startRowKey 起始rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endRowKey 终止rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">getScanner</span><span class="params">(String tableName, String startRowKey, String endRowKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.withStartRow(Bytes.toBytes(startRowKey));</span><br><span class="line">            scan.withStopRow(Bytes.toBytes(endRowKey));</span><br><span class="line">            scan.setCaching(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> table.getScanner(scan);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用过滤器批量检索数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startRowKey 起始rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endRowKey 终止rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterList 过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">getScanner</span><span class="params">(String tableName, String startRowKey, String endRowKey, FilterList filterList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.withStartRow(Bytes.toBytes(startRowKey));</span><br><span class="line">            scan.withStopRow(Bytes.toBytes(endRowKey));</span><br><span class="line">            scan.setFilter(filterList);</span><br><span class="line">            scan.setCaching(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> table.getScanner(scan);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HBase删除一行结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteRow</span><span class="params">(String tableName, String rowKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowKey));</span><br><span class="line">            table.delete(delete);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个列族</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfName 列族名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteColumnFamily</span><span class="params">(String tableName, String cfName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (HBaseAdmin admin = (HBaseAdmin)HBaseConnection.getHBaseConnection().getAdmin())&#123;</span><br><span class="line">            admin.deleteColumn(tableName, cfName);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除某一列的qualifier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfName 列族名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qualifier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteQualifier</span><span class="params">(String tableName, String rowKey, String cfName, String qualifier)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowKey));</span><br><span class="line">            delete.addColumn(Bytes.toBytes(cfName), Bytes.toBytes(qualifier));</span><br><span class="line">            table.delete(delete);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-编写相关测试类进行测试"><a href="#2-编写相关测试类进行测试" class="headerlink" title="2. 编写相关测试类进行测试"></a>2. 编写相关测试类进行测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseUtilTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/9 11:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseUtilTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.createTable(<span class="string">"FileTable"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"fileInfo"</span>, <span class="string">"saveInfo"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFileDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file1.txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"1024"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo1"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file2.jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"2048"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFileDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Result result = HBaseUtil.getRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">            System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanFileDetail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"rowkey2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteRow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.deleteRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.deleteTable(<span class="string">"FileTable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用HBase技术可在廉价PC Server上搭建起大规模结构化存储集群。本文尝试使用Java实现HBase的常见操作。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HBase" scheme="http://suiwo.xyz/tags/HBase/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HBase伪分布式集群安装</title>
    <link href="http://suiwo.xyz/2019/12/08/HBase%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>http://suiwo.xyz/2019/12/08/HBase伪分布式集群安装/</id>
    <published>2019-12-08T07:04:15.000Z</published>
    <updated>2020-01-08T09:05:15.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载HBase安装包"><a href="#一、下载HBase安装包" class="headerlink" title="一、下载HBase安装包"></a>一、下载HBase安装包</h2><p>为了防止HBase和Hadoop版本间冲突，可以在CDH上下载和Hadoop兼容的HBase版本，本次搭建选择的是<code>hbase-1.2.0</code><br>下载路径：<a href="http://archive.cloudera.com/cdh5/" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/</a></p><hr><h2 id="二、配置伪分布式环境"><a href="#二、配置伪分布式环境" class="headerlink" title="二、配置伪分布式环境"></a>二、配置伪分布式环境</h2><blockquote><p>HBase相关配置文件在<code>/conf</code>文件之下,我们需要修改的配置文件有<code>hbase-env.sh</code>和<code>hbase-site.xml</code></p><ol><li>我们先将hadoop中的<code>hdfs-site.xml</code>和<code>core-site.xml</code>文件复制HBase的<code>/conf</code>目录之下<br>之后我们需要配置HBase相关</li><li>去配置<code>hbase-env.sh</code>，修改java环境变量，因为我们使用的是JDK8所以我们将文件中的下面这两行注释掉 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_MASTER_OPTS="$HBASE_MASTER_OPTS -XX:PermSize=128m -XX:MaxPermSize=128m"</span><br><span class="line">export HBASE_REGIONSERVER_OPTS="$HBASE_REGIONSERVER_OPTS -XX:PermSize=128m -XX:MaxPermSize=128m"</span><br></pre></td></tr></table></figure></li></ol></blockquote><pre><code>之后在最后面有下面这个注释，他表示使用HBase自带的Zookeeper进行运行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">true</span></span></span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li>配置<code>hbase-site.xml</code> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个表示HBase在HDFS中的路径，因为我们的HDFS启动端口为9000，所以我们这里配置如下，这样启动后我们就可以在hdfs的根路径下看到/hbase文件夹 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个指HBase自带的zookeeper的datdaDir的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>nbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/XXX/HBase/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个是指是不是以集群的方式运行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="三、-启动"><a href="#三、-启动" class="headerlink" title="三、 启动"></a>三、 启动</h2><ol><li>我们进入<code>/bin</code>目录下执行<code>./start-hbase.sh</code>指令</li><li><p>我们执行<code>jps</code>可以查看到下面三个和HBase相关的进程</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">91593 HQuorumPeer</span><br><span class="line">91642 HMaster</span><br><span class="line">91738 HRegionServer</span><br></pre></td></tr></table></figure></li><li><p>我们进入<code>/bin</code>执行<code>./hbase shell</code>进入HBase命令行</p></li><li><p>在HBase命令行中执行status指令查看当前状态</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 active master, 0 backup masters, 1 servers, 0 dead, 2.0000 average load</span><br></pre></td></tr></table></figure></li><li><p>进入HDFS中查看有没有创建成功，进入到Hadoop的<code>/bin</code>目录下执行<code>./hdfs -dfs -ls /</code>,这个时候我们可以看到根目录下存在<code>/hbase</code>文件夹</p></li><li>至此HBase的伪分布式集群安装完毕</li></ol><h2 id="配置web管理界面"><a href="#配置web管理界面" class="headerlink" title="配置web管理界面"></a>配置web管理界面</h2><p>1.0.0之后的版本的hbase的master web 默认是不运行的，所以需要自己配置默认端口。<br>在hbase-site.xml中加入一下内容即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新增的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新增的配置 --&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后访问<code>localhost:60010</code>即可访问</p>]]></content>
    
    <summary type="html">
    
      HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用HBase技术可在廉价PC Server上搭建起大规模结构化存储集群。本文尝试搭建基于Hadoop集群的HBase的伪分布式集群
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HBase" scheme="http://suiwo.xyz/tags/HBase/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>hadoop伪分布式集群安装</title>
    <link href="http://suiwo.xyz/2019/12/07/hadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>http://suiwo.xyz/2019/12/07/hadoop伪分布式集群安装/</id>
    <published>2019-12-07T07:09:20.000Z</published>
    <updated>2020-01-04T15:41:45.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载hadoop安装包"><a href="#一、下载hadoop安装包" class="headerlink" title="一、下载hadoop安装包"></a>一、下载hadoop安装包</h2><p>hadoop安装包分为apache官方以及CDH，具体区别在此不做介绍，本次搭建选择的是<code>hadoop-2.6.0-cdh5.7.0</code>版本<br>下载路径<a href="http://archive.cloudera.com/cdh5/" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/</a></p><hr><h2 id="二、配置hadoop"><a href="#二、配置hadoop" class="headerlink" title="二、配置hadoop"></a>二、配置hadoop</h2><p>hadoop相关配置文件在<code>/etc</code>目录下<br>我们需要修改的文件有<br><code>core-site.xml</code>，<code>hadoop-env.sh</code>，<code>hdfs-site.xml</code></p><ol><li>对<code>hadoop-env.sh</code>文件中的<code>JAVA_HOME</code>进行一下配置</li><li><p>在<code>hdfs-site.xml</code>文件中添加配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 存储副本的数量，因为我们是伪分布式，所以副本数量为1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- namenode相关信息存储路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/XXX/Hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- datanode相关信息存储路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/XXX/Hadoop/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 配置好之后我们需要创建<code>/XXX/Hadoop/dfs/name</code>和<code>/XXX/Hadoop/dfs/data</code>这两个文件</p></li><li><p>配置<code>core-site.xml</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表明我们hdfs的默认ip --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表明我们tmp文件的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/XXX/Hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 之后我们需要进到/bin目录下面执行<code>./hdfs namenode -format</code>对namenode进行格式化<br> 如果看到下面这段话则说明格式化成功</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19/12/07 15:04:31 INFO util.ExitUtil: Exiting with status 0</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h2><ol><li>/sbin目录下面使用<code>./start-dfs.sh</code>启动hdfs集群</li><li>使用<code>./hdfs dfs -ls /</code>查看hdfs根目录为空</li><li>然后我们在执行<code>./hdfs dfs -mkdir /test</code>之后再查询会发现根目录已经存在/test文件</li></ol>]]></content>
    
    <summary type="html">
    
      Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。本文尝试搭建一个伪分布式的hadoop集群为之后的HBase集群做准备
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>使用iTerm2和OhMyZsh实现一个强大终端</title>
    <link href="http://suiwo.xyz/2019/11/16/%E4%BD%BF%E7%94%A8iTerm2%E5%92%8COhMyZsh%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF/"/>
    <id>http://suiwo.xyz/2019/11/16/使用iTerm2和OhMyZsh实现一个强大终端/</id>
    <published>2019-11-16T14:45:10.000Z</published>
    <updated>2019-11-16T16:05:12.484Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<br><a href="https://blog.csdn.net/qianghaohao/article/details/79440961" target="_blank" rel="noopener">https://blog.csdn.net/qianghaohao/article/details/79440961</a><br><a href="https://www.jianshu.com/p/9c3439cc3bdb" target="_blank" rel="noopener">https://www.jianshu.com/p/9c3439cc3bdb</a><br><a href="https://www.jianshu.com/p/d194d29e488c?open_source=weibo_search" target="_blank" rel="noopener">https://www.jianshu.com/p/d194d29e488c?open_source=weibo_search</a><br><a href="https://www.jianshu.com/p/a78845c3f476" target="_blank" rel="noopener">https://www.jianshu.com/p/a78845c3f476</a></p><hr><p>首先我们看一下最终效果<br><img src="/images/使用iTerm2和OhMyZsh实现一个强大终端/67CBDB40-30BD-436F-AE5D-4F153F59FA46.png" alt="这里写图片描述"></p><hr><h3 id="一、下载iTerm2"><a href="#一、下载iTerm2" class="headerlink" title="一、下载iTerm2"></a>一、下载iTerm2</h3><p>官网下载地址：<a href="https://www.iterm2.com/" target="_blank" rel="noopener">https://www.iterm2.com/</a></p><hr><h3 id="二、安装zsh"><a href="#二、安装zsh" class="headerlink" title="二、安装zsh"></a>二、安装<code>zsh</code></h3><p><code>zsh</code>一般Mac已经自带了，无需额外安装。可以用<code>cat /etc/shells</code>查看zsh是否安装，如果列出了<code>/bin/zsh</code>则表明zsh已经安装了。<br>接下来修改iTerm2终端的默认Shell，可以用<code>echo $SHELL</code>查看当前Shell是什么，如果不是<code>/bin/zsh</code>则用如下命令修改iTerm2的默认Shell为<code>zsh</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure></p><p>这个是默认的样子<br><img src="/images/使用iTerm2和OhMyZsh实现一个强大终端/2411388-d80b6825cd00fb0d.png" alt="这里写图片描述"></p><hr><h3 id="三、使用Oh-my-zsh"><a href="#三、使用Oh-my-zsh" class="headerlink" title="三、使用Oh my zsh"></a>三、使用<code>Oh my zsh</code></h3><blockquote><p>zsh的功能极其强大，只是配置过于复杂，起初只有极客才在用。后来，有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的bash, 于是他创建了一个名为oh-my-zsh的开源项目</p></blockquote><h4 id="1-安装Oh-my-zsh"><a href="#1-安装Oh-my-zsh" class="headerlink" title="1.安装Oh my zsh"></a>1.安装Oh my zsh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curl 安装方式</span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wget 安装方式</span><br><span class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure><p>在安装过程中我们发现总是出现无法下载<code>instal.sh</code>文件的情况，所以下面是<code>install.sh</code>文件的源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  # Use colors, but only if connected to a terminal, and that terminal</span><br><span class="line">  # supports them.</span><br><span class="line">  if which tput &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">      ncolors=$(tput colors)</span><br><span class="line">  fi</span><br><span class="line">  if [ -t 1 ] &amp;&amp; [ -n &quot;$ncolors&quot; ] &amp;&amp; [ &quot;$ncolors&quot; -ge 8 ]; then</span><br><span class="line">    RED=&quot;$(tput setaf 1)&quot;</span><br><span class="line">    GREEN=&quot;$(tput setaf 2)&quot;</span><br><span class="line">    YELLOW=&quot;$(tput setaf 3)&quot;</span><br><span class="line">    BLUE=&quot;$(tput setaf 4)&quot;</span><br><span class="line">    BOLD=&quot;$(tput bold)&quot;</span><br><span class="line">    NORMAL=&quot;$(tput sgr0)&quot;</span><br><span class="line">  else</span><br><span class="line">    RED=&quot;&quot;</span><br><span class="line">    GREEN=&quot;&quot;</span><br><span class="line">    YELLOW=&quot;&quot;</span><br><span class="line">    BLUE=&quot;&quot;</span><br><span class="line">    BOLD=&quot;&quot;</span><br><span class="line">    NORMAL=&quot;&quot;</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  # Only enable exit-on-error after the non-critical colorization stuff,</span><br><span class="line">  # which may fail on systems lacking tput or terminfo</span><br><span class="line">  set -e</span><br><span class="line"></span><br><span class="line">  CHECK_ZSH_INSTALLED=$(grep /zsh$ /etc/shells | wc -l)</span><br><span class="line">  if [ ! $CHECK_ZSH_INSTALLED -ge 1 ]; then</span><br><span class="line">    printf &quot;$&#123;YELLOW&#125;Zsh is not installed!$&#123;NORMAL&#125; Please install zsh first!\n&quot;</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line">  unset CHECK_ZSH_INSTALLED</span><br><span class="line"></span><br><span class="line">  if [ ! -n &quot;$ZSH&quot; ]; then</span><br><span class="line">    ZSH=~/.oh-my-zsh</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [ -d &quot;$ZSH&quot; ]; then</span><br><span class="line">    printf &quot;$&#123;YELLOW&#125;You already have Oh My Zsh installed.$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">    printf &quot;You&apos;ll need to remove $ZSH if you want to re-install.\n&quot;</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  # Prevent the cloned repository from having insecure permissions. Failing to do</span><br><span class="line">  # so causes compinit() calls to fail with &quot;command not found: compdef&quot; errors</span><br><span class="line">  # for users with insecure umasks (e.g., &quot;002&quot;, allowing group writability). Note</span><br><span class="line">  # that this will be ignored under Cygwin by default, as Windows ACLs take</span><br><span class="line">  # precedence over umasks except for filesystems mounted with option &quot;noacl&quot;.</span><br><span class="line">  umask g-w,o-w</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;BLUE&#125;Cloning Oh My Zsh...$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">  hash git &gt;/dev/null 2&gt;&amp;1 || &#123;</span><br><span class="line">    echo &quot;Error: git is not installed&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  &#125;</span><br><span class="line">  # The Windows (MSYS) Git is not compatible with normal use on cygwin</span><br><span class="line">  if [ &quot;$OSTYPE&quot; = cygwin ]; then</span><br><span class="line">    if git --version | grep msysgit &gt; /dev/null; then</span><br><span class="line">      echo &quot;Error: Windows/MSYS Git is not supported on Cygwin&quot;</span><br><span class="line">      echo &quot;Error: Make sure the Cygwin git package is installed and is first on the path&quot;</span><br><span class="line">      exit 1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">  env git clone --depth=1 https://github.com/robbyrussell/oh-my-zsh.git $ZSH || &#123;</span><br><span class="line">    printf &quot;Error: git clone of oh-my-zsh repo failed\n&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;BLUE&#125;Looking for an existing zsh config...$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">  if [ -f ~/.zshrc ] || [ -h ~/.zshrc ]; then</span><br><span class="line">    printf &quot;$&#123;YELLOW&#125;Found ~/.zshrc.$&#123;NORMAL&#125; $&#123;GREEN&#125;Backing up to ~/.zshrc.pre-oh-my-zsh$&#123;NORMAL&#125;\n&quot;;</span><br><span class="line">    mv ~/.zshrc ~/.zshrc.pre-oh-my-zsh;</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;BLUE&#125;Using the Oh My Zsh template file and adding it to ~/.zshrc$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">  cp $ZSH/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line">  sed &quot;/^export ZSH=/ c\\</span><br><span class="line">  export ZSH=$ZSH</span><br><span class="line">  &quot; ~/.zshrc &gt; ~/.zshrc-omztemp</span><br><span class="line">  mv -f ~/.zshrc-omztemp ~/.zshrc</span><br><span class="line"></span><br><span class="line">  # If this user&apos;s login shell is not already &quot;zsh&quot;, attempt to switch.</span><br><span class="line">  TEST_CURRENT_SHELL=$(expr &quot;$SHELL&quot; : &apos;.*/\(.*\)&apos;)</span><br><span class="line">  if [ &quot;$TEST_CURRENT_SHELL&quot; != &quot;zsh&quot; ]; then</span><br><span class="line">    # If this platform provides a &quot;chsh&quot; command (not Cygwin), do it, man!</span><br><span class="line">    if hash chsh &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">      printf &quot;$&#123;BLUE&#125;Time to change your default shell to zsh!$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">      chsh -s $(grep /zsh$ /etc/shells | tail -1)</span><br><span class="line">    # Else, suggest the user do so manually.</span><br><span class="line">    else</span><br><span class="line">      printf &quot;I can&apos;t change your shell automatically because this system does not have chsh.\n&quot;</span><br><span class="line">      printf &quot;$&#123;BLUE&#125;Please manually change your default shell to zsh!$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;GREEN&#125;&quot;</span><br><span class="line">  echo &apos;         __                                     __   &apos;</span><br><span class="line">  echo &apos;  ____  / /_     ____ ___  __  __   ____  _____/ /_  &apos;</span><br><span class="line">  echo &apos; / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \ &apos;</span><br><span class="line">  echo &apos;/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / / &apos;</span><br><span class="line">  echo &apos;\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/  &apos;</span><br><span class="line">  echo &apos;                        /____/                       ....is now installed!&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;Please look over the ~/.zshrc file to select plugins, themes, and options.&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;p.s. Follow us at https://twitter.com/ohmyzsh.&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;p.p.s. Get stickers and t-shirts at https://shop.planetargon.com.&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  printf &quot;$&#123;NORMAL&#125;&quot;</span><br><span class="line">  env zsh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure></p><p>之后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL install.sh)&quot;</span><br></pre></td></tr></table></figure></p><h4 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2.修改主题"></a>2.修改主题</h4><blockquote><p>下面我们进行主题修改，主题简介链接：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p></blockquote><h5 id="（1）打开配置文件"><a href="#（1）打开配置文件" class="headerlink" title="（1）打开配置文件"></a>（1）打开配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><h5 id="（2）主题换成自己喜爱的主题"><a href="#（2）主题换成自己喜爱的主题" class="headerlink" title="（2）主题换成自己喜爱的主题"></a>（2）主题换成自己喜爱的主题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;agnoster&quot;</span><br></pre></td></tr></table></figure><h5 id="（3）更新配置"><a href="#（3）更新配置" class="headerlink" title="（3）更新配置"></a>（3）更新配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><hr><h3 id="四、安装PowerFonts字体"><a href="#四、安装PowerFonts字体" class="headerlink" title="四、安装PowerFonts字体"></a>四、安装PowerFonts字体</h3><p>有的同学会发现，执行完上一步后，使用可能会出现乱码，这是因为我们缺少PowerFonts字体<br>安装字体库需要首先将项目clone至本地，然后执行源码中的<code>install.sh</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:powerline/fonts.git</span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></p><p>安装好字体库之后，我们来设置iTerm2的字体，具体的操作是<code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text</code>，在Font区域选中<code>Change Font</code>，然后找到<code>Roboto Mono for Powerline</code>字体。</p><hr><h3 id="五、安装配色方案"><a href="#五、安装配色方案" class="headerlink" title="五、安装配色方案"></a>五、安装配色方案</h3><p>配色链接：<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">https://github.com/mbadolato/iTerm2-Color-Schemes</a></p><blockquote><p>配色方案在使用VIM或<code>Colorful Log</code>时会变得非常有用，同时界面也不会一片黑绿一样死板。</p></blockquote><h4 id="1-git-clone的方式下载源码进行安装："><a href="#1-git-clone的方式下载源码进行安装：" class="headerlink" title="1.git clone的方式下载源码进行安装："></a>1.git clone的方式下载源码进行安装：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Desktop/OpenSource</span><br><span class="line">git clone https://github.com/altercation/solarized</span><br><span class="line">cd solarized/iterm2-colors-solarized/</span><br><span class="line">open .</span><br></pre></td></tr></table></figure><ol><li>在打开的finder窗口中，双击<code>Solarized Dark.itermcolors</code>和<code>Solarized Light.itermcolors</code>安装明暗两种配色</li><li>进入<code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets</code></li><li>根据个人喜好选择<code>solarized dark</code>和<code>solarized light</code>两种配色中的一种即可。</li></ol><h4 id="2-手动安装"><a href="#2-手动安装" class="headerlink" title="2.手动安装"></a>2.手动安装</h4><p>但是下面这个是我最喜欢的配色</p><blockquote><p><a href="https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/Solarized%20Dark%20Higher%20Contrast.itermcolors" target="_blank" rel="noopener">https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/Solarized%20Dark%20Higher%20Contrast.itermcolors</a></p></blockquote><p>将该配色方案文件（Solarized Dark Higher Contrast.itermcolors）复制出来，保存到本地，文件命名为 <code>SolarizedDarkHigherContrast.itermcolors</code>，然后双击即可安装。</p><hr><h3 id="六、增加高亮"><a href="#六、增加高亮" class="headerlink" title="六、增加高亮"></a>六、增加高亮</h3><p>这是oh my zsh的一个插件，安装方式与theme大同小异：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure></p><h4 id="1-添加plugins"><a href="#1-添加plugins" class="headerlink" title="1.添加plugins"></a>1.添加plugins</h4><p>这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">git</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>请务必保证插件顺序，<code>zsh-syntax-highlighting</code>必须在最后一个。</p><h4 id="2-文件的最后一行添加"><a href="#2-文件的最后一行添加" class="headerlink" title="2.文件的最后一行添加"></a>2.文件的最后一行添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure><h4 id="3-修改生效："><a href="#3-修改生效：" class="headerlink" title="3.修改生效："></a>3.修改生效：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><hr><h3 id="七、安装命令补全"><a href="#七、安装命令补全" class="headerlink" title="七、安装命令补全"></a>七、安装命令补全</h3><p>跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做<code>zsh-autosuggestion</code>，用于命令建议和补全。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions</span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure></p><blockquote><p>之后将插件加入zsh配置与上一个一致</p></blockquote><hr><h3 id="八、使用技巧"><a href="#八、使用技巧" class="headerlink" title="八、使用技巧"></a>八、使用技巧</h3><p>参考文章：<a href="https://www.jianshu.com/p/a78845c3f476" target="_blank" rel="noopener">https://www.jianshu.com/p/a78845c3f476</a></p>]]></content>
    
    <summary type="html">
    
      iTerm2是mac系统下的一款非常好用的终端工具，它比系统自带的Terminal好用得多。有丰富的特色功能供，比如快捷键、分屏、定制终端主题颜色等；这些功能极大的提高我们敲命令的效率，强烈推荐每一个程序员都尝试和习惯使用这款工具。
    
    </summary>
    
      <category term="开发工具" scheme="http://suiwo.xyz/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="iTerm2" scheme="http://suiwo.xyz/tags/iTerm2/"/>
    
      <category term="zsh" scheme="http://suiwo.xyz/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Kafka初试</title>
    <link href="http://suiwo.xyz/2019/11/07/Kafka%E5%88%9D%E8%AF%95/"/>
    <id>http://suiwo.xyz/2019/11/07/Kafka初试/</id>
    <published>2019-11-07T06:49:46.000Z</published>
    <updated>2019-11-07T07:08:18.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Apache Kafka起源于LinkedIn，后来于2011年成为开源Apache项目，然后于2012年成为First-class Apache项目。Kafka是用Scala和Java编写的。 Apache Kafka是基于发布订阅的容错消息系统。 它是快速，可扩展和设计分布。</p><hr><h3 id="二、安装Kafka"><a href="#二、安装Kafka" class="headerlink" title="二、安装Kafka"></a>二、安装Kafka</h3><ol><li>安装Java</li><li>安装Zookeeper<ul><li>启动命令： <code>zkServer.sh start</code></li><li>停止命令： <code>zkServer.sh stop</code></li></ul></li><li>安装Kafka<ul><li>启动命令： <code>kafka-server-start.sh config/server.properties</code></li><li>启动命令： <code>kafka-server-stop.sh config/server.properties</code></li></ul></li></ol><hr><h3 id="三、代码实践"><a href="#三、代码实践" class="headerlink" title="三、代码实践"></a>三、代码实践</h3><p>添加Maven依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>生产者客户端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerFastStart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String brokerList = <span class="string">"localhost:9092"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String topic = <span class="string">"topic-demo"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"bootstrap.servers"</span>, brokerList);</span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> ProducerRecord&lt;&gt;(topic, <span class="string">"hello, Kafka!"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            producer.send(record);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>消费者客户端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerFastStart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String brokerList = <span class="string">"localhost:9092"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String topic = <span class="string">"topic-demo"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String groupId = <span class="string">"group.demo"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"bootstrap.servers"</span>, brokerList);</span><br><span class="line">        properties.put(<span class="string">"group.id"</span>, groupId);</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">1000</span>));</span><br><span class="line">            <span class="keyword">for</span>(ConsumerRecord&lt;String, String&gt; record : records)&#123;</span><br><span class="line">                System.out.println(record.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Apache Kafka起源于LinkedIn，后来于2011年成为开源Apache项目，然后于2012年成为First-class Apache项目。Kafka是用Scala和Java编写的。 Apache Kafka是基于发布订阅的容错消息系统。 它是快速，可扩展和设计分布。
    
    </summary>
    
      <category term="消息队列" scheme="http://suiwo.xyz/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="Kafka" scheme="http://suiwo.xyz/tags/Kafka/"/>
    
      <category term="消息队列" scheme="http://suiwo.xyz/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>创建一个基于redis的id生成器</title>
    <link href="http://suiwo.xyz/2019/08/26/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Eredis%E7%9A%84id%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://suiwo.xyz/2019/08/26/创建一个基于redis的id生成器/</id>
    <published>2019-08-26T05:17:10.000Z</published>
    <updated>2019-08-26T09:25:59.370Z</updated>
    
    <content type="html"><![CDATA[<hr><p>参考文章：</p><ul><li><a href="https://blog.csdn.net/hengyunabc/article/details/44244951" target="_blank" rel="noopener">https://blog.csdn.net/hengyunabc/article/details/44244951</a></li><li><a href="https://www.jianshu.com/p/955909e1bd71" target="_blank" rel="noopener">https://www.jianshu.com/p/955909e1bd71</a></li><li><a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="noopener">https://tech.meituan.com/2017/04/21/mt-leaf.html</a></li></ul><p>参考项目：<a href="https://github.com/hengyunabc/redis-id-generator值。" target="_blank" rel="noopener">https://github.com/hengyunabc/redis-id-generator值。</a><br>evalsha教程：<a href="https://www.runoob.com/redis/scripting-evalsha.html" target="_blank" rel="noopener">https://www.runoob.com/redis/scripting-evalsha.html</a><br>eval教程：<a href="https://www.runoob.com/redis/scripting-eval.html" target="_blank" rel="noopener">https://www.runoob.com/redis/scripting-eval.html</a></p><hr><hr><h3 id="一、分布式id生成器需要满足的要求"><a href="#一、分布式id生成器需要满足的要求" class="headerlink" title="一、分布式id生成器需要满足的要求"></a>一、分布式id生成器需要满足的要求</h3><h4 id="1-全局唯一"><a href="#1-全局唯一" class="headerlink" title="1.全局唯一"></a>1.全局唯一</h4><h4 id="2-尽可能保证id的递增"><a href="#2-尽可能保证id的递增" class="headerlink" title="2.尽可能保证id的递增"></a>2.尽可能保证id的递增</h4><blockquote><p>因为在查询的时候经常会有例如分页以及排序之类的需求，这个时候如果主键的id本身能够体现出时许效率会更加好。而对于常见的排序还有分页，我们解决办法有两种：</p><ol><li>在数据表中添加一个时间字段，对其创建一个普通索引。</li><li>id本生就是按照时间大致有序的。</li></ol></blockquote><p>因为常见的普通索引的访问效率是比聚集索引要慢的，所以我们尽可能使用第二种解决方案</p><h4 id="3-其他的一些要求"><a href="#3-其他的一些要求" class="headerlink" title="3.其他的一些要求"></a>3.其他的一些要求</h4><ol><li>id要尽可能的短，这样可以减少存储的空间以及增加查询的效率。</li><li>要有足够数量的id可以使用，不然当数据量非常大时，id耗尽就不行了</li><li>要考虑不同机器之间的时间不一致问题</li><li>QPS尽量要高，这样就可以，否则例如像类SNOWFLAKE算法会在64位ID中利用部分位数（如12）表示单位时间内生成的ID序号，这部分序号用完了，这个单位时间就不能再生成序号了</li></ol><hr><hr><h3 id="二、常见的id生成器方案："><a href="#二、常见的id生成器方案：" class="headerlink" title="二、常见的id生成器方案："></a>二、常见的id生成器方案：</h3><h4 id="1-利用mysql数据库的自增主键特性"><a href="#1-利用mysql数据库的自增主键特性" class="headerlink" title="1.利用mysql数据库的自增主键特性"></a>1.利用mysql数据库的自增主键特性</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>简单，代码方便，性能还行</li><li>数字的id是递增的，方便进行分页和排序</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>不同的数据库语法和实现不同，实现数据迁移或者多数据库版本的时候可能会出现一些问题</li><li>我们常见的是一主多从数据库，这会产生单点故障，以及性能瓶颈</li><li>数据量大时需要考虑分库分表</li></ul><h5 id="优化方案："><a href="#优化方案：" class="headerlink" title="优化方案："></a>优化方案：</h5><ul><li>使用多个master，对每个master设置的初始id不同，步长不同，例如有四个master，我们可以让master1生成（1，5，9），master2生成（2，6，10），master3生成（3，7，11），master4生成（4，8，12），这样可以降低单个数据库的压力</li></ul><hr><h4 id="2-UUID"><a href="#2-UUID" class="headerlink" title="2.UUID"></a>2.UUID</h4><blockquote><p>常见的一种分布式id生成器，可以利用数据库也可以利用代码。</p></blockquote><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ul><li>简单，方便</li><li>生成id的性能好，基本上不会有性能问题</li><li>全球唯一，对于数据库合并，迁移等问题不会存在冲突</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>不是有序的</li><li>UUID的字符串长度较长，查询效率不高，且消耗存储空间比较大，如果是海量数据库就需要考虑存储量的问题了</li><li>可读性差</li></ul><hr><h4 id="3-redis生成id"><a href="#3-redis生成id" class="headerlink" title="3.redis生成id"></a>3.redis生成id</h4><blockquote><p>redis的大致原理和普通数据库的生成原理是大致相同的，只不过redis不是使用自增组件，而是使用原子操作 INCR和INCRBY来实现。</p></blockquote><h5 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h5><ul><li>不依赖于数据库，灵活方便，且性能优于数据库。<br>数字ID天然排序，对分页或者需要排序的结果很有帮助。</li></ul><h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>如果系统中没有Redis，还需要引入新的组件，增加系统复杂度。</li><li>需要编码和配置的工作量比较大。</li></ul><hr><h4 id="4-snowflake算法"><a href="#4-snowflake算法" class="headerlink" title="4.snowflake算法"></a>4.snowflake算法</h4><blockquote><ol><li>一个ID由64位生成</li><li>41bit作为时间戳，记录当前时间到标记的起始时间（如到2018.1.1）差，精确到毫秒，那么服务可用时长为(1&lt;&lt;41)/(1000<em> 60 </em> 60 <em> 24 </em> 365) = 69.73年</li><li>10bit作为机器ID，也就是可以有1024台机器</li><li>12bit作为序列号，代表单位时间（这里是毫秒）内允许生成的ID总数，也就是1ms内允许生成4096个ID</li></ol></blockquote><h5 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h5><ul><li>不依赖于数据库，灵活方便，且性能优于数据库。</li><li>ID按照时间在单机上是递增的。</li></ul><h5 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。</li></ul><hr><h4 id="5-类SNOWFLAKE算法"><a href="#5-类SNOWFLAKE算法" class="headerlink" title="5.类SNOWFLAKE算法"></a>5.类SNOWFLAKE算法</h4><blockquote><p>SNOWFLAKE给出的主要是一个思想，把ID划分为多个段，有不同的含义，可以结合自己的要求进行重新划分。按照个人理解，时间戳位数少了，机器位数多了，序列号位数多了。借鉴snowflake的思想，结合各公司的业务逻辑和并发量，可以实现自己的分布式ID生成算法。</p></blockquote><h5 id="举例，假设某公司ID生成器服务的需求如下："><a href="#举例，假设某公司ID生成器服务的需求如下：" class="headerlink" title="举例，假设某公司ID生成器服务的需求如下："></a>举例，假设某公司ID生成器服务的需求如下：</h5><ul><li>单机高峰并发量小于1W，预计未来5年单机高峰并发量小于10W</li><li>有2个机房，预计未来5年机房数量小于4个</li><li>每个机房机器数小于100台</li><li>目前有5个业务线有ID生成需求，预计未来业务线数量小于10个</li></ul><h5 id="分析过程如下："><a href="#分析过程如下：" class="headerlink" title="分析过程如下："></a>分析过程如下：</h5><ul><li>高位取从2017年1月1日到现在的毫秒数（假设系统ID生成器服务在这个时间之后上线），假设系统至少运行10年，那至少需要10年 <em> 365天 </em> 24小时 <em> 3600秒 </em> 1000毫秒 = 320 * 10 ^ 9，差不多预留39bit给毫秒数</li><li>每秒的单机高峰并发量小于10W，即平均每毫秒的单机高峰并发量小于100，差不多预留7bit给每毫秒内序列号</li><li>5年内机房数小于4个，预留2bit给机房标识</li><li>每个机房小于100台机器，预留7bit给每个机房内的服务器标识</li><li>业务线小于10个，预留4bit给业务线标识</li></ul><h5 id="这样设计的64bit标识，可以保证："><a href="#这样设计的64bit标识，可以保证：" class="headerlink" title="这样设计的64bit标识，可以保证："></a>这样设计的64bit标识，可以保证：</h5><ul><li>每个业务线、每个机房、每个机器生成的ID都是不同的</li><li>同一个机器，每个毫秒内生成的ID都是不同的</li><li>同一个机器，同一个毫秒内，以序列号区区分保证生成的ID是不同的</li><li>将毫秒数放在最高位，保证生成的ID是趋势递增的</li></ul><h5 id="缺点：-3"><a href="#缺点：-3" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>由于“没有一个全局时钟”，每台服务器分配的ID是绝对递增的，但从全局看，生成的ID只是趋势递增的（有些服务器的时间早，有些服务器的时间晚）</li></ul><hr><hr><h3 id="三、实现一个简易的redis的id生成器"><a href="#三、实现一个简易的redis的id生成器" class="headerlink" title="三、实现一个简易的redis的id生成器"></a>三、实现一个简易的redis的id生成器</h3><blockquote><p>利用redis的lua脚本执行功能，在每个节点上通过lua脚本生成唯一id，其中使用的是雪花算法。<br>生成的ID是64位的：</p><ul><li>使用41 bit来存放时间，精确到毫秒，可以使用41年。</li><li>使用12 bit来存放逻辑分片ID，最大分片ID是4095</li><li>使用10 bit来存放自增长ID，意味着每个节点，每毫秒最多可以生成1024个ID</li></ul></blockquote><p>比如GTM时间 <code>Fri Mar 13 10:00:00 CST 2015</code> ，它的距1970年的毫秒数是 1426212000000，假定分片ID是53，自增长序列是4，则生成的ID是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左移22位，指代最前面14bit的存储信息，再左移10位表示中间存储分片信息的12bit</span></span><br><span class="line"><span class="number">5981966696448054276</span> = <span class="number">1426212000000</span> &lt;&lt; <span class="number">22</span> + <span class="number">53</span> &lt;&lt; <span class="number">10</span> + <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>redis提供了TIME命令，可以取得redis服务器上的秒数和微秒数。因些lua脚本返回的是一个四元组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">second, microSecond, partition, seq</span><br></pre></td></tr></table></figure></p><p>客户端要自己处理，生成最终ID。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((second * <span class="number">1000</span> + microSecond / <span class="number">1000</span>) &lt;&lt; (<span class="number">12</span> + <span class="number">10</span>)) + (shardId &lt;&lt; <span class="number">10</span>) + seq;</span><br></pre></td></tr></table></figure></p><p>seq对应的是集群中的节点值<br>如集群里有3个节点，则节点1返回的seq是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0, 3, 6, 9, 12 ...</span><br></pre></td></tr></table></figure></p><p>节点2返回的seq是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1, 4, 7, 10, 13 ...</span><br></pre></td></tr></table></figure></p><p>节点3返回的seq是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2, 5, 8, 11, 14 ...</span><br></pre></td></tr></table></figure></p><p>我们可以将lua脚本转换成sha1值，然后通过EVALSHA指令传递这个</p><h5 id="下面我们直接看代码"><a href="#下面我们直接看代码" class="headerlink" title="下面我们直接看代码"></a>下面我们直接看代码</h5><p>项目主程序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String tab = <span class="string">"order"</span>;</span><br><span class="line"><span class="keyword">long</span> userId = <span class="number">123456789</span>;</span><br><span class="line"></span><br><span class="line">IdGenerator idGenerator = IdGenerator.builder()</span><br><span class="line">.addHost(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>, <span class="string">"c5809078fa6d652e0b0232d552a9d06d37fe819c"</span>)</span><br><span class="line"><span class="comment">//.addHost("127.0.0.1", 7379, "accb7a987d4fb0fd85c57dc5a609529f80ec3722")</span></span><br><span class="line"><span class="comment">//.addHost("127.0.0.1", 8379, "f55f781ca4a00a133728488e15a554c070b17255")</span></span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> id = idGenerator.next(tab, userId);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"id:"</span> + id);</span><br><span class="line">List&lt;Long&gt; result = IdGenerator.parseId(id);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"miliSeconds:"</span> + result.get(<span class="number">0</span>) + <span class="string">", partition:"</span></span><br><span class="line">+ result.get(<span class="number">1</span>) + <span class="string">", seq:"</span> + result.get(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="id生成器相关代码"><a href="#id生成器相关代码" class="headerlink" title="id生成器相关代码"></a>id生成器相关代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(IdGenerator.class);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JedisPool, luaSha</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Pair&lt;JedisPool, String&gt;&gt; jedisPoolList;</span><br><span class="line"><span class="keyword">int</span> retryTimes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">IdGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">IdGenerator</span><span class="params">(List&lt;Pair&lt;JedisPool, String&gt;&gt; jedisPoolList,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> retryTimes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jedisPoolList = jedisPoolList;</span><br><span class="line"><span class="keyword">this</span>.retryTimes = retryTimes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IdGeneratorBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> IdGeneratorBuilder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IdGeneratorBuilder</span> </span>&#123;</span><br><span class="line">List&lt;Pair&lt;JedisPool, String&gt;&gt; jedisPoolList = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">int</span> retryTimes = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IdGeneratorBuilder <span class="title">addHost</span><span class="params">(String host, <span class="keyword">int</span> port, String luaSha)</span> </span>&#123;</span><br><span class="line">jedisPoolList.add(Pair.of(<span class="keyword">new</span> JedisPool(host, port), luaSha));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IdGeneratorBuilder <span class="title">retryTimes</span><span class="params">(<span class="keyword">int</span> retryTimes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.retryTimes = retryTimes;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IdGenerator <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> IdGenerator(jedisPoolList, retryTimes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">next</span><span class="params">(String tab)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next(tab, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">next</span><span class="params">(String tab, <span class="keyword">long</span> shardId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; retryTimes; ++i) &#123;</span><br><span class="line">Long id = innerNext(tab, shardId);</span><br><span class="line"><span class="keyword">if</span> (id != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can not generate id!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Long <span class="title">innerNext</span><span class="params">(String tab, <span class="keyword">long</span> shardId)</span> </span>&#123;</span><br><span class="line">index++;</span><br><span class="line">Pair&lt;JedisPool, String&gt; pair = jedisPoolList.get(index</span><br><span class="line">% jedisPoolList.size());</span><br><span class="line">JedisPool jedisPool = pair.getLeft();</span><br><span class="line"></span><br><span class="line">String luaSha = pair.getRight();</span><br><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">jedis = jedisPool.getResource();</span><br><span class="line">List&lt;Long&gt; result = (List&lt;Long&gt;) jedis.evalsha(luaSha, <span class="number">2</span>, tab, <span class="string">""</span> + shardId);</span><br><span class="line"><span class="keyword">long</span> id = buildId(result.get(<span class="number">0</span>), result.get(<span class="number">1</span>), result.get(<span class="number">2</span>),</span><br><span class="line">result.get(<span class="number">3</span>));</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125; <span class="keyword">catch</span> (JedisConnectionException e) &#123;</span><br><span class="line"><span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">jedisPool.returnBrokenResource(jedis);</span><br><span class="line">&#125;</span><br><span class="line">logger.error(<span class="string">"generate id error!"</span>, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">jedisPool.returnResource(jedis);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">buildId</span><span class="params">(<span class="keyword">long</span> second, <span class="keyword">long</span> microSecond, <span class="keyword">long</span> shardId,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">long</span> seq)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> miliSecond = (second * <span class="number">1000</span> + microSecond / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">return</span> (miliSecond &lt;&lt; (<span class="number">12</span> + <span class="number">10</span>)) + (shardId &lt;&lt; <span class="number">10</span>) + seq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Long&gt; <span class="title">parseId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> miliSecond = id &gt;&gt;&gt; <span class="number">22</span>;</span><br><span class="line"><span class="comment">// 2 ^ 12 = 0xFFF</span></span><br><span class="line"><span class="keyword">long</span> shardId = (id &amp; (<span class="number">0xFFF</span> &lt;&lt; <span class="number">10</span>)) &gt;&gt; <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> seq = id &amp; <span class="number">0x3FF</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Long&gt; re = <span class="keyword">new</span> ArrayList&lt;Long&gt;(<span class="number">4</span>);</span><br><span class="line">re.add(miliSecond);</span><br><span class="line">re.add(shardId);</span><br><span class="line">re.add(seq);</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>至此我们的基于redis的id生成器就完成了</p></blockquote>]]></content>
    
    <summary type="html">
    
      在复杂分布式系统中，往往需要对大量的数据和消息进行唯一标识。这个时候如何创建连续不重复的就尤为重要了，下面我们就整理一下常见的id生成器以及使用redis去实现一个id生成器
    
    </summary>
    
      <category term="redis" scheme="http://suiwo.xyz/categories/redis/"/>
    
    
      <category term="redis" scheme="http://suiwo.xyz/tags/redis/"/>
    
      <category term="分布式" scheme="http://suiwo.xyz/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="SNOWFLAKE" scheme="http://suiwo.xyz/tags/SNOWFLAKE/"/>
    
  </entry>
  
  <entry>
    <title>手写SpringMVC，剑指优秀开源框架灵魂</title>
    <link href="http://suiwo.xyz/2019/08/20/%E6%89%8B%E5%86%99SpringMVC%EF%BC%8C%E5%89%91%E6%8C%87%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%81%B5%E9%AD%82/"/>
    <id>http://suiwo.xyz/2019/08/20/手写SpringMVC，剑指优秀开源框架灵魂/</id>
    <published>2019-08-20T07:23:44.000Z</published>
    <updated>2019-08-26T09:08:30.961Z</updated>
    
    <content type="html"><![CDATA[<hr><p>由于Spring官方就是选择gradle作为自动化构建工具，所以我们在本次尝试中就按照spring的选择也是用gradle<br>在整个项目中，我们一共包含两个模块framework模块用于首先实现我们springmvc的常见功能，test模块则是用来测试我们手写的模块是否正确<br>项目链接：<a href="https://github.com/ZhangJia97/Mini-Spring" target="_blank" rel="noopener">https://github.com/ZhangJia97/Mini-Spring</a></p><hr><p>下面是项目结构，只保留了我们用到的文件结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">├── build.gradle</span><br><span class="line">├── framework</span><br><span class="line">│   ├── build.gradle</span><br><span class="line">│   └── src</span><br><span class="line">│       ├── main</span><br><span class="line">│           ├── java</span><br><span class="line">│               └── xyz</span><br><span class="line">│                   └── suiwo</span><br><span class="line">│                       └── imooc</span><br><span class="line">│                           ├── beans</span><br><span class="line">│                           │   ├── Autowired.java</span><br><span class="line">│                           │   ├── Bean.java</span><br><span class="line">│                           │   └── BeanFactory.java</span><br><span class="line">│                           ├── core</span><br><span class="line">│                           │   └── ClassScanner.java</span><br><span class="line">│                           ├── starter</span><br><span class="line">│                           │   └── MiniApplication.java</span><br><span class="line">│                           └── web</span><br><span class="line">│                               ├── handler</span><br><span class="line">│                               │   ├── HandlerManager.java</span><br><span class="line">│                               │   └── MappingHandler.java</span><br><span class="line">│                               ├── mvc</span><br><span class="line">│                               │   ├── Controller.java</span><br><span class="line">│                               │   ├── RequestMapping.java</span><br><span class="line">│                               │   └── RequestParam.java</span><br><span class="line">│                               ├── server</span><br><span class="line">│                               │   └── TomcatServer.java</span><br><span class="line">│                               └── servlet</span><br><span class="line">│                                   └── DispatcherServlet.java</span><br><span class="line">└── <span class="built_in">test</span></span><br><span class="line">    ├── build.gradle</span><br><span class="line">    └── src</span><br><span class="line">        ├── main</span><br><span class="line">             ├── java</span><br><span class="line">                └── xyz</span><br><span class="line">                    └── suiwo</span><br><span class="line">                        └── imooc</span><br><span class="line">                            ├── Application.java</span><br><span class="line">                            ├── controller</span><br><span class="line">                            │   └── SalaryController.java</span><br><span class="line">                            └── service</span><br><span class="line">                                └── SalaryService.java</span><br></pre></td></tr></table></figure></p><hr><p>首先我们需要在framework的依赖中添加tomcat的依赖，因为springboot就是通过加入tomcat依赖来实现的<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.12'</span></span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'org.apache.tomcat.embed'</span>, name: <span class="string">'tomcat-embed-core'</span>, version: <span class="string">'8.5.23'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>接下来让我们看看如何去创建一个tomcat服务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatServer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Tomcat tomcat;</span><br><span class="line">    <span class="keyword">private</span> String[] args;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TomcatServer</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.args = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startServer</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">        tomcat.setPort(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">        Context context = <span class="keyword">new</span> StandardContext();</span><br><span class="line">        context.setPath(<span class="string">""</span>);</span><br><span class="line">        context.addLifecycleListener(<span class="keyword">new</span> Tomcat.FixContextListener());</span><br><span class="line">        DispatcherServlet dispatcherServlet = <span class="keyword">new</span> DispatcherServlet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// servlet注册到tomcat容器内并开启异步支持</span></span><br><span class="line">        Tomcat.addServlet(context, <span class="string">"dispatcherServlet"</span>, dispatcherServlet).setAsyncSupported(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        context.addServletMappingDecoded(<span class="string">"/"</span>, <span class="string">"dispatcherServlet"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册到默认host容器</span></span><br><span class="line">        tomcat.getHost().addChild(context);</span><br><span class="line">        tomcat.start();</span><br><span class="line"></span><br><span class="line">        Thread awaitThread = <span class="keyword">new</span> Thread(<span class="string">"tomcat_await_thread"</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                TomcatServer.<span class="keyword">this</span>.tomcat.getServer().await();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置成非守护线程</span></span><br><span class="line">        awaitThread.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">        awaitThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>然后我们可以看到上述代码向tomcat中set了一个dispatchServlet用于处理请求，我们看看DispatchServlet如何去处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(MappingHandler mappingHandler : HandlerManager.mappingHandlerList)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(mappingHandler.handle(req, res))&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在已经成功创建了一个Tomcat的服务类，下面我们就可以在主类中启动tomcat服务了</p><hr><p>然后我们看一些framework的主类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Class&lt;?&gt; cls, String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Mini-Spring!"</span>);</span><br><span class="line">        <span class="comment">// 创建一个Tomcat服务</span></span><br><span class="line">        TomcatServer tomcatServer = <span class="keyword">new</span> TomcatServer(args);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 启动tomcat</span></span><br><span class="line">            tomcatServer.startServer();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 扫描项目中当前cls目录下的所有包</span></span><br><span class="line">            List&lt;Class&lt;?&gt;&gt; classList = ClassScanner.scannerClass(cls.getPackage().getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化所有bean</span></span><br><span class="line">            BeanFactory.init(classList);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化所有的MappingHandler</span></span><br><span class="line">            HandlerManager.resolveMappingHandler(classList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>我们再创建三个mvc相关的注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestParam &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>然后我们看一下ClassScanner类，这个类主要用于扫描包<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassScanner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Class&lt;?&gt;&gt; scannerClass(String packageName) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; classList= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String path = packageName.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取默认类加载器</span></span><br><span class="line">        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取资源文件的路径</span></span><br><span class="line">        Enumeration&lt;URL&gt; resources = classLoader.getResources(path);</span><br><span class="line">        <span class="keyword">while</span>(resources.hasMoreElements())&#123;</span><br><span class="line">            URL resource = resources.nextElement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断资源类型</span></span><br><span class="line">            <span class="keyword">if</span>(resource.getProtocol().contains(<span class="string">"jar"</span>))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果资源类型是jar包，则我们先获取jar包的绝对路径</span></span><br><span class="line">                JarURLConnection jarURLConnection = (JarURLConnection) resource.openConnection();</span><br><span class="line">                String jarFilePath = jarURLConnection.getJarFile().getName();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取这个jar包下所有的类</span></span><br><span class="line">                classList.addAll(getClassesFromJar(jarFilePath, path));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// todo 处理非jar包的情况</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Class&lt;?&gt;&gt; getClassesFromJar(String jarFilePath, String path) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//初始化一个容器用于存储类</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过路径获取JarFile实例</span></span><br><span class="line">        JarFile jarFile = <span class="keyword">new</span> JarFile(jarFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历jar包，每个jarEntry都是jar包里的一个文件</span></span><br><span class="line">        Enumeration&lt;JarEntry&gt; jarEntryEnumeration = jarFile.entries();</span><br><span class="line">        <span class="keyword">while</span>(jarEntryEnumeration.hasMoreElements())&#123;</span><br><span class="line">            JarEntry jarEntry = jarEntryEnumeration.nextElement();</span><br><span class="line">            String entryName = jarEntry.getName();  <span class="comment">// xyz/suiwo/imooc/test/Test.class</span></span><br><span class="line">            <span class="keyword">if</span>(entryName.startsWith(path) &amp;&amp; entryName.endsWith(<span class="string">".class"</span>))&#123;</span><br><span class="line">                <span class="comment">// 把分隔符换成点，并去除.class后缀</span></span><br><span class="line">                String classFullName = entryName.replace(<span class="string">"/"</span>, <span class="string">"."</span>).substring(<span class="number">0</span>, entryName.length() - <span class="number">6</span>);</span><br><span class="line">                classes.add(Class.forName(classFullName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>作为spring的经典ioc思想，初始化创建bean是重中之重，下面让我们看看如何实现吧<br>对于常见与Bean相关的注解就是<code>@Bean</code>还有<code>@Autowired</code><br>所以我们首先创建两个注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>下面我们看看如何去初始化bean吧<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class&lt;?&gt;, Object&gt; classToBean = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(Class&lt;?&gt; cls)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classToBean.get(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(List&lt;Class&lt;?&gt;&gt; classList)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; toCreate = <span class="keyword">new</span> ArrayList&lt;&gt;(classList);</span><br><span class="line">        <span class="keyword">while</span> (toCreate.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> remainSize = toCreate.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; toCreate.size(); i++)&#123;</span><br><span class="line">                <span class="comment">// 返回true则说明创建成功或者说当前类不是一个bean</span></span><br><span class="line">                <span class="comment">// 返回false则此时可能存存在当前需要创建的bean的依赖还没有创建所以暂时先跳过</span></span><br><span class="line">                <span class="keyword">if</span>(finishCreate(toCreate.get(i)))&#123;</span><br><span class="line">                    toCreate.remove(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果数量没有改变则说明出现了死循环，抛出异常</span></span><br><span class="line">            <span class="keyword">if</span>(toCreate.size() == remainSize)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"死循环"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">finishCreate</span><span class="params">(Class&lt;?&gt; cls)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">// 如果没有满足的注解，则直接返回true</span></span><br><span class="line">        <span class="keyword">if</span>(!cls.isAnnotationPresent(Bean.class) &amp;&amp; !cls.isAnnotationPresent(Controller.class))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object bean = cls.newInstance();</span><br><span class="line">        <span class="keyword">for</span>(Field field : cls.getDeclaredFields())&#123;</span><br><span class="line">            <span class="keyword">if</span>(field.isAnnotationPresent(Autowired.class))&#123;</span><br><span class="line">                Class&lt;?&gt; fieldType = field.getType();</span><br><span class="line">                Object reliantBean = BeanFactory.getBean(fieldType);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果为空，则说明当前类中的字段所依赖的类还没有注入，所以返回false，先跳过，等到所需要依赖注入之后再创建</span></span><br><span class="line">                <span class="keyword">if</span>(reliantBean == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                field.set(bean, reliantBean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将创建好的bean放入容器中</span></span><br><span class="line">        classToBean.put(cls, bean);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>然后我们来看一下控制器，每一个MappingHandler都是一个请求映射器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappingHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要处理的uri</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所对应的方法</span></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所对应的方法</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; controller;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所需要的参数</span></span><br><span class="line">    <span class="keyword">private</span> String[] args;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MappingHandler</span><span class="params">(String uri, Method method, Class&lt;?&gt; controller, String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uri = uri;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.controller = controller;</span><br><span class="line">        <span class="keyword">this</span>.args = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若与MappingHandler匹配成功，执行方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handle</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, InvocationTargetException, IOException </span>&#123;</span><br><span class="line">        String requestUri = ((HttpServletRequest)req).getRequestURI();</span><br><span class="line">        <span class="keyword">if</span>(!uri.equals(requestUri))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] parameters = <span class="keyword">new</span> Object[args.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++)&#123;</span><br><span class="line">            parameters[i] = req.getParameter(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Object ctl = BeanFactory.getBean(controller);</span><br><span class="line">        Object response = method.invoke(ctl, parameters);</span><br><span class="line">        res.getWriter().println(response.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>我们在创建一个管理器去管理这些MappingHandler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;MappingHandler&gt; mappingHandlerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把Controller类挑选出来，并将类中的带有@RequestMapping方法初始化成MappingHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resolveMappingHandler</span><span class="params">(List&lt;Class&lt;?&gt;&gt; classList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Class&lt;?&gt; cls : classList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cls.isAnnotationPresent(Controller.class))&#123;</span><br><span class="line">                parseHandlerFromController(cls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析controller类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseHandlerFromController</span><span class="params">(Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class="line">        Method[] methods = cls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!method.isAnnotationPresent(RequestMapping.class))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String uri = method.getDeclaredAnnotation(RequestMapping.class).value();</span><br><span class="line">            List&lt;String&gt; paramNameList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(Parameter parameter : method.getParameters())&#123;</span><br><span class="line">                <span class="keyword">if</span>(parameter.isAnnotationPresent(RequestParam.class))&#123;</span><br><span class="line">                    paramNameList.add(parameter.getDeclaredAnnotation(RequestParam.class).value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] params = paramNameList.toArray(<span class="keyword">new</span> String[paramNameList.size()]);</span><br><span class="line">            MappingHandler mappingHandler = <span class="keyword">new</span> MappingHandler(uri, method, cls, params);</span><br><span class="line">            HandlerManager.mappingHandlerList.add(mappingHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，我们就已经成功的将整个框架大致完成了，对于test模块中的代码，我就不在这里在书写了，因为和我们日常写springboot业务相同只是为了测试我们手写框架的几个功能。</p>]]></content>
    
    <summary type="html">
    
      本文是在学习了慕课的《手写SpringMVC，剑指优秀开源框架灵魂》后进行的代码总结
    
    </summary>
    
      <category term="Springboot" scheme="http://suiwo.xyz/categories/Springboot/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="SpringMVC" scheme="http://suiwo.xyz/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>aop链式调用</title>
    <link href="http://suiwo.xyz/2019/08/19/aop%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/"/>
    <id>http://suiwo.xyz/2019/08/19/aop链式调用/</id>
    <published>2019-08-19T13:28:23.000Z</published>
    <updated>2019-08-26T09:25:49.292Z</updated>
    
    <content type="html"><![CDATA[<hr><p>多个aop如果叠加<br>采用了责任链的模式<br><img src="/images/aop链式调用/42CA7E10-07EF-4031-8CB9-E37BFE013FA6.png" alt="这里写图片描述"><br>使用ConcerteHandler实现类实现HandleProcess接口同时这个实现类又组合了这个接口，通过successor判断来进行链式调用</p><hr><p>首先我们新建一个Handler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler successor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getSuccessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        handleProcess();</span><br><span class="line">        <span class="keyword">if</span>(successor != <span class="keyword">null</span>)&#123;</span><br><span class="line">            successor.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>下面我们看看client端实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerA</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by a"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerB</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by b"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerC</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by c"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Handler handlerA = <span class="keyword">new</span> HandlerA();</span><br><span class="line">        Handler handlerB = <span class="keyword">new</span> HandlerB();</span><br><span class="line">        Handler handlerC = <span class="keyword">new</span> HandlerC();</span><br><span class="line">        handlerA.setSuccessor(handlerB);</span><br><span class="line">        handlerB.setSuccessor(handlerC);</span><br><span class="line">        handlerA.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此我们实现了链式调用，但是我们也发现了每次都需要设置从属关系。</p><hr><p>下面我们对上面方法改造，使用另外一个Chain对再下面的代码进行一次封装<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Handler handlerA = <span class="keyword">new</span> HandlerA();</span><br><span class="line">    Handler handlerB = <span class="keyword">new</span> HandlerB();</span><br><span class="line">    Handler handlerC = <span class="keyword">new</span> HandlerC();</span><br><span class="line">    handlerA.setSuccessor(handlerB);</span><br><span class="line">    handlerB.setSuccessor(handlerC);</span><br><span class="line">    handlerA.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>下面我们新建一个ChainHandler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Chain chain)</span></span>&#123;</span><br><span class="line">        handleProcess();</span><br><span class="line">        chain.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Chain对链式关系封装起来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ChainHandler&gt; handlers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chain</span><span class="params">(List&lt;ChainHandler&gt; handlers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handlers = handlers;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">proceed</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= handlers.size())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        handlers.get(index++).execute(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>下面我们看一下如何实现调用类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainHandlerA</span> <span class="keyword">extends</span> <span class="title">ChainHandler</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by chain a"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainHandlerB</span> <span class="keyword">extends</span> <span class="title">ChainHandler</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by chain b"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainHandlerC</span> <span class="keyword">extends</span> <span class="title">ChainHandler</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by chain c"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;ChainHandler&gt; handlers = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> ChainHandlerA(),</span><br><span class="line">                <span class="keyword">new</span> ChainHandlerB(),</span><br><span class="line">                <span class="keyword">new</span> ChainHandlerC()</span><br><span class="line">        );</span><br><span class="line">        Chain chain = <span class="keyword">new</span> Chain(handlers);</span><br><span class="line">        chain.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      本文是对aop链式调用的总结
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="aop" scheme="http://suiwo.xyz/tags/aop/"/>
    
      <category term="链式调用" scheme="http://suiwo.xyz/tags/%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>cglib动态代理</title>
    <link href="http://suiwo.xyz/2019/08/19/cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://suiwo.xyz/2019/08/19/cglib动态代理/</id>
    <published>2019-08-19T04:07:48.000Z</published>
    <updated>2019-08-26T09:25:42.541Z</updated>
    
    <content type="html"><![CDATA[<hr><p>首先我们看一下如何实现cglib的动态代理</p><hr><p>cglib通过实现MethodInterceptor接口来实现动态代理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before in cglib"</span>);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            result = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"after in cglib"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>下面代码是告诉我们如何实现cglib的调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInterceptorClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(RealSubject.class);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> DemoMethodInterceptor());</span><br><span class="line">        Subject subject = (Subject) enhancer.create();</span><br><span class="line">        subject.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><hr><h3 id="JDK与Cglib代理对比"><a href="#JDK与Cglib代理对比" class="headerlink" title="JDK与Cglib代理对比"></a>JDK与Cglib代理对比</h3><p>JDK只能针对有接口的类的接口方法进行动态代理<br>Cglib基 于继承来实现代理,无法对static、final类进行代理,<br>Cglib基于继承来实现代理,无法对private、static方法进行代理</p><p>最后我们看看Spring还如何创建动态代理类的</p><p><img src="/images/cglib动态代理/F0B90539-0325-42E7-A7EE-2B8BBBB352CD.png" alt="这里写图片描述"></p><p>下面我们看一下DefalutAopProxyFactory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title">AopProxyFactory</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultAopProxyFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!config.isOptimize() &amp;&amp; !config.isProxyTargetClass() &amp;&amp; !<span class="keyword">this</span>.hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">            <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (AopProxy)(!targetClass.isInterface() &amp;&amp; !Proxy.isProxyClass(targetClass) ? <span class="keyword">new</span> ObjenesisCglibAopProxy(config) : <span class="keyword">new</span> JdkDynamicAopProxy(config));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasNoUserSuppliedProxyInterfaces</span><span class="params">(AdvisedSupport config)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt;[] ifcs = config.getProxiedInterfaces();</span><br><span class="line">        <span class="keyword">return</span> ifcs.length == <span class="number">0</span> || ifcs.length == <span class="number">1</span> &amp;&amp; SpringProxy.class.isAssignableFrom(ifcs[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在代码中我们可以看到有<code>!config.isOptimize() &amp;&amp; !config.isProxyTargetClass() &amp;&amp; !this.hasNoUserSuppliedProxyInterfaces(config)</code>这三个选项，如果这三个都不满足就会走JDK的实现。或者本身是JDK代理的话也会走JDK代理，其他都是走cglib代理</p><hr><p>那我们如何强制使用cglib呢<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 强制使用cglib</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AopDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>总结：<br>如果目标对象实现了接口,则默认采用JDK动态代理<br>如果目标对象没有实现接口,则采用Cglib进行动态代理<br>如果目标对象实现了接口,且强制cglib代理,则使用cglib代理</p>]]></content>
    
    <summary type="html">
    
      CGLIB(Code Generation Library)是一个开源项目！是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。Hibernate支持它来实现PO(Persistent Object 持久化对象)字节码的动态生成。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="cglib" scheme="http://suiwo.xyz/tags/cglib/"/>
    
      <category term="动态代理" scheme="http://suiwo.xyz/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JDK动态代理解析</title>
    <link href="http://suiwo.xyz/2019/08/19/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://suiwo.xyz/2019/08/19/JDK动态代理解析/</id>
    <published>2019-08-19T02:59:25.000Z</published>
    <updated>2019-08-26T09:25:38.005Z</updated>
    
    <content type="html"><![CDATA[<hr><p>首先我们生成的时候调用了Proxy.newInstance()这个方法，这个方法会调用getProxyCLass0()方法，而getProxyCLass0()是从ProxyClassFactory中生成proxy代码，而ProxyClassFactory又是使用ProxyGenerator来生成的代码，然后生成的字节码，使用反射来new一个实例。<br>整个调用大致就是 newInstance() -&gt; getProxyCLass0() -&gt; ProxyClassFactory -&gt; ProxyGenerator -&gt; generateProxyClass</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = (Subject) Proxy.newProxyInstance(DynamicClient.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Subject.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> JDKProxySubject(<span class="keyword">new</span> RealSubject()));</span><br><span class="line">        subject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>我们使用newProxyInstance新建一个实例，进入源码中查看会发现源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      InvocationHandler h)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">    <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">        <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">        <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        Throwable t = e.getCause();</span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>在源码中有这行代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寻找或生成制定的代理类</span></span><br><span class="line">Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br></pre></td></tr></table></figure></p><p>进入这个函数，源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a proxy class.  Must call the checkProxyAccess method</span></span><br><span class="line"><span class="comment"> * to perform permission checks before calling this.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                       Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">    <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"interface limit exceeded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the proxy class defined by the given loader implementing</span></span><br><span class="line">    <span class="comment">// the given interfaces exists, this will simply return the cached copy;</span></span><br><span class="line">    <span class="comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span></span><br><span class="line">    <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现函数会先从缓存中获取，如果缓存中不存在，则生成一个放入缓存</p><hr><p>缓存如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * a cache of proxy classes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span><br><span class="line">    proxyClassCache = <span class="keyword">new</span> WeakCache&lt;&gt;(<span class="keyword">new</span> KeyFactory(), <span class="keyword">new</span> ProxyClassFactory());</span><br></pre></td></tr></table></figure></p><p>由此可见当不存在的时候是由ProxyClassFactory()来生成的</p><hr><p>然后我们看以下这个Factory的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * A factory function that generates, defines and returns the proxy class given</span></span><br><span class="line"><span class="comment">    * the ClassLoader and array of interfaces.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClassFactory</span></span></span><br><span class="line">    implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// prefix for all proxy class names</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">"$Proxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// next number to use for generation of unique proxy class names</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that the class loader resolves the name of this</span></span><br><span class="line"><span class="comment">                * interface to the same Class object.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    intf + <span class="string">" is not visible from class loader"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that the Class object actually represents an</span></span><br><span class="line"><span class="comment">                * interface.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    interfaceClass.getName() + <span class="string">" is not an interface"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that this interface is not a duplicate.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"repeated interface: "</span> + interfaceClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line">        <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Record the package of a non-public proxy interface so that the</span></span><br><span class="line"><span class="comment">            * proxy class will be defined in the same package.  Verify that</span></span><br><span class="line"><span class="comment">            * all non-public proxy interfaces are in the same package.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                accessFlags = Modifier.FINAL;</span><br><span class="line">                String name = intf.getName();</span><br><span class="line">                <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">                String pkg = ((n == -<span class="number">1</span>) ? <span class="string">""</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    proxyPkg = pkg;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"non-public interfaces from different packages"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// if no non-public proxy interfaces, use com.sun.proxy package</span></span><br><span class="line">            proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">"."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Choose a name for the proxy class to generate.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">        String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">            proxyName, interfaces, accessFlags);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                                proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">                * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">                * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">                * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">                * exceeded).</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>在这个类的源码中的apply函数可以看到这几行代码生成字节码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">    proxyName, interfaces, accessFlags);</span><br></pre></td></tr></table></figure></p><hr><p>下面我们在调用接口的类中添加这个系统配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br><span class="line">        Subject subject = (Subject) Proxy.newProxyInstance(DynamicClient.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Subject.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> JDKProxySubject(<span class="keyword">new</span> RealSubject()));</span><br><span class="line">        subject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>之后在我们运行后会发现项目根路径中出现了下面这个文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com/sun/proxy/<span class="variable">$Proxy0</span>.class</span><br></pre></td></tr></table></figure></p><hr><p>这个就是生成的字节码文件<br>进行反编译之后，代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"><span class="keyword">import</span> xyz.suiwo.demo.Subject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m4 = Class.forName(<span class="string">"xyz.suiwo.demo.Subject"</span>).getMethod(<span class="string">"hello"</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"xyz.suiwo.demo.Subject"</span>).getMethod(<span class="string">"request"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>然后我们大致阅读以下反编译的代码，就会有大致了解了，所以我们多添加一个接口的时候，动态代理就会在解析成字节码文件的时候动态生成代理。但是通过静态代理，新添加多少个类就需要手动添加多少次</p>]]></content>
    
    <summary type="html">
    
      本文是对jdk动态代理的一些总结。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="JDK动态代理" scheme="http://suiwo.xyz/tags/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>静态代理与动态代理</title>
    <link href="http://suiwo.xyz/2019/08/19/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://suiwo.xyz/2019/08/19/静态代理与动态代理/</id>
    <published>2019-08-19T02:46:02.000Z</published>
    <updated>2019-08-26T09:25:29.969Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理存在一些缺点，如每当要代理的方法越多，那你需要代理的方法也越多，这样可能会有很多的重复<br>下面我们先实现以下静态代理的例子</p><p>先创建一个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is request"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个静态代理类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxySubject</span><span class="params">(RealSubject realSubject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            realSubject.request();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"after"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用静态代理类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> ProxySubject(<span class="keyword">new</span> RealSubject());</span><br><span class="line">        subject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设我们这个时候在Subject接口中新建一个hello()方法，这个时候我们需要重写RealSubject以及ProxySubject这两个类，这是很不方便的，下面让我们看一下动态代理如何实现的</p><hr><h3 id="JDK与Cglib代理对比"><a href="#JDK与Cglib代理对比" class="headerlink" title="JDK与Cglib代理对比"></a>JDK与Cglib代理对比</h3><ul><li>JDK只能针对有接口的类的接口方法进行动态代理</li><li>Cglib基于继承来实现代理,无法对static、final类进行代理</li><li>Cglib基于继承来实现代理,无法对private、static方法进行代理</li></ul><hr><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理有两类实现：基于接口的代理和基于继承的代理，而这两类的代表分别为JDK代理和Cglib代理，下面我们来演示一下基于JDK的动态代理</p><p>而对于JDK动态代理的实现要点有以下三个</p><ol><li>通过java.lang.reflect.Proxy类动态生成代理类</li><li>实现InvocationHandler这个几口</li><li>JDK代理只能基于接口的动态代理</li></ol><p>首先我们创建一个JDK代理类去实现InvocationHandler这个接口，然后重写里面的invoke方法，然后利用反射动态去反射方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxySubject</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDKProxySubject</span><span class="params">(RealSubject realSubject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy before"</span>);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = method.invoke(realSubject, args);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"proxy after"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们看看动态代理的调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = (Subject) Proxy.newProxyInstance(DynamicClient.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Subject.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> JDKProxySubject(<span class="keyword">new</span> RealSubject()));</span><br><span class="line">        subject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个时候如果我们又要在Subject接口中新添加一个方法，这个时候我们的动态代理实现类并不需要去重写接口，因为我们实现了基于方法的反射机制</p>]]></content>
    
    <summary type="html">
    
      本文是对java的动态代理以及静态代理的一些总结
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
      <category term="动态代理" scheme="http://suiwo.xyz/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
      <category term="静态代理" scheme="http://suiwo.xyz/tags/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Stream流编程</title>
    <link href="http://suiwo.xyz/2019/08/18/Stream%E6%B5%81%E7%BC%96%E7%A8%8B/"/>
    <id>http://suiwo.xyz/2019/08/18/Stream流编程/</id>
    <published>2019-08-18T03:33:56.000Z</published>
    <updated>2019-08-26T09:25:33.460Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="外部迭代与内部迭代"><a href="#外部迭代与内部迭代" class="headerlink" title="外部迭代与内部迭代"></a>外部迭代与内部迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> res1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            res1 += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"结果是："</span> + res1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res2 = IntStream.of(nums).sum();</span><br><span class="line">        System.out.println(<span class="string">"结果是："</span> + res2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="中间操作-终止操作和惰性操作"><a href="#中间操作-终止操作和惰性操作" class="headerlink" title="中间操作/终止操作和惰性操作"></a>中间操作/终止操作和惰性操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">// map就是中间操作（返回stream的操作）</span></span><br><span class="line">        <span class="comment">// sum就是终止操作</span></span><br><span class="line">        <span class="keyword">int</span> res = IntStream.of(nums).map(StreamDemo::doubleNum).sum();</span><br><span class="line">        System.out.println(<span class="string">"结果是："</span> + res);</span><br><span class="line">        System.out.println(<span class="string">"惰性求值就是在终止操作没有执行的情况下，中间操作不会执行"</span>);</span><br><span class="line">        IntStream.of(nums).map(StreamDemo::doubleNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">doubleNum</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入了doubleNum静态方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以看到输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">进入了doubleNum静态方法</span><br><span class="line">进入了doubleNum静态方法</span><br><span class="line">进入了doubleNum静态方法</span><br><span class="line">结果是：12</span><br><span class="line">惰性求值就是在终止操作没有执行的情况下，中间操作不会执行</span><br></pre></td></tr></table></figure><p>因为我们有三个数，所以执行了三次，但是因为第二次的是惰性求值所以没有执行静态方法。</p><hr><h3 id="Stream流编程的创建"><a href="#Stream流编程的创建" class="headerlink" title="Stream流编程的创建"></a>Stream流编程的创建</h3><p><img src="/images/Stream流编程/03F1D1B2-7333-4DFC-A23F-F6EA97FB1555.png" alt="这里写图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从集合创建</span></span><br><span class="line">        list.stream();</span><br><span class="line">        list.parallelStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从数组创建</span></span><br><span class="line">        Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建数字流</span></span><br><span class="line">        IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从random中创建一个无限流</span></span><br><span class="line">        <span class="keyword">new</span> Random().ints().limit(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义创建</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Stream.generate(() -&gt; random.nextInt()).limit(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="stream中间操作"><a href="#stream中间操作" class="headerlink" title="stream中间操作"></a>stream中间操作</h3><p><img src="/images/Stream流编程/F5306CA6-DE45-4C0C-99CE-BCC26DDFDCDF.png" alt="这里写图片描述"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"my name is 007"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把每个单词中单词长度大于2的长度调用出来</span></span><br><span class="line">        Stream.of(str.split(<span class="string">" "</span>)).filter(s -&gt; s.length() &gt; <span class="number">2</span>).map(s -&gt; s.length()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// flatMap A-&gt;B 属性是一个集合，最终得到所有的A元素中的所有B属性</span></span><br><span class="line">        <span class="comment">// intStream/longStream并不是Stream的子类，所以要使用装箱 boxed</span></span><br><span class="line">        Stream.of(str.split(<span class="string">" "</span>)).flatMap(s -&gt; s.chars().boxed()).forEach(</span><br><span class="line">                i -&gt; System.out.println((<span class="keyword">char</span>)i.intValue())</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------- start peek --------"</span>);</span><br><span class="line">        <span class="comment">// peek用于debug，是一个中间操作，和forEach是个终止操作</span></span><br><span class="line">        Stream.of(str.split(<span class="string">" "</span>)).peek(System.out::println).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------- start random --------"</span>);</span><br><span class="line">        <span class="comment">// limit的使用，主要用于无限流</span></span><br><span class="line">        <span class="keyword">new</span> Random().ints().filter(i -&gt; i &gt; <span class="number">100</span> &amp;&amp; i &lt; <span class="number">10000</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="stream流终止操作"><a href="#stream流终止操作" class="headerlink" title="stream流终止操作"></a>stream流终止操作</h3><p><img src="/images/Stream流编程/769A860A-899C-4621-9F9B-CE103A196B4B.png" alt="这里写图片描述"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"my name is 007"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用并行流</span></span><br><span class="line">        str.chars().parallel().forEach(i -&gt; System.out.println((<span class="keyword">char</span>)i));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用并行流顺序打印</span></span><br><span class="line">        str.chars().parallel().forEachOrdered(i -&gt; System.out.println((<span class="keyword">char</span>)i));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收集到list</span></span><br><span class="line">        List&lt;String&gt; list = Stream.of(str.split(<span class="string">" "</span>)).collect(Collectors.toList());</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Reduce拼接字符串</span></span><br><span class="line">        Optional&lt;String&gt; letters = Stream.of(str.split(<span class="string">" "</span>)).reduce((s1, s2) -&gt; s1 + <span class="string">"|"</span> + s2);</span><br><span class="line">        System.out.println(letters.orElse(<span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用初始化值的reduce</span></span><br><span class="line">        String reduce = Stream.of(str.split(<span class="string">" "</span>)).reduce(<span class="string">""</span>, (s1, s2) -&gt; s1 + <span class="string">"|"</span> + s2);</span><br><span class="line">        System.out.println(reduce);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用初始化值的reduce</span></span><br><span class="line">        Integer reduce1 = Stream.of(str.split(<span class="string">" "</span>)).map(String::length).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        System.out.println(reduce1);</span><br><span class="line"></span><br><span class="line">        Optional&lt;String&gt; max = Stream.of(str.split(<span class="string">" "</span>)).max(Comparator.comparingInt(String::length));</span><br><span class="line">        System.out.println(max.get());</span><br><span class="line"></span><br><span class="line">        OptionalInt first = <span class="keyword">new</span> Random().ints().findFirst();</span><br><span class="line">        System.out.println(first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 串行</span></span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">100</span>).peek(StreamDemo4::debug1).count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 并行，并行流默认使用线程池ForkJoinPool.commonPool-worker，默认大小为当前机器的cpu个数，可以使用</span></span><br><span class="line">        <span class="comment">// System.setProperty"java.util.concurrent.ForkJoinPool.common.parallelism "20");</span></span><br><span class="line">        <span class="comment">// 来设置默认线程数</span></span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">100</span>).parallel().peek(StreamDemo4::debug2).count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多次调用以最后一次为准</span></span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">100</span>).parallel().peek(StreamDemo4::debug1).sequential().peek(StreamDemo4::debug2).count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用自己的线程池，防止都是用默认线程然后导致的线程阻塞</span></span><br><span class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool(<span class="number">20</span>);</span><br><span class="line">        pool.submit(() -&gt; IntStream.range(<span class="number">0</span>, <span class="number">100</span>).parallel().peek(StreamDemo4::debug1).count());</span><br><span class="line">        pool.shutdown();</span><br><span class="line">        pool.wait();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debug1</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" debug1 "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debug2</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.err.println(Thread.currentThread().getName() + <span class="string">" debug2 "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="收集器"><a href="#收集器" class="headerlink" title="收集器"></a>收集器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan1"</span>, <span class="number">11</span>, Sex.MALE, Gender.ONE),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan2"</span>, <span class="number">12</span>, Sex.FEMAlE, Gender.TWO),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan3"</span>, <span class="number">13</span>, Sex.MALE, Gender.THREE),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan4"</span>, <span class="number">14</span>, Sex.FEMAlE, Gender.ONE),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan5"</span>, <span class="number">15</span>, Sex.MALE, Gender.TWO),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan6"</span>, <span class="number">16</span>, Sex.FEMAlE, Gender.THREE),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan7"</span>, <span class="number">17</span>, Sex.MALE, Gender.ONE)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以使用多种方式创建多种的集合</span></span><br><span class="line">        List&lt;Integer&gt; ages = list.stream().map(Student::getAge).collect(Collectors.toList());</span><br><span class="line">        Set&lt;Integer&gt; agesSet1 = list.stream().map(Student::getAge).collect(Collectors.toSet());</span><br><span class="line">        Set&lt;Integer&gt; agesSet2 = list.stream().map(Student::getAge).collect(Collectors.toCollection(TreeSet::<span class="keyword">new</span>));</span><br><span class="line">        System.out.println(<span class="string">"所有学生的年龄是："</span> + ages);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取学生的年龄汇总信息</span></span><br><span class="line">        IntSummaryStatistics studentList = list.stream().collect(Collectors.summarizingInt(Student::getAge));</span><br><span class="line">        System.out.println(<span class="string">"学生的汇总信息是："</span> + studentList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分块</span></span><br><span class="line">        Map&lt;Boolean, List&lt;Student&gt;&gt; sex = list.stream().collect(Collectors.partitioningBy(s -&gt; s.getSex() == Sex.MALE));</span><br><span class="line">        System.out.println(<span class="string">"按照性别分块的结果是："</span> + sex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分组</span></span><br><span class="line">        Map&lt;Gender, List&lt;Student&gt;&gt; groups = list.stream().collect(Collectors.groupingBy(Student::getGender));</span><br><span class="line">        System.out.println(<span class="string">"按照班级分组的结果是："</span> + groups);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取每个班级的人数</span></span><br><span class="line">        Map&lt;Gender, Long&gt; nums = list.stream().collect(Collectors.groupingBy(Student::getGender, Collectors.counting()));</span><br><span class="line">        System.out.println(<span class="string">"每个班级的人数结果是："</span> + nums);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Sex sex;</span><br><span class="line">    <span class="keyword">private</span> Gender gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Integer age, Sex sex, Gender gender)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sex <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gender <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Gender gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", sex="</span> + sex +</span><br><span class="line">                <span class="string">", gender="</span> + gender +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Sex&#123;</span><br><span class="line">    MALE, FEMAlE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Gender&#123;</span><br><span class="line">    ONE, TWO, THREE, FOUR, FIVE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Stream运行机制"><a href="#Stream运行机制" class="headerlink" title="Stream运行机制"></a>Stream运行机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证Stream运行机制</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.所有操作都是链式调用，一个元素之迭代一次</span></span><br><span class="line"><span class="comment"> * 2.每一个中间操作返回一个新的流，流里面有一个属性sourceStage执行同一个地方，就是Head</span></span><br><span class="line"><span class="comment"> * 3.Head -&gt; nextStage -&gt; nextStage -&gt; ... -&gt; null</span></span><br><span class="line"><span class="comment"> * 4.如果多个无状态操作与有状态操作交错存在，，则每个有状态操作会把之前的无状态操作段单独处理</span></span><br><span class="line"><span class="comment"> * 5.并行状态下，有状态的中间操作不一定能并行操作</span></span><br><span class="line"><span class="comment"> * 6.parallel()操作和sequential()都是中间操作（也是但会stream）但是他们不创建流，他们只修改我们的Head的并行标志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Stream.generate(() -&gt; random.nextInt())</span><br><span class="line">                <span class="comment">//产生五百个数据</span></span><br><span class="line">                .limit(<span class="number">500</span>)</span><br><span class="line">                <span class="comment">// 第一个无状态操作</span></span><br><span class="line">                .peek(s -&gt; print(<span class="string">"peek:"</span> + s))</span><br><span class="line">                <span class="comment">// 第二个无状态操作</span></span><br><span class="line">                .filter(s -&gt; &#123;</span><br><span class="line">                   print(<span class="string">"filter:"</span> + s);</span><br><span class="line">                   <span class="keyword">return</span> s &gt; <span class="number">10000</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 终止操作</span></span><br><span class="line">                .count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Stream不是集合元素，也不是数据结构，它相当于一个高级版本的Iterator，不可以重复遍历里面的数据，像水一样，流过了就一去不复返。它和普通的Iterator不同的是，它可以并行遍历，普通的Iterator只能是串行，在一个线程中执行。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="jdk8" scheme="http://suiwo.xyz/tags/jdk8/"/>
    
      <category term="java" scheme="http://suiwo.xyz/tags/java/"/>
    
      <category term="Stream流编程" scheme="http://suiwo.xyz/tags/Stream%E6%B5%81%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>lambda表达式</title>
    <link href="http://suiwo.xyz/2019/08/18/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://suiwo.xyz/2019/08/18/lambda表达式/</id>
    <published>2019-08-18T02:58:07.000Z</published>
    <updated>2019-08-26T09:18:49.409Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="什么是lambda表达式"><a href="#什么是lambda表达式" class="headerlink" title="什么是lambda表达式"></a>什么是lambda表达式</h3><p>“Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包（注意和数学传统意义上的不同）。</p><h5 id="下面是我们常见的命令式编程"><a href="#下面是我们常见的命令式编程" class="headerlink" title="下面是我们常见的命令式编程"></a>下面是我们常见的命令式编程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"start"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="下面这个就是函数式编程"><a href="#下面这个就是函数式编程" class="headerlink" title="下面这个就是函数式编程"></a>下面这个就是函数式编程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"start"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由此可见我们可以对一些接口代码进行简化，但是是什么样的接口都可以使用lambda表达式吗？显然不是的。接口必须满足接口里面只有一个要实现的方法。我们可以在想要实现函数式编程的接口添加注解<code>@FunctionalInterface</code>，进行编译期间的校验，当接口不满足我们的条件的时候，将会有错误信息。</p></blockquote><hr><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>在上面我们说了接口要实现只有一个要实现的方法，并不是说接口只能有一个方法，这个时候我们可以使用比如像默认方法这样的方式来解决<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterfaceTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is default method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p><img src="/images/lambda表达式/AD98F8C6-742B-46F0-9498-0301BBE9103D.png" alt="这里写图片描述"></p><hr><h3 id="静态方法-动态方法的引用"><a href="#静态方法-动态方法的引用" class="headerlink" title="静态方法 动态方法的引用"></a>静态方法 动态方法的引用</h3><p>下面是对于一些常见方法引用的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法引用</span></span><br><span class="line">        Consumer&lt;String&gt; consumer1 = System.out::println;</span><br><span class="line">        consumer1.accept(<span class="string">"接受的"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法的引用</span></span><br><span class="line">        Consumer&lt;Dog&gt; consumer2 = Dog::bark;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        consumer2.accept(dog);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非静态方法引用，使用对象实例的方法引用</span></span><br><span class="line"><span class="comment">//        Function&lt;Integer, Integer&gt; function = dog::eat;</span></span><br><span class="line"><span class="comment">//        UnaryOperator&lt;Integer&gt; function = dog::eat;</span></span><br><span class="line"><span class="comment">//        System.out.println("还剩下" + function.apply(2) + "斤");</span></span><br><span class="line"></span><br><span class="line">        IntUnaryOperator function = dog::eat;</span><br><span class="line">        System.out.println(<span class="string">"还剩下"</span> + function.applyAsInt(<span class="number">2</span>) + <span class="string">"斤"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用类名来引用非静态方法</span></span><br><span class="line">        BiFunction&lt;Dog, Integer, Integer&gt; eatFunction = Dog::eat;</span><br><span class="line">        System.out.println(<span class="string">"还剩下"</span> + eatFunction.apply(dog, <span class="number">2</span>) + <span class="string">"斤"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数的方法引用</span></span><br><span class="line">        Supplier&lt;Dog&gt; dogSupplier = Dog::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(<span class="string">"创建了新对象："</span> + dogSupplier.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 带参数的构造方法的引用</span></span><br><span class="line">        Function&lt;String, Dog&gt; dogFunction = Dog::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(<span class="string">"创建了新对象："</span> + dogFunction.apply(<span class="string">"旺财"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"dog"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer food = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">(Dog dog)</span></span>&#123;</span><br><span class="line">        System.out.println(dog + <span class="string">"叫了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eat</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃了"</span> + i + <span class="string">"斤"</span>);</span><br><span class="line">        <span class="keyword">this</span>.food -= i;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.food;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dog&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="级联和柯"><a href="#级联和柯" class="headerlink" title="级联和柯"></a>级联和柯</h3><ul><li>柯里化：把多个参数的函数转换成只有一个参数的函数 </li><li>柯里化的目的：函数标准化 </li><li>高阶函数：返回函数的函数</li></ul><p>下面是对级联和柯里化的一些代码实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurryDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 级联表达式</span></span><br><span class="line">        Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; fun1 = x -&gt; y -&gt; x + y;</span><br><span class="line">        System.out.println(fun1.apply(<span class="number">1</span>).apply(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        Function&lt;Integer, Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt;&gt; fun2 = x -&gt; y -&gt; z -&gt; x + y + z;</span><br><span class="line">        System.out.println(fun2.apply(<span class="number">1</span>).apply(<span class="number">2</span>).apply(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        Function f = fun2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f <span class="keyword">instanceof</span> Function)&#123;</span><br><span class="line">                Object obj = f.apply(i);</span><br><span class="line">                <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Function)&#123;</span><br><span class="line">                    f = (Function) obj;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"调用结束：结果为"</span> + obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      “Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包（注意和数学传统意义上的不同）。
    
    </summary>
    
      <category term="Java" scheme="http://suiwo.xyz/categories/Java/"/>
    
    
      <category term="jdk8" scheme="http://suiwo.xyz/tags/jdk8/"/>
    
      <category term="java" scheme="http://suiwo.xyz/tags/java/"/>
    
      <category term="lambda" scheme="http://suiwo.xyz/tags/lambda/"/>
    
      <category term="级联" scheme="http://suiwo.xyz/tags/%E7%BA%A7%E8%81%94/"/>
    
      <category term="柯里化" scheme="http://suiwo.xyz/tags/%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    
  </entry>
  
</feed>
